{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/glue/binaryen.js","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/collections.js","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/math.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/vector.ts","webpack://assemblyscript/./src/extra/ast.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","STUB_DELIMITER","CommonNames","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","funcref","externref","exnref","anyref","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_TABLE_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_LOW_MEMORY_LIMIT","ASC_WASI","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","ASC_FEATURE_MULTI_VALUE","ASC_FEATURE_GC","ASC_FEATURE_MEMORY64","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","Funcref","Externref","Exnref","Anyref","String","Array","StaticArray","Set","Map","Function","ArrayBufferView","ArrayBuffer","Math","Mathf","NativeMath","NativeMathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","Error","abort","trace","seed","pow","ipow32","ipow64","mod","alloc","realloc","free","new_","renew","retain","release","collect","typeinfo","instanceof_","visit","newBuffer","newArray","BLOCK","OBJECT","Feature","featureToString","Target","Typeinfo","TypeinfoFlags","DiagnosticCategory","diagnosticCategoryToString","category","PEDANTIC","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_MAGENTA","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","other","thisRange","otherRange","equals","thisRelatedRange","otherRelatedRange","source","toString","normalizedPath","lineAt","start","columnAt","end","formatDiagnosticContext","useColors","text","len","length","isLineBreak","charCodeAt","sb","substring","push","join","showContext","relatedSource","diagnostics","seen","withRange","has","seenInSource","seenMessagesAtPos","k","set","emitDiagnostic","NodeKind","DecoratorKind","LiteralKind","SourceKind","Node","kind","TypeName","createIdentifierExpression","typeArguments","isNullable","NamedTypeNode","parameters","returnType","explicitThisType","FunctionTypeNode","createSimpleTypeName","extendsType","defaultType","TypeParameterNode","parameterKind","type","initializer","ParameterNode","args","DecoratorNode","fromNode","commentKind","CommentNode","isQuoted","IdentifierExpression","elementExpressions","ArrayLiteralExpression","assertionKind","expression","toType","AssertionExpression","operator","left","right","BinaryExpression","CallExpression","declaration","ClassExpression","expressions","CommaExpression","ConstructorExpression","elementExpression","ElementAccessExpression","FalseExpression","FloatLiteralExpression","FunctionExpression","isType","InstanceOfExpression","IntegerLiteralExpression","typeName","NewExpression","NullExpression","names","values","ObjectLiteralExpression","OmittedExpression","ParenthesizedExpression","PropertyAccessExpression","pattern","patternFlags","RegexpLiteralExpression","condition","ifThen","ifElse","TernaryExpression","StringLiteralExpression","SuperExpression","ThisExpression","TrueExpression","operand","UnaryPostfixExpression","UnaryPrefixExpression","statements","BlockStatement","label","BreakStatement","decorators","flags","typeParameters","implementsTypes","members","ClassDeclaration","ContinueStatement","statement","DoStatement","EmptyStatement","EnumDeclaration","EnumValueDeclaration","path","isDeclare","ExportStatement","ExportDefaultStatement","externalName","ExportImportStatement","localName","exportedName","ExportMember","ExpressionStatement","ifTrue","ifFalse","IfStatement","declarations","ImportStatement","namespaceName","foreignName","ImportDeclaration","InterfaceDeclaration","FieldDeclaration","incrementor","ForStatement","variable","iterable","ForOfStatement","signature","body","arrowKind","FunctionDeclaration","keyType","valueType","IndexSignatureNode","MethodDeclaration","NamespaceDeclaration","ReturnStatement","cases","SwitchStatement","SwitchCase","ThrowStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","VariableStatement","VariableDeclaration","VoidStatement","WhileStatement","literalKind","LITERAL","changetype","FLOAT","INTEGER","STRING","NULL","TRUE","FALSE","node","CALL","PROPERTYACCESS","isAccessOn","THIS","SUPER","TypeNode","super","typeParameterNodes","NAMEDTYPE","namedTypeNode","next","typeArgumentNodes","hasGenericComponent","identifier","FUNCTIONTYPE","functionTypeNode","parameterNodes","TYPENAME","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","NONE","flag","nameNode","IDENTIFIER","nameStr","BUILTIN","EXTERNAL","FINAL","GLOBAL","INLINE","LAZY","OPERATOR","UNMANAGED","UNSAFE","propertyAccessNode","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","decoratorKind","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","ASSERTION","BINARY","numTypeArguments","Range","numArguments","CLASS","COMMA","CONSTRUCTOR","ELEMENTACCESS","FUNCTION","INSTANCEOF","NEW","OMITTED","PARENTHESIZED","REGEXP","TERNARY","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","sourceKind","SOURCE","debugInfoIndex","exportPaths","lineCache","lineColumn","internalPath","mangleInternalPath","pos","lastIndexOf","simplePath","LIBRARY","LIBRARY_ENTRY","off","unchecked","DeclarationStatement","INDEXSIGNATURE","VariableLikeDeclarationStatement","BREAK","CLASSDECLARATION","indexSignature","CONTINUE","DO","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","normalizePath","startsWith","resolvePath","EXPORTDEFAULT","EXPRESSION","parameterIndex","FIELDDECLARATION","FOR","FOROF","ArrowKind","FUNCTIONDECLARATION","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","cur","isTrivialAlphanum","decorator","Token","IdentifierHandling","tokenFromKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","CONST","DEBUGGER","DECLARE","DEFAULT","DELETE","ELSE","ENUM","EXTENDS","FINALLY","FROM","GET","IMPLEMENTS","IN","INTERFACE","IS","KEYOF","LET","MODULE","NAMESPACE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","SET","STATIC","TYPE","TYPEOF","VAR","WITH","YIELD","INVALID","tokenIsAlsoIdentifier","token","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","PLUS","MINUS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","debugInfoRef","a","b","Tokenizer","DiagnosticEmitter","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","MAX_VALUE","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","error","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","state","reusableState","State","quote","result","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","readHexadecimalEscape","fromCharCode","escaped","Unterminated_regular_expression_literal","Invalid_regular_expression_flags","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","sepEnd","i64_new","i64_4","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readDecimalFloat","sepCount","readDecimalFloatPartial","replaceAll","parseFloat","allowLeadingZeroSep","remain","value32","i64_low","invalid","i64_high","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","OperatorKind","ElementKind","DecoratorFlags","fromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PREFIX_INC","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","fromBinaryToken","fromUnaryPrefixToken","fromUnaryPostfixToken","Program","options","sources","diagnosticsOffset","nextClassId","nextSignatureId","initialized","filesByName","elementsByName","elementsByDeclaration","instancesByName","wrapperClasses","managedClasses","uniqueSignatures","_arrayBufferViewInstance","_arrayBufferInstance","_arrayPrototype","_staticArrayPrototype","_setPrototype","_mapPrototype","_functionPrototype","_int8ArrayPrototype","_int16ArrayPrototype","_int32ArrayPrototype","_int64ArrayPrototype","_uint8ArrayPrototype","_uint8ClampedArrayPrototype","_uint16ArrayPrototype","_uint32ArrayPrototype","_uint64ArrayPrototype","_float32ArrayPrototype","_float64ArrayPrototype","_stringInstance","_allocInstance","_reallocInstance","_freeInstance","_newInstance","_renewInstance","_retainInstance","_releaseInstance","_collectInstance","_visitInstance","_typeinfoInstance","_instanceofInstance","_newBufferInstance","_newArrayInstance","_BLOCKInstance","_OBJECTInstance","_runtimeHeaderSize","nativeDummySignature","nativeSource","Source","parser","Parser","resolver","Resolver","nativeFile","File","internalName","cached","requireClass","CLASS_PROTOTYPE","lookupFunction","requireFunction","blockOverhead","BLOCKInstance","nextMemoryOffset","AL_MASK","headerSize","OBJECTInstance","createVariableDeclaration","createTypeDeclaration","createOmittedType","createFunctionType","createNamedType","createFunctionDeclaration","createNamespaceDeclaration","parent","decoratorFlags","FunctionPrototype","makeNativeFunctionDeclaration","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","makeNativeTypeDeclaration","GENERIC","registerConstantInteger","isWasm64","WASM64","WASM32","noAssert","memoryBase","tableBase","optimizeLevelHint","shrinkLevelHint","lowMemoryLimit","hasFeature","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","_keys","Map_keys","starExports","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","madeProgress","queuedImport","element","lookupForeign","splice","asAliasNamespace","Module_0_has_no_exported_member_1","exportNames","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","isDeclaredElement","arrayBufferInstance","id","stringInstance","arrayBufferViewInstance","registerWrapperClass","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_final_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","INTERFACE_PROTOTYPE","An_interface_can_only_extend_an_interface","implementsNodes","implementsNode","interfaceElement","interfacePrototype","interfacePrototypes","A_class_can_only_implement_an_interface","markVirtuals","globalAliases","isWasi","BuiltinNames","wasiAbort","wasiTrace","wasiSeed","alias","delete","firstChar","parseInt","_values","Map_values","USER_ENTRY","markModuleExports","thisInstanceMembers","instanceMembers","baseInstanceMembers","thisMember","isAny","baseMember","FUNCTION_PROTOTYPE","thisMethod","baseMethod","visibilityEquals","errorRelated","Overload_signatures_must_all_be_public_private_or_protected","VIRTUAL","overloads","baseMethodInstances","instances","PROPERTY_PROTOTYPE","thisProperty","baseProperty","baseGetter","getterPrototype","thisGetter","baseGetterInstances","baseSetter","setterPrototype","thisSetter","baseSetterInstances","Duplicate_identifier_0","nextPrototype","resolved","resolveClass","resolveFunction","markModuleExport","exportsStar","MODULE_EXPORT","member","propertyPrototype","PROPERTY","FIELD","staticMembers","setType","className","isInternalReference","classElement","wrappedType","isIntegerInclReference","global","Global","makeNativeVariableDeclaration","setConstantIntegerValue","isFloatValue","setConstantFloatValue","existing","merged","tryMerge","elements","lookupExport","fileQueuedExports","queuedExportForeignPath","acceptedFlags","fromKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","checkDecorators","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","memberDeclarations","memberDeclaration","initializeField","methodDeclaration","initializeProperty","method","initializeMethod","constructorPrototype","is","AMBIENT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","isLiteralKind","_0_is_not_a_valid_operator","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","parentMembers","PropertyPrototype","Duplicate_property_0","ensureProperty","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","endsWith","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","INSTANCE","InterfacePrototype","initializeFieldAsProperty","typeNode","atEnd","createMethodDeclaration","createParameter","original","Namespace","copyMembers","cyclics","instance","isAcyclic","Element","program","shadowType","FILE","current","localIdentifierIfImport","originalDeclaration","reportedIdentifier","isBound","isPublic","vis","declaredElements","DeclaredElement","signatureNode","base","isAssignableTo","selfProperty","selfGetter","getterInstance","selfSetter","setterInstance","AcyclicState","typedElements","TypedElement","RESOLVED","aliasNamespaces","startFunction","makeNativeFunction","Signature","ensureGlobal","includes","makeNativeNamespaceDeclaration","SCOPED","copyExportsToNamespace","memberName","TYPEDEFINITION","mangleInternalName","lookup","inSelf","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","i64_zero","constantFloatValue","INLINED","ENUMVALUE","isImmutable","Local","index","LOCAL","originalName","boundPrototypes","classInstance","bound","instanceKey","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","varargsStub","virtualStub","memorySegment","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","tempFuncrefs","tempExternrefs","tempExnrefs","tempAnyrefs","nextBreakId","breakStack","breakLabel","localIndex","thisType","local","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","createParent","registerConcreteElement","getDefaultParameterName","postfix","stub","clone","COMPILED","STUB","locals","sourceMap","setDebugLocation","FIELD_PROTOTYPE","memoryOffset","getterRef","setterRef","firstDeclaration","toBound","isUnchecked","lookupOverload","_isInterface","extendees","extends","basePtototype","Class","interfaces","constructorInstance","_id","_acyclic","rttiFlags","implementers","didCheckFieldInitialization","size","classReference","isBuiltinArray","lengthField","inheritedTypeArguments","baseName","baseType","iface","target","Set_values","uncheckedOverload","overload","fieldName","field","overhead","buffer","runtimeHeaderSize","writeField","baseOffset","fieldInstance","offset","typeKind","i64_is","writeI8","writeI16","writeI32","writeI64","writeI32AsI64","writeI64AsI32","writeF32","writeF64","extendedPrototype","arrayPrototype","getTypeArgumentsTo","staticArrayPrototype","abvInstance","float32ArrayPrototype","float64ArrayPrototype","int8ArrayPrototype","int16ArrayPrototype","int32ArrayPrototype","int64ArrayPrototype","uint8ArrayPrototype","uint8ClampedArrayPrototype","uint16ArrayPrototype","uint32ArrayPrototype","uint64ArrayPrototype","acyclic","hasCycle","cyclesTo","except","fieldType","isReference","getClass","setPrototype","mapPrototype","exceptIfMember","out","extendee","getAllExtendees","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","isInstance","asGlobal","cachedDefaultParameterNames","NativeType","FeatureFlags","ExpressionId","BinaryOp","SideEffects","None","Unreachable","Auto","UnaryOp","AtomicRMWOp","SIMDExtractOp","SIMDReplaceOp","SIMDShiftOp","SIMDTernaryOp","SIMDLoadOp","ExpressionRunnerFlags","Module","hasTemporaryFunction","cachedStrings","lit","binaryen","_malloc","_BinaryenSizeofLiteral","_BinaryenModuleCreate","cArr","allocU8Array","_BinaryenModuleRead","_free","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","__i32_store8","_BinaryenLiteralVec128","_BinaryenRefNull","op","expr","_BinaryenUnary","_BinaryenBinary","_BinaryenMemorySize","delta","_BinaryenMemoryGrow","_BinaryenLocalGet","_BinaryenExpressionGetType","_BinaryenLocalTee","cStr","allocStringCached","_BinaryenGlobalGet","signed","ptr","align","_BinaryenLoad","_BinaryenStore","_BinaryenAtomicLoad","_BinaryenAtomicStore","_BinaryenAtomicRMW","expected","replacement","_BinaryenAtomicCmpxchg","timeout","expectedType","_BinaryenAtomicWait","notifyCount","_BinaryenAtomicNotify","_BinaryenAtomicFence","_BinaryenLocalSet","_BinaryenGlobalSet","children","allocPtrArray","ret","_BinaryenBlock","stmts","nop","single","getExpressionId","Return","Throw","singleType","getExpressionType","block","_BinaryenBreak","_BinaryenDrop","getSideEffects","ReadsLocal","ReadsGlobal","drop","_BinaryenLoop","_BinaryenIf","_BinaryenNop","_BinaryenReturn","_BinaryenSelect","defaultName","numNames","strs","_BinaryenSwitch","operands","isReturn","_BinaryenReturnCall","_BinaryenCall","params","results","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","call_indirect","_BinaryenUnreachable","_BinaryenMemoryCopy","_BinaryenMemoryFill","catchBody","_BinaryenTry","eventName","_BinaryenThrow","_BinaryenRethrow","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPop","_BinaryenTupleMake","tuple","_BinaryenTupleExtract","vec","idx","_BinaryenSIMDExtract","_BinaryenSIMDReplace","vec1","vec2","mask","_BinaryenSIMDShuffle","_BinaryenSIMDTernary","shift","_BinaryenSIMDShift","_BinaryenSIMDLoad","_BinaryenRefIsNull","_BinaryenRefFunc","mutable","_BinaryenAddGlobal","_BinaryenGetGlobal","_BinaryenRemoveGlobal","attribute","_BinaryenAddEvent","_BinaryenGetEvent","_BinaryenRemoveEvent","varTypes","_BinaryenAddFunction","_BinaryenGetFunction","_BinaryenRemoveFunction","paramTypes","tempName","createType","func","_BinaryenSetStart","_BinaryenAddFunctionExport","_BinaryenAddTableExport","_BinaryenAddMemoryExport","_BinaryenAddGlobalExport","_BinaryenAddEventExport","_BinaryenRemoveExport","externalModuleName","externalBaseName","cStr3","_BinaryenAddFunctionImport","_BinaryenAddTableImport","shared","_BinaryenAddMemoryImport","globalType","_BinaryenAddGlobalImport","_BinaryenAddEventImport","initial","maximum","segments","segs","psvs","offs","sizs","segment","cArr1","cArr2","cArr3","cArr4","u32s","val","__i32_store","allocU32Array","_BinaryenSetMemory","funcs","_BinaryenSetFunctionTable","contents","_BinaryenAddCustomSection","_BinaryenGetOptimizeLevel","level","_BinaryenSetOptimizeLevel","_BinaryenGetShrinkLevel","_BinaryenSetShrinkLevel","_BinaryenGetDebugInfo","on","_BinaryenSetDebugInfo","_BinaryenGetLowMemoryUnused","_BinaryenSetLowMemoryUnused","_BinaryenGetFastMath","_BinaryenSetFastMath","_BinaryenGetPassArgument","readString","_BinaryenSetPassArgument","_BinaryenClearPassArguments","_BinaryenGetAlwaysInlineMaxSize","_BinaryenSetAlwaysInlineMaxSize","_BinaryenGetFlexibleInlineMaxSize","_BinaryenSetFlexibleInlineMaxSize","_BinaryenGetOneCallerInlineMaxSize","_BinaryenSetOneCallerInlineMaxSize","_BinaryenGetAllowInliningFunctionsWithLoops","enabled","_BinaryenSetAllowInliningFunctionsWithLoops","_BinaryenModuleGetFeatures","featureFlags","_BinaryenModuleSetFeatures","pass","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","passes","cStrs","optimizeLevel","shrinkLevel","debugInfo","usesARC","setOptimizeLevel","setShrinkLevel","setDebugInfo","setFastMath","clearPassArguments","setAlwaysInlineMaxSize","setFlexibleInlineMaxSize","setOneCallerInlineMaxSize","setAllowInliningFunctionsWithLoops","getLowMemoryUnused","runPasses","_BinaryenModuleValidate","_BinaryenModuleInterpret","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","__i32_load","binaryLen","binary","BinaryModule","__i32_load8_u","readBuffer","str","_BinaryenModuleDispose","Relooper","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","cloneExpression","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","_BinaryenExpressionCopy","maxLoopIterations","runner","_ExpressionRunnerCreate","precomp","_ExpressionRunnerRunAndDispose","_BinaryenModuleAddDebugInfoFileName","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","types","_BinaryenTypeCreate","UNLIMITED_MEMORY","UNLIMITED_TABLE","arity","_BinaryenTypeArity","_BinaryenTypeExpand","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChildAt","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperandAt","_BinaryenMemoryGrowGetDelta","_BinaryenFunctionGetBody","_BinaryenFunctionGetName","_BinaryenFunctionGetParams","_BinaryenFunctionGetResults","count","_BinaryenFunctionGetNumVars","_BinaryenFunctionGetVar","_BinaryenGlobalGetName","_BinaryenGlobalGetType","_BinaryenGlobalIsMutable","_BinaryenGlobalGetInitExpr","event","_BinaryenEventGetName","_BinaryenEventGetAttribute","_BinaryenEventGetParams","_BinaryenEventGetResults","_RelooperCreate","_RelooperAddBlock","from","to","_RelooperAddBranch","_RelooperAddBlockWithSwitch","indexes","i32s","allocI32Array","_RelooperAddBranchForSwitch","entry","labelHelper","_RelooperRenderAndDispose","features","All","_BinaryenExpressionGetSideEffects","u8s","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","arr","ch","fromCharCodes","defaultIndex","indexOf","labelPostfix","numCases","numValues","labels","local_set","br","EqI32","local_get","defaultLabel","unshift","lastCase","output","needsExplicitUnreachable","Break","Block","numChildren","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperandAt","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","Select","Drop","MemorySize","MemoryGrow","Nop","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Pop","RefNull","RefIsNull","_BinaryenRefIsNullGetValue","RefFunc","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperandAt","Rethrow","_BinaryenRethrowGetExnref","BrOnExn","_BinaryenBrOnExnGetExnref","TupleMake","_BinaryenTupleMakeGetNumOperands","_BinaryenTupleMakeGetOperandAt","TupleExtract","TypeKind","TypeFlags","_nonNullableType","_nullableType","byteSize","ceil","signatureReference","auto","isize64","isize32","usize64","usize32","clz","isIntegerValue","getSignature","wrapper","functionPrototype","isExternalReference","targetType","nullableType","isNullableReference","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isBooleanValue","isSignedIntegerValue","isVectorValue","signednessIsImportant","validWat","nullablePostfix","typesToNativeTypes","numTypes","toNativeType","requiredParameters","hasRest","signatureTypes","compare","numParameterTypes","nativeTypes","thisThisType","otherThisType","thisParameterTypes","otherParameterTypes","numParameters","requireSameSize","targetThisType","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","optionalStart","restIndex","cloneParameterTypes","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveClassPending","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_is_not_generic","asNullable","Type_0_cannot_be_nullable","resolveClassInclTypeArguments","uniqueMap","typeDefinition","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","resolveType","Cannot_find_name_0","parameterNode","REST","parameterTypeNode","isTypeOmitted","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","getClassOrWrapper","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","ctxFlow","resolveFunctionInclTypeArguments","actualFunction","numTypeParameters","typeParameterNames","argumentNodes","argumentExpression","resolveExpression","SWALLOW","propagateInferredGenericTypes","resolvedTypeArguments","inferredType","Type_argument_expected","currentType","ensureResolvedLazyGlobal","isTypedElement","ctxType","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupIdentifierExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","getElementOfType","getTypeOfElement","Expression_cannot_be_represented_by_a_type","initializerNode","targetNode","lookupExpression","propertyName","variableLikeElement","propertyInstance","resolveProperty","indexedGet","resolvedType","functionInstance","baseInstance","targetExpression","intValue","isValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","PREFIX","Type_0_is_illegal_in_this_context","NONNULL","Not_implemented_0","nonNullableType","The_0_operator_cannot_be_applied_to_type_1","operatorTokenToString","determineIntegerLiteralType","i64_sub","isNumericValue","intType","leftType","rightType","commonType","commonDenominator","Operator_0_cannot_be_applied_to_types_1_and_2","isInline","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","fltType","elementType","numNullLiterals","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","maybeInferCall","varType","varElement","ftype","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","thenType","elseType","This_expression_is_not_constructable","actualParent","typesToString","resolvedInstance","getResolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureParameters","numSignatureParameters","parameterDeclaration","setResolvedInstance","reportNode","nameInclTypeParamters","Interface","pendingClasses","anyPending","_0_is_referenced_directly_or_indirectly_in_its_own_base_expression","setBase","addInterface","finishResolveClass","unimplemented","ifaceMembers","isCompatibleOverride","This_overload_signature_is_not_compatible_with_its_implementation_signature","identifierAndSignatureRange","baseMembers","instanceMemberPrototypes","properties","fieldPrototype","fieldTypeNode","baseField","Field","isPowerOf2","boundPrototype","propertyGetter","propertySetter","Getter_and_setter_accessors_do_not_agree_in_visibility","Property_0_only_has_a_setter_and_is_missing_a_getter","Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2","ctorPrototype","ctorInstance","operatorInstance","overloadKind","overloadPrototype","Type_0_is_not_assignable_to_type_1","IndexSignature","pending","dependsOnInstance","_values2","Property","LocalFlags","FieldFlags","FlowFlags","ConditionKind","parentFunction","continueLabel","scopedLocals","localFlags","thisFieldFlags","inlineFunction","inlineReturnLabel","initThisFieldFlags","resetBreakContext","branch","slice","temps","unsetLocalFlag","addLocal","pop","getTempLocal","setLocalFlag","RETAINED","resetTemporaryName","scopedLocal","setTemporaryName","scopedDummy","existingLocal","isNative","scopedAlias","freeTempLocal","scope","defaultIfInlined","actualClass","setThisFieldFlag","INITIALIZED","fieldFlags","stack","otherFlags","conditionKind","inherit","thisFlags","newFlags","thisLocalFlags","numThisLocalFlags","otherLocalFlags","numOtherLocalFlags","maxLocalFlags","max","CONSTANT","WRAPPED","CONDITIONALLY_RETAINED","leftFlags","rightFlags","rightLocalFlags","leftLocalFlags","numLeftLocalFlags","numRightLocalFlags","leftFieldFlags","newFieldFlags","rightFieldFlags","before","after","min","isShortIntegerValue","isLocalFlag","isAnyLocalFlag","ANY_RETAINED","isLocalTee","getLocalSetIndex","getLocalGetIndex","iff","inheritNonnullIfTrue","getLocalSetValue","getIfFalse","getConstValueI32","getConstValueI64Low","getConstValueI64High","getIfCondition","getIfTrue","getUnaryOp","EqzI32","EqzI64","inheritNonnullIfFalse","getUnaryValue","getBinaryOp","getBinaryLeft","getBinaryRight","EqI64","NeI32","NeI64","getCallTarget","retainInstance","getCallOperandAt","exprType","canConversionOverflow","canOverflow","getGlobalGetName","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","computeSmallIntegerMask","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","getConstValueF32","getConstValueF64","MIN_VALUE","fromType","isLoadSigned","getLoadBytes","getBlockName","getBlockChildCount","last","getBlockChildAt","getSelectThen","getSelectElse","instanceName","levels","findUsedLocalsVisit","used","traverse","started","argumentsLength","setArgumentsLength","isInteger","isFloat","isBoolean","isSigned","isString","isArray","isArrayLike","isFunction","isDefined","isConstant","isManaged","isVoid","sub","mul","div","ctz","popcnt","rotl","rotr","abs","floor","copysign","nearest","reinterpret","sqrt","trunc","load","store","atomic_load","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","atomic_cmpxchg","atomic_wait","atomic_notify","atomic_fence","sizeof","alignof","offsetof","nameof","lengthof","select","unreachable","instantiate","idof","i32_clz","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_add","f32_add","f64_add","i32_sub","f32_sub","f64_sub","i32_mul","f32_mul","f64_mul","i32_div_s","i32_div_u","i64_div_s","i64_div_u","f32_div","f64_div","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_splat","v128_extract_lane","v128_replace_lane","v128_shuffle","v128_swizzle","v128_load_splat","v128_load_ext","v128_load","v128_store","v128_add","v128_sub","v128_mul","v128_div","v128_neg","v128_add_saturate","v128_sub_saturate","v128_shl","v128_shr","v128_and","v128_or","v128_xor","v128_andnot","v128_not","v128_bitselect","v128_any_true","v128_all_true","v128_bitmask","v128_min","v128_max","v128_pmin","v128_pmax","v128_dot","v128_avgr","v128_abs","v128_sqrt","v128_ceil","v128_floor","v128_trunc","v128_nearest","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","v128_convert","v128_trunc_sat","v128_narrow","v128_widen_low","v128_widen_high","v128_qfma","v128_qfms","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_min_s","i8x16_min_u","i8x16_max_s","i8x16_max_u","i8x16_avgr_u","i8x16_abs","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_bitmask","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_min_s","i16x8_min_u","i16x8_max_s","i16x8_max_u","i16x8_avgr_u","i16x8_abs","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_bitmask","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_widen_low_i8x16_s","i16x8_widen_low_i8x16_u","i16x8_widen_high_i8x16_s","i16x8_widen_high_i8x16_u","i16x8_load8x8_s","i16x8_load8x8_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_min_s","i32x4_min_u","i32x4_max_s","i32x4_max_u","i32x4_dot_i16x8_s","i32x4_abs","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_bitmask","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_widen_low_i16x8_s","i32x4_widen_low_i16x8_u","i32x4_widen_high_i16x8_s","i32x4_widen_high_i16x8_u","i32x4_load16x4_s","i32x4_load16x4_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_sat_f64x2_s","i64x2_trunc_sat_f64x2_u","i64x2_load32x2_s","i64x2_load32x2_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_pmin","f32x4_pmax","f32x4_abs","f32x4_sqrt","f32x4_ceil","f32x4_floor","f32x4_trunc","f32x4_nearest","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_pmin","f64x2_pmax","f64x2_abs","f64x2_sqrt","f64x2_ceil","f64x2_floor","f64x2_trunc","f64x2_nearest","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_i64x2_s","f64x2_convert_i64x2_u","f64x2_qfma","f64x2_qfms","v8x16_shuffle","v8x16_swizzle","v8x16_load_splat","v16x8_load_splat","v32x4_load_splat","v64x2_load_splat","heap_base","rtti_base","visit_globals","visit_members","isNaN","isFinite","memory_size","memory_grow","memory_copy","memory_fill","memory_data","builtin_clz","ctx","compiler","checkTypeOptional","checkArgsRequired","compileExpression","unary","ClzI64","Operation_0_cannot_be_applied_to_type_1","typeArgumentsRange","builtin_ctz","CtzI64","builtin_popcnt","PopcntI64","builtin_rotl","currentFlow","temp1","temp2","OrI32","local_tee","SubI32","RotlI32","RotlI64","builtin_rotr","RotrI32","RotrI64","builtin_abs","XorI32","AddI32","XorI64","AddI64","ShrI64","nativeSizeType","AbsF32","AbsF64","builtin_max","isNumericLiteral","MaxF32","MaxF64","nativeType","builtin_min","MinF32","MinF64","builtin_ceil","CeilF32","CeilF64","builtin_floor","FloorF32","FloorF64","builtin_copysign","CopysignF32","CopysignF64","builtin_nearest","NearestF32","NearestF64","builtin_reinterpret","checkTypeRequired","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","builtin_sqrt","SqrtF32","SqrtF64","builtin_trunc","TruncF32","TruncF64","builtin_load","checkArgsOptional","contextualType","outType","numOperands","immOffset","immAlign","evaluateImmediateOffset","evaluateImmediateAlign","builtin_store","contextIsExact","inType","convertExpression","builtin_add","makeAdd","builtin_sub","makeSub","builtin_mul","makeMul","builtin_div","makeDiv","builtin_atomic_load","checkFeatureEnabled","builtin_atomic_store","builtin_atomic_binary","opName","atomic_rmw","builtin_atomic_add","Add","builtin_atomic_sub","Sub","builtin_atomic_and","And","builtin_atomic_or","Or","builtin_atomic_xor","Xor","builtin_atomic_xchg","Xchg","builtin_atomic_cmpxchg","builtin_atomic_wait","builtin_diagnostic","checkTypeAbsent","User_defined_0","builtin_conversion","builtin_i8x16","runExpression","PreserveSideeffects","Expression_must_be_a_compile_time_constant","builtin_v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","builtin_v128_extract_lane","maxIdx","_0_must_be_a_value_between_1_and_2_inclusive","simd_extract","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","builtin_v128_replace_lane","simd_replace","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","builtin_v128_shuffle","laneWidth","laneCount","argN","off8","idx8","simd_shuffle","builtin_v128_swizzle","SwizzleV8x16","builtin_v128_load_splat","simd_load","LoadSplatV8x16","LoadSplatV16x8","LoadSplatV32x4","LoadSplatV64x2","builtin_v128_load_ext","LoadI8ToI16x8","LoadU8ToU16x8","LoadI16ToI32x4","LoadU16ToU32x4","LoadI32ToI64x2","LoadU32ToU64x2","builtin_v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","builtin_v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","builtin_v128_mul","MulI8x16","MulI16x8","MulI32x4","MulF32x4","MulF64x2","builtin_v128_div","DivF32x4","DivF64x2","builtin_v128_add_saturate","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","builtin_v128_sub_saturate","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","builtin_v128_min","MinI8x16","MinU8x16","MinI16x8","MinU16x8","MinI32x4","MinU32x4","MinF32x4","MinF64x2","builtin_v128_max","MaxI8x16","MaxU8x16","MaxI16x8","MaxU16x8","MaxI32x4","MaxU32x4","MaxF32x4","MaxF64x2","builtin_v128_pmin","PminF32x4","PminF64x2","builtin_v128_pmax","PmaxF32x4","PmaxF64x2","builtin_v128_dot","DotI16x8","builtin_v128_avgr","AvgrU8x16","AvgrU16x8","builtin_v128_eq","EqI8x16","EqI16x8","EqI32x4","EqF32x4","EqF64x2","builtin_v128_ne","NeI8x16","NeI16x8","NeI32x4","NeF32x4","NeF64x2","builtin_v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtF32x4","LtF64x2","builtin_v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeF32x4","LeF64x2","builtin_v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtF32x4","GtF64x2","builtin_v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeF32x4","GeF64x2","builtin_v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","builtin_v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","builtin_v128_abs","AbsI8x16","AbsI16x8","AbsI32x4","AbsF32x4","AbsF64x2","builtin_v128_sqrt","SqrtF32x4","SqrtF64x2","builtin_v128_ceil","CeilF32x4","CeilF64x2","builtin_v128_floor","FloorF32x4","FloorF64x2","builtin_v128_trunc","TruncF32x4","TruncF64x2","builtin_v128_nearest","NearestF32x4","NearestF64x2","builtin_v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","ConvertI64x2ToF64x2","ConvertU64x2ToF64x2","builtin_v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","TruncSatF64x2ToI64x2","TruncSatF64x2ToU64x2","builtin_v128_widen_low","WidenLowI8x16ToI16x8","WidenLowU8x16ToU16x8","WidenLowI16x8ToI32x4","WidenLowU16x8ToU32x4","builtin_v128_widen_high","WidenHighI8x16ToI16x8","WidenHighU8x16ToU16x8","WidenHighI16x8ToI32x4","WidenHighU16x8ToU32x4","builtin_v128_shl","simd_shift","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","builtin_v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","builtin_v128_bitwise_binary","builtin_v128_any_true","AnyTrueI8x16","AnyTrueI16x8","AnyTrueI32x4","AnyTrueI64x2","builtin_v128_all_true","AllTrueI8x16","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","builtin_v128_bitmask","BitmaskI8x16","BitmaskI16x8","BitmaskI32x4","builtin_v128_qfma","simd_ternary","QFMAF32x4","QFMAF64x2","builtin_v128_qfms","QFMSF32x4","QFMSF64x2","typeToRuntimeFlags","alignLog2","evaluateConstantType","argumentsRange","naturalAlign","_0_must_be_a_power_of_two","feature","Feature_0_is_not_enabled","setCurrentTypeOnError","expectedMinimum","expectedMaximum","Expected_at_least_0_arguments_but_got_1","contextualUsize","thisOperand","builtins","function_builtins","firstOperand","classMembers","Type_0_has_no_property_1","resultType","ensureStaticString","maybeDropCondition","temp","SubF32","SubF64","makeIsTrueish","compileFunction","compileCallDirect","valuesOperand","Array_literal_expected","numElements","exprs","makeZero","buf","writeStaticBuffer","byteLength","addAlignedMemorySegment","isChangeableTo","Type_0_cannot_be_changed_to_type_1","evaled","Default","makeAbort","if","ref_is_null","alreadyUnchecked","unset","indexArg","operandExprs","nativeParamTypes","ctor","ensureConstructor","checkFieldInitialization","compileInstantiate","thisArg","compileCallIndirect","AndV128","OrV128","XorV128","AndNotV128","builtin_v128_bitwise_unary","NotV128","builtin_v128_bitwise_ternary","Bitselect","runtimeFeatures","visitInstance","global_get","addFunction","nativeSizeSize","blocks","relooper","outer","addBlockWithSwitch","SubI64","lastId","visitImpl","instanceId","isDeclaredInLibrary","visitFunc","visitSig","visitThisType","isStrictlyAssignableTo","fieldOffset","return","addBlock","flatten","addBranchForSwitch","addBranch","renderAndDispose","abvPrototype","getArrayValueType","addGlobal","instanceofInstance","toText","wrapModule","emitStackIR","toAsmjs","emitAsmjs","ExportNames","mangleImportName_moduleName","mangleImportName_elementName","exportMemory","importMemory","initialMemory","maximumMemory","sharedMemory","importTable","exportTable","explicitStart","noUnsafe","pedantic","Constraints","RuntimeFeatures","memory","table","Compiler","currentParent","memorySegments","stringSegments","functionTable","builtinArgumentsLength","skippedAutoreleases","inlineStack","lazyFunctions","pendingClassInstanceOf","virtualCalls","pendingElements","doneModuleExports","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","i32PowInstance","i64PowInstance","setLowMemoryUnused","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","MultiValue","GC","Memory64","setFeatures","startFunctionInstance","currentBody","compile","initialize","startFunctionBody","files","compileFile","compileExports","startIsEmpty","global_set","funcRef","nativeParams","nativeResults","finalize","addFunctionExport","setStart","cyclicClasses","findCyclicClasses","Type_0_is_cyclic_Module_will_include_deferred_garbage_collection","functionsToCompile","clear","compileClassInstanceOf","ensureVirtualStub","finalizeVirtualStub","ensureVarargsStub","removeGlobal","compileRTTI","compileVisitGlobals","compileVisitMembers","i64_align","lowMemoryLimit32","i64_gt","Low_memory_limit_exceeded_by_static_data_0_1","i64_to_string","initialPages","i64_shr_u","Module_requires_at_least_0_pages_of_initial_memory","maximumPages","Module_requires_at_least_0_pages_of_maximum_memory","isSharedMemory","Shared_memory_requires_maximum_memory_to_be_defined","Shared_memory_requires_feature_threads_to_be_enabled","setMemory","addMemoryImport","functionTableNames","setFunctionTable","addTableImport","willOptimize","Importing_the_table_disables_some_indirect_call_optimizations","addTableExport","Exporting_the_table_disables_some_indirect_call_optimizations","ensureModuleExports","elementName","ensureModuleExport","prefix","functionInstances","fullName","warning","Exported_generic_function_or_class_has_no_concrete_instances","classInstances","addGlobalExport","Cannot_export_a_mutable_global","enumValue","ensureArgumentsLength","internalGetterName","internalSetterName","isUnmanaged","subPrefix","implicitExport","compileMembers","compileGlobal","compileEnum","compileClass","compileProperty","compileElement","normalizedPathWithoutExtension","pathWithIndex","startSignature","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","ERRORED","initExpr","checkTypeSupported","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","addGlobalImport","initializeInStart","fromName","isGlobalMutable","getGlobal","Mutable_value_cannot_be_inlined","compileInlineConstant","findDecorator","decoratorNodes","makeRetain","previousParent","previousValue","previousValueIsMut","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","makeGlobalAssignment","forceStdAlternative","previousType","bodyNode","declarationNode","checkSignatureSupported","An_implementation_cannot_be_declared_in_ambient_contexts","compileFunctionBody","performAutoreleases","addFunctionImport","getFunction","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileStatements","compileReturnedExpression","indexBefore","nonNull","isNonnull","allocStmts","makeAllocation","makeFieldInitializationInConstructor","firstStmt","Explicitly_returning_constructor_drops_this_allocation","A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","compileField","compileFieldGetter","compileFieldSetter","nativeThisType","nativeValueType","valueExpr","makeRelease","compilePropertyGetter","compilePropertySetter","alignment","MemorySegment","usizeSize","stringValue","stringSegment","rtHeaderSize","createBuffer","addRuntimeMemorySegment","bufferSegment","arrayInstance","bufferLength","arrayLength","bufferAddress","rtInstance","memberStatements","getElementByDeclaration","exportStatement","compileFileByPath","importStatement","stmt","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileForOfStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","labelNode","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","doCompileDoStatement","flowAfter","pushBreakLabel","unifyLocalFlags","flowBefore","bodyFlow","bodyStmts","condFlow","condExpr","condKind","evaluateCondition","tcond","hasIncompatibleLocalStates","popBreakLabel","hasScopedLocals","loop","doCompileForStatement","loopLabel","loopStmts","inheritBranch","ifStmts","incrFlow","thenStmts","thenFlow","elseStmts","elseFlow","inheritMutual","valueExpression","constraints","context","tempLocal","tempLocalIndex","breaks","breakIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","terminates","newArgs","dropped","numDeclarations","initializers","initAutoreleaseSkipped","dummy","addScopedDummyLocal","freeScopedDummyLocal","isConst","_const_declarations_must_be_initialized","getScopedLocal","addScopedLocal","doCompileWhileStatement","computeSmallIntegerShift","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","ensureSmallIntegerWrap","tryUndoAutorelease","explicit","makeRuntimeNonNullCheck","makeRuntimeUpcastCheck","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","isLongIntegerValue","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","isVaryingIntegerValue","Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit","inheritedConstraints","exceptVoid","info","Expression_is_never_null","leftExpr","rightExpr","compound","compileBinaryOverload","makeLt","makeGt","makeLe","makeGe","makeEq","makeNe","compileAssignment","makePow","makeRem","makeShl","makeShr","makeShru","makeAnd","makeOr","makeXor","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","delayAutorelease","rightStmts","retainLeftInThen","makeAssignment","AddF32","AddF64","MulI64","MulF32","MulF64","makeCallDirect","namespace","namespaceMembers","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","ShlI64","ShrU64","AndI64","OrI64","thisExpression","Variable_0_used_before_its_declaration","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","indexedSet","Index_signature_in_type_0_only_permits_reading","Indexed_access_may_involve_bounds_checking","indexExpression","tee","makeLocalAssignment","isConstructor","fieldParent","makeFieldAssignment","makeAutorelease","thisExpr","nativeReturnType","tempThis","elementExpr","tempTarget","tempElement","alreadyRetained","makeReplace","nativeFieldType","findUsedLocals","tempValue","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","baseCtorInstance","superCall","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","compileCallExpressionBuiltin","callee","BuiltinContext","fn","methodName","hasThis","The_this_types_of_each_signature_are_incompatible","minimum","relatedReportNode","Operation_is_unsafe","argumentExpressions","checkCallSignature","isAccessOnThis","isAccessOnSuper","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","createInline","usedLocals","paramExpr","paramType","argumentLocal","addScopedAlias","initType","checkFieldInitializationInFlow","originalSignature","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","newStub","ofN","switch","Optional_parameter_must_have_an_initializer","theCall","tempIndex","builder","SwitchBuilder","unboundOverloadPrototype","unboundOverloadParent","isProperty","propertyParent","overloadInstance","boundProperty","boundPropertyInstance","overloadType","originalType","overloadSignature","overloadParameterTypes","overloadNumParameters","paramExprs","needsVarargsStub","calledName","addCase","removeFunction","render","releaseInstance","newExpr","newType","oldExpr","oldType","getAutoreleaseLocal","lengthBefore","maybeFinishAutorelease","skipAutorelease","Function_0_is_virtual_and_will_not_be_inlined","theOperands","allOptionalsAreConstant","compilesToConst","lastOperand","WritesGlobal","lastOperandType","makeCallIndirect","numExpressions","contextualSignature","numPresentParameters","thisTypeNode","ensureRuntimeFunction","Expression_resolves_to_unusual_type_0","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","maybeCompileEnclosingSource","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","ref_func","namedType","hasTypeArguments","makeInstanceofClass","makeInstanceofType","actualType","Expression_compiles_to_a_dynamic_check_at_runtime","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","contextualClass","compileStaticArrayLiteral","arrayType","tempDataStart","nativeElementType","addStaticBuffer","arraySegment","addStaticArrayHeader","arrayAddress","newArrayInstance","nativeArrayType","dataStartMember","bufferSize","newBufferInstance","classType","Cannot_create_an_instance_of_an_abstract_class","Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal","hasErrors","nativeClassType","omittedFields","memberKey","Property_0_is_private_and_only_accessible_within_class_1","Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses","Property_0_is_missing_in_type_1_but_required_in_type_2","baseClass","baseCtor","allocExpr","relatedNode","isThisFieldFlag","DEFINITELY_ASSIGNED","Property_0_is_always_assigned_before_being_used","Unnecessary_definite_assignment","Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned","parentEnum","Property_0_is_used_before_being_assigned","Object_is_possibly_null","ifThenFlow","ifThenExpr","ifThenType","ifThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","compileUnaryOverload","makeOne","setValue","NegF32","NegF64","makeNegOne","compileTypeof","typeString","ExtendI8ToI32","ExtendI16ToI32","addDebugInfoFile","supported","v128_zero","ref_null","allocInstance","newInstance","thisLocalIndex","codeLocation","abortInstance","messageArg","makeStaticAbort","messageExpr","filenameExpr","Dependee","backlog","seenlog","donelog","currentSource","dependees","tryParseSignatureIsSignature","parseParametersThis","isEntry","dependee","USER","tn","parseTopLevelStatement","skipStatement","startPos","parseDecorator","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","peek","parseEnum","parseVariable","parseFunction","mark","abstractStart","abstractEnd","reset","parseStatement","_abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration","discard","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","skipIdentifier","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","createExportDefaultStatement","dependent","readIdentifier","Identifier_expected","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","parseType","parseTypeName","parameter","notNullStart","notNull","bracketStart","bracketRange","nullable","isSignature","firstParamNameNoType","firstParamKind","paramStart","A_rest_parameter_cannot_be_optional","OPTIONAL","param","createPropertyAccessExpression","createDecorator","parseArguments","isFor","parseVariableDeclaration","createVariableStatement","parentFlags","parentDecorators","isIllegalVariableIdentifier","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","createEnumDeclaration","createEnumValueDeclaration","createReturnStatement","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","createTypeParameter","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","parseTypeParameters","parseParameters","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","createEmptyIdentifierExpression","parseFunctionExpressionCommon","explicitThis","bodyExpression","createExpressionStatement","createFunctionExpression","isInterface","Interface_declaration_cannot_have_implements_clause","createInterfaceDeclaration","createClassDeclaration","parseClassMember","createClassExpression","accessStart","accessEnd","staticStart","staticEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","getStart","getEnd","setEnd","isGetterOrSetter","createConstructorExpression","retIndex","parseIndexSignature","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","createFieldDeclaration","_0_keyword_cannot_be_used_here","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","createIndexSignature","parseExportMember","createStringLiteralExpression","createExportStatement","asIdentifier","createExportMember","skipFrom","parseImportDeclaration","createImportDeclaration","createWildcardImportStatement","createImportStatement","createExportImportStatement","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseReturn","createEmptyStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","createBlockStatement","createBreakStatement","createContinueStatement","createDoStatement","parseForOfStatement","The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer","createForStatement","createForOfStatement","elseStatement","createIfStatement","switchCases","switchCase","parseSwitchCase","createSwitchStatement","createSwitchCase","_case_or_default_expected","createThrowStatement","createTryStatement","createVoidStatement","createWhileStatement","createUnaryPrefixExpression","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","arguments_","tryParseTypeArgumentsBeforeArguments","createNewExpression","createNullExpression","createTrueExpression","createFalseExpression","createThisExpression","again","parseFunctionExpression","inner","createParenthesizedExpression","maybeParseCallExpression","createOmittedExpression","createArrayLiteralExpression","createObjectLiteralExpression","createAssertionExpression","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","createSuperExpression","createIntegerLiteralExpression","readInteger","createFloatLiteralExpression","readFloat","regexpPattern","readRegexpPattern","createRegexpLiteralExpression","readRegexpFlags","parseClassExpression","Expression_expected","Type_argument_list_cannot_be_empty","precedence","parseExpressionStart","nextPrecedence","determinePrecedence","createInstanceOfExpression","createElementAccessExpression","createUnaryPostfixExpression","createTernaryExpression","commaExprs","createCommaExpression","joinPropertyCall","createBinaryExpression","potentiallyGeneric","createCallExpression","skipBlock","depth","Precedence","ExportsWalker","includePrivate","visitFile","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitFunction","hasCompiledMember","visitNamespace","visitAlias","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","walk","TSDBuilder","remainingMembers","globalScope","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","fround","Infinity","NaN","clz32","round","x","y","sign","isTrueish","apply","parts","fromCodePoint","search","replacment","res","split","arraySort","sort","comparator","Number","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","exp2","arguments","console","byteOffset","unmanaged","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","i64_neg_one","fromInt","isLong","lo","hi","fromBits","low","high","i64_pow","rightLo","rightHi","eq","shru","i64_div","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","i64_not","not","i64_eq","i64_ne","ne","gt","minSafeF32","fromNumber","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","map","keys","formatDiagnosticMessage","Options","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","FEATURE_MULTI_VALUE","FEATURE_GC","FEATURE_MEMORY64","getSource","parseFile","nextFile","getDependee","finish","util","readI32","readI64","valueI64","overrides","cloned","v","ipos","dirname","origin","CharCode","c0","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","ASTBuilder","visitNode","visitSource","visitNamedTypeNode","visitFunctionTypeNode","visitTypeParameter","visitIdentifierExpression","visitAssertionExpression","visitBinaryExpression","visitCallExpression","visitClassExpression","visitCommaExpression","visitElementAccessExpression","visitFunctionExpression","visitInstanceOfExpression","visitLiteralExpression","visitNewExpression","visitParenthesizedExpression","visitPropertyAccessExpression","visitTernaryExpression","visitUnaryPostfixExpression","visitUnaryPrefixExpression","visitBlockStatement","visitBreakStatement","visitContinueStatement","visitDoStatement","visitEmptyStatement","visitExportStatement","visitExportDefaultStatement","visitExportImportStatement","visitExpressionStatement","visitForStatement","visitForOfStatement","visitIfStatement","visitImportStatement","visitReturnStatement","visitSwitchStatement","visitThrowStatement","visitTryStatement","visitVariableStatement","visitWhileStatement","visitClassDeclaration","visitEnumDeclaration","visitEnumValueDeclaration","visitFieldDeclaration","visitFunctionDeclaration","visitImportDeclaration","visitInterfaceDeclaration","visitMethodDeclaration","visitNamespaceDeclaration","visitTypeDeclaration","visitVariableDeclaration","serializeDecorator","visitExportMember","serializeParameter","visitSwitchCase","visitIndexSignature","visitNodeAndTerminate","visitTypeName","visitTypeNode","visitStringLiteral","visitArguments","visitFunctionCommon","visitFloatLiteralExpression","visitIntegerLiteralExpression","visitStringLiteralExpression","visitRegexpLiteralExpression","visitArrayLiteralExpression","visitObjectLiteralExpression","singleQuoted","lastCharPos","isDefault","serializeExternalModifiers","numMembers","serializeAccessModifiers"],"mappings":";;;;;;CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,EAAQG,QAAQ,aACR,mBAAXC,QAAyBA,OAAOC,IAC9CD,OAAO,CAAC,YAAaJ,GACK,iBAAZC,QACdA,QAAwB,eAAID,EAAQG,QAAQ,aAE5CJ,EAAqB,eAAIC,EAAQD,EAAe,UARlD,CASmB,oBAATO,KAAuBA,KAAOC,MAAM,SAASC,GACvD,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUV,QAGnC,IAAIC,EAASO,EAAiBE,GAAY,CACzCC,EAAGD,EACHE,GAAG,EACHZ,QAAS,IAUV,OANAa,EAAQH,GAAUI,KAAKb,EAAOD,QAASC,EAAQA,EAAOD,QAASS,GAG/DR,EAAOW,GAAI,EAGJX,EAAOD,QA0Df,OArDAS,EAAoBM,EAAIF,EAGxBJ,EAAoBO,EAAIR,EAGxBC,EAAoBQ,EAAI,SAASjB,EAASkB,EAAMC,GAC3CV,EAAoBW,EAAEpB,EAASkB,IAClCG,OAAOC,eAAetB,EAASkB,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEV,EAAoBgB,EAAI,SAASzB,GACX,oBAAX0B,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAetB,EAAS0B,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAetB,EAAS,aAAc,CAAE4B,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBQ,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAASnC,GAChC,IAAIkB,EAASlB,GAAUA,EAAO8B,WAC7B,WAAwB,OAAO9B,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAQ,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG7B,EAAoBgC,EAAI,GAIjBhC,EAAoBA,EAAoBiC,EAAI,I,yZC7ErD,WACA,WACA,WACA,WACA,WACA,Y,4WCJA,SAAYC,GAEV,mBAKA,uBAEA,uBAEA,yBAEA,qBAEA,kBAEA,wBAEA,4BAEA,6BAEA,yBAEA,2BAEA,gCAEA,oBAEA,oBAEA,oDAKA,6BAEA,6BAEA,6CAEA,gCAEA,sCAEA,0CAEA,2CAKA,iCAEA,iCAEA,+BAEA,gCAEA,8BAEA,0BAEA,iCAEA,iCAKA,+BA1EF,CAAY,EAAAA,cAAA,EAAAA,YAAW,KA8EV,EAAAC,eAAiB,IAEjB,EAAAC,aAAe,KAEf,EAAAC,cAAgB,OAEhB,EAAAC,cAAgB,OAEhB,EAAAC,mBAAqB,IAErB,EAAAC,iBAAmB,IAEnB,EAAAC,gBAAkB,IAElB,EAAAC,cAAgB,OAEhB,EAAAC,eAAiB,EAAAD,cAAgB,EAAAP,eAEjC,EAAAS,aAAe,EAAAT,eAAiB,QAEhC,EAAAU,eAAiB,IAG9B,SAAiBC,GAEF,EAAAC,MAAQ,GAER,EAAAC,GAAK,KACL,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,MAAQ,QACR,EAAAC,GAAK,KACL,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,MAAQ,QACR,EAAAC,KAAO,OACP,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,KAAO,OACP,EAAAC,QAAU,UACV,EAAAC,UAAY,YACZ,EAAAC,OAAS,SACT,EAAAC,OAAS,SACT,EAAAC,MAAQ,QACR,EAAAC,MAAQ,QACR,EAAAC,MAAQ,QACR,EAAAC,MAAQ,QACR,EAAAC,MAAQ,QACR,EAAAC,MAAQ,QACR,EAAAC,MAAQ,QACR,EAAAC,MAAQ,QACR,EAAAC,MAAQ,QACR,EAAAC,MAAQ,QACR,EAAAC,MAAQ,OACR,EAAAC,OAAS,SACT,EAAAC,QAAU,UACV,EAAAC,OAAS,SACT,EAAAC,OAAS,SACT,EAAAC,QAAU,UACV,EAAAC,QAAU,UACV,EAAAC,SAAW,WAEX,EAAAC,MAAQ,OACR,EAAAC,MAAQ,OACR,EAAAC,OAAS,QAET,EAAAC,MAAQ,OACR,EAAAC,OAAS,QACT,EAAAC,YAAc,cAEd,EAAAC,WAAa,aACb,EAAAC,mBAAqB,qBACrB,EAAAC,cAAgB,gBAChB,EAAAC,gBAAkB,kBAClB,EAAAC,eAAiB,iBACjB,EAAAC,mBAAqB,qBACrB,EAAAC,iBAAmB,mBACnB,EAAAC,qBAAuB,uBACvB,EAAAC,SAAW,WACX,EAAAC,2BAA6B,6BAC7B,EAAAC,4BAA8B,8BAC9B,EAAAC,4BAA8B,8BAC9B,EAAAC,wBAA0B,0BAC1B,EAAAC,iBAAmB,mBACnB,EAAAC,oBAAsB,sBACtB,EAAAC,+BAAiC,iCACjC,EAAAC,uBAAyB,yBACzB,EAAAC,4BAA8B,8BAC9B,EAAAC,wBAA0B,0BAC1B,EAAAC,eAAiB,iBACjB,EAAAC,qBAAuB,uBAEvB,EAAAC,GAAK,KACL,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,MAAQ,QACR,EAAAC,GAAK,KACL,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,MAAQ,QACR,EAAAC,KAAO,OACP,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,KAAO,OACP,EAAAC,QAAU,UACV,EAAAC,UAAY,YACZ,EAAAC,OAAS,SACT,EAAAC,OAAS,SACT,EAAAC,OAAS,SACT,EAAAC,MAAQ,QACR,EAAAC,YAAc,cACd,EAAAC,IAAM,MACN,EAAAC,IAAM,MACN,EAAAC,SAAW,WACX,EAAAC,gBAAkB,kBAClB,EAAAC,YAAc,cACd,EAAAC,KAAO,OACP,EAAAC,MAAQ,QACR,EAAAC,WAAa,aACb,EAAAC,YAAc,cACd,EAAAC,UAAY,YACZ,EAAAC,WAAa,aACb,EAAAC,WAAa,aACb,EAAAC,WAAa,aACb,EAAAC,WAAa,aACb,EAAAC,kBAAoB,oBACpB,EAAAC,YAAc,cACd,EAAAC,YAAc,cACd,EAAAC,YAAc,cACd,EAAAC,aAAe,eACf,EAAAC,aAAe,eACf,EAAAC,MAAQ,QAER,EAAAC,MAAQ,QACR,EAAAC,MAAQ,QACR,EAAAC,KAAO,OACP,EAAAC,IAAM,MACN,EAAAC,OAAS,SACT,EAAAC,OAAS,SACT,EAAAC,IAAM,MACN,EAAAC,MAAQ,UACR,EAAAC,QAAU,YACV,EAAAC,KAAO,SACP,EAAAC,KAAO,QACP,EAAAC,MAAQ,UACR,EAAAC,OAAS,WACT,EAAAC,QAAU,YACV,EAAAC,QAAU,YACV,EAAAC,SAAW,aACX,EAAAC,YAAc,eACd,EAAAC,MAAQ,UACR,EAAAC,UAAY,cACZ,EAAAC,SAAW,aACX,EAAAC,MAAQ,uBACR,EAAAC,OAAS,wBAvIxB,CAAiB,EAAAhI,cAAA,EAAAA,YAAW,KA2I5B,YAAS,yEAAAiI,WAAS,iFAAAC,mBAClB,YAAS,wEAAAC,UACT,YAAS,0EAAAC,YAAU,+EAAAC,kB,+WC3OnB,cAKA,OAIA,IAMYC,EANZ,QAkBA,SAAgBC,EAA2BC,GACzC,OAAQA,GACN,KAAKF,EAAmBG,SAAU,MAAO,WACzC,KAAKH,EAAmBI,KAAM,MAAO,OACrC,KAAKJ,EAAmBK,QAAS,MAAO,UACxC,KAAKL,EAAmBM,MAAO,MAAO,QACtC,QAEE,OADAC,QAAO,GACA,IAiBb,SAAgBC,EAA0BN,GACxC,OAAQA,GACN,KAAKF,EAAmBG,SAAU,OAAO,EAAAM,cACzC,KAAKT,EAAmBI,KAAM,OAAO,EAAAM,WACrC,KAAKV,EAAmBK,QAAS,OAAO,EAAAM,aACxC,KAAKX,EAAmBM,MAAO,OAAO,EAAAM,UACtC,QAEE,OADAL,QAAO,GACA,IAlDX,gFAAAM,kBACA,wFAAAC,0BAIF,SAAYd,GAEV,2BAEA,mBAEA,yBAEA,qBARF,CAAYA,EAAA,EAAAA,qBAAA,EAAAA,mBAAkB,KAY9B,+BAca,EAAAU,WAAqB,QAErB,EAAAC,aAAuB,QAEvB,EAAAC,UAAoB,QAEpB,EAAAH,cAAwB,QAExB,EAAAM,YAAsB,OAGnC,8BAcA,MAAaC,EAcX,YAAoBC,EAAWf,EAA8BgB,GAL7D,KAAAC,MAAsB,KAEtB,KAAAC,aAA6B,KAI3B3M,KAAKwM,KAAOA,EACZxM,KAAKyL,SAAWA,EAChBzL,KAAKyM,QAAUA,EAIjB,cACED,EACAf,EACAmB,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAEtB,IAAIL,EAAU,EAAAJ,uBAAuBG,GAIrC,OAHa,OAATI,IAAeH,EAAUA,EAAQM,QAAQ,MAAOH,IACvC,OAATC,IAAeJ,EAAUA,EAAQM,QAAQ,MAAOF,IACvC,OAATC,IAAeL,EAAUA,EAAQM,QAAQ,MAAOD,IAC7C,IAAIP,EAAkBC,EAAMf,EAAUgB,GAI/C,OAAOO,GACL,GAAIhN,KAAKwM,MAAQQ,EAAMR,KAAM,OAAO,EACpC,IAAIS,EAAYjN,KAAK0M,MACjBQ,EAAaF,EAAMN,MACvB,GAAIO,GACF,IAAKC,IAAeD,EAAUE,OAAOD,GAAa,OAAO,OACpD,GAAIA,EACT,OAAO,EAET,IAAIE,EAAmBpN,KAAK2M,aACxBU,EAAoBL,EAAML,aAC9B,GAAIS,GACF,IAAKC,IAAsBD,EAAiBD,OAAOE,GAAoB,OAAO,OACzE,GAAIH,EACT,OAAO,EAET,OAAOlN,KAAKyM,SAAWO,EAAMP,QAI/B,UAAUC,GAER,OADA1M,KAAK0M,MAAQA,EACN1M,KAIT,iBAAiB0M,GAEf,OADA1M,KAAK2M,aAAeD,EACb1M,KAIT,WACE,IAAI0M,EAAQ1M,KAAK0M,MACjB,GAAIA,EAAO,CACT,IAAIY,EAASZ,EAAMY,OACnB,OACE9B,EAA2BxL,KAAKyL,UAChC,IACAzL,KAAKwM,KAAKe,WACV,MACAvN,KAAKyM,QACL,QACAa,EAAOE,eACP,IACAF,EAAOG,OAAOf,EAAMgB,OAAOH,WAC3B,IACAD,EAAOK,WAAWJ,WAClB,KACCb,EAAMkB,IAAMlB,EAAMgB,OAAOH,WAC1B,IAGJ,OACE/B,EAA2BxL,KAAKyL,UAChC,IACAzL,KAAKwM,KAAKe,WACV,KACAvN,KAAKyM,SA8DX,SAAgBoB,EAAwBnB,EAAcoB,GAAkB,GAKtE,IAJA,IAAIC,EAAOrB,EAAMY,OAAOS,KACpBC,EAAMD,EAAKE,OACXP,EAAQhB,EAAMgB,MACdE,EAAMlB,EAAMkB,IACTF,EAAQ,IAAM,EAAAQ,YAAYH,EAAKI,WAAWT,EAAQ,KAAKA,IAC9D,KAAOE,EAAMI,IAAQ,EAAAE,YAAYH,EAAKI,WAAWP,KAAOA,IAMxD,IALA,IAAIQ,EAAe,CACjB,MACAL,EAAKM,UAAUX,EAAOE,GACtB,OAEKF,EAAQhB,EAAMgB,OACnBU,EAAGE,KAAK,KACRZ,IAGF,GADII,GAAWM,EAAGE,KAAK,EAAAnC,WACnBO,EAAMgB,OAAShB,EAAMkB,IACvBQ,EAAGE,KAAK,UAER,KAAOZ,IAAUhB,EAAMkB,KAAK,CAC1B,GAAI,EAAAM,YAAYH,EAAKI,WAAWT,IAAS,CACvCU,EAAGE,KAAKZ,GAAShB,EAAMgB,MAAQ,EAAI,IAAM,KACzC,MAEFU,EAAGE,KAAK,KAIZ,OADIR,GAAWM,EAAGE,KAAK,EAAAhC,aAChB8B,EAAGG,KAAK,IAzLjB,sBAoGA,mCACE9B,EACAqB,GAAkB,EAClBU,GAAoB,GAIpB,IAAIJ,EAAe,GACfN,GAAWM,EAAGE,KAAKvC,EAA0BU,EAAQhB,WACzD2C,EAAGE,KAAK9C,EAA2BiB,EAAQhB,WACvCqC,GAAWM,EAAGE,KAAK,EAAAhC,aACvB8B,EAAGE,KAAK7B,EAAQD,KAAO,IAAO,MAAQ,OACtC4B,EAAGE,KAAK7B,EAAQD,KAAKe,YACrBa,EAAGE,KAAK,MACRF,EAAGE,KAAK7B,EAAQA,SAGhB,IAAIC,EAAQD,EAAQC,MACpB,GAAIA,EAAO,CACT,IAAIY,EAASZ,EAAMY,OAGfkB,IACFJ,EAAGE,KAAK,MACRF,EAAGE,KAAKT,EAAwBnB,EAAOoB,KAEzCM,EAAGE,KAAK,MACRF,EAAGE,KAAK,QACRF,EAAGE,KAAKhB,EAAOE,gBACfY,EAAGE,KAAK,KACRF,EAAGE,KAAKhB,EAAOG,OAAOf,EAAMgB,OAAOH,YACnCa,EAAGE,KAAK,KACRF,EAAGE,KAAKhB,EAAOK,WAAWJ,YAC1Ba,EAAGE,KAAK,KAER,IAAI3B,EAAeF,EAAQE,aAC3B,GAAIA,EAAc,CAChB,IAAI8B,EAAgB9B,EAAaW,OAC7BkB,IACFJ,EAAGE,KAAK,MACRF,EAAGE,KAAKT,EAAwBlB,EAAcmB,KAEhDM,EAAGE,KAAK,MACRF,EAAGE,KAAK,QACRF,EAAGE,KAAKG,EAAcjB,gBACtBY,EAAGE,KAAK,KACRF,EAAGE,KAAKG,EAAchB,OAAOd,EAAae,OAAOH,YACjDa,EAAGE,KAAK,KACRF,EAAGE,KAAKG,EAAcd,WAAWJ,YACjCa,EAAGE,KAAK,MAGZ,OAAOF,EAAGG,KAAK,KAIjB,4BAiCA,0BAQE,YAAsBG,EAA0C,MAHxD,KAAAC,KAAiD,IAAInG,IAItDkG,IAAaA,EAAc,IAChC1O,KAAK0O,YAAcA,EAIrB,eACElC,EACAf,EACAiB,EACAC,EACAC,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAEtB,IAAIL,EAAUF,EAAkB5K,OAAO6K,EAAMf,EAAUmB,EAAMC,EAAMC,GAOnE,GANIJ,IAAOD,EAAUA,EAAQmC,UAAUlC,IACnCC,IAAcF,EAAQE,aAAeA,GAKrCD,EAAO,CACT,IAAIiC,EAAO3O,KAAK2O,KAChB,GAAIA,EAAKE,IAAInC,EAAMY,QAAS,CAC1B,IAAIwB,EAAehD,OAAO6C,EAAKzN,IAAIwL,EAAMY,SACzC,GAAIwB,EAAaD,IAAInC,EAAMgB,OAAQ,CACjC,IAAIqB,EAAoBjD,OAAOgD,EAAa5N,IAAIwL,EAAMgB,QACtD,IAAK,IAAIrN,EAAI,EAAG2O,EAAID,EAAkBd,OAAQ5N,EAAI2O,IAAK3O,EACrD,GAAI0O,EAAkB1O,GAAG8M,OAAOV,GAAU,OAE5CsC,EAAkBT,KAAK7B,QAEvBqC,EAAaG,IAAIvC,EAAMgB,MAAO,CAAEjB,QAE7B,CACL,IAAIqC,EAAe,IAAItG,IACvBsG,EAAaG,IAAIvC,EAAMgB,MAAO,CAAEjB,IAChCkC,EAAKM,IAAIvC,EAAMY,OAAQwB,IAG3B9O,KAAK0O,YAAYJ,KAAK7B,GAMxB,SACED,EACAE,EACAE,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAEtB9M,KAAKkP,eAAe1C,EAAMjB,EAAmBG,SAAUgB,EAAO,KAAME,EAAMC,EAAMC,GAIlF,gBACEN,EACAE,EACAC,EACAC,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAEtB9M,KAAKkP,eAAe1C,EAAMjB,EAAmBG,SAAUgB,EAAOC,EAAcC,EAAMC,EAAMC,GAI1F,KACEN,EACAE,EACAE,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAEtB9M,KAAKkP,eAAe1C,EAAMjB,EAAmBI,KAAMe,EAAO,KAAME,EAAMC,EAAMC,GAI9E,YACEN,EACAE,EACAC,EACAC,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAEtB9M,KAAKkP,eAAe1C,EAAMjB,EAAmBI,KAAMe,EAAOC,EAAcC,EAAMC,EAAMC,GAItF,QACEN,EACAE,EACAE,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAEtB9M,KAAKkP,eAAe1C,EAAMjB,EAAmBK,QAASc,EAAO,KAAME,EAAMC,EAAMC,GAIjF,eACEN,EACAE,EACAC,EACAC,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAEtB9M,KAAKkP,eAAe1C,EAAMjB,EAAmBK,QAASc,EAAOC,EAAcC,EAAMC,EAAMC,GAIzF,MACEN,EACAE,EACAE,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAEtB9M,KAAKkP,eAAe1C,EAAMjB,EAAmBM,MAAOa,EAAO,KAAME,EAAMC,EAAMC,GAI/E,aACEN,EACAE,EACAC,EACAC,EAAsB,KACtBC,EAAsB,KACtBC,EAAsB,MAEtB9M,KAAKkP,eAAe1C,EAAMjB,EAAmBM,MAAOa,EAAOC,EAAcC,EAAMC,EAAMC,M,4tDC3YzF,aAOA,OAKA,OAQA,IAAYqC,EAw4BAC,EAiJAC,EA2bAC,GAp9CZ,SAAYH,GAEV,uBAGA,6BACA,mCACA,2BACA,qCACA,6BAGA,+BACA,6BACA,uBACA,mBACA,sBACA,sBACA,sCACA,sBACA,4BACA,gCACA,0BACA,kBACA,oBACA,0BACA,sCACA,wCACA,0BACA,sBACA,oBACA,oBACA,kCACA,oCACA,kCAGA,sBACA,sBACA,4BACA,gBACA,sBACA,wBACA,sCACA,oCACA,gCACA,kBACA,sBACA,gBACA,wBACA,wBACA,wBACA,sBACA,kBACA,4BACA,oBACA,sBAGA,4CACA,0CACA,oDACA,4CACA,kDACA,8CACA,oDACA,8CACA,oDACA,0CACA,kDAGA,8BACA,oCACA,gCACA,wCACA,0BA5EF,CAAYA,EAAA,EAAAA,WAAA,EAAAA,SAAQ,KAgFpB,MAAsBI,EACpB,YAESC,EAEA9C,GAFA,KAAA8C,OAEA,KAAA9C,QAKT,4BACE9L,EACA8L,GAEA,OAAO,IAAI+C,EAASF,EAAKG,2BAA2B9O,EAAM8L,GAAQ,KAAMA,GAG1E,uBACE9L,EACA+O,EACAC,EACAlD,GAEA,OAAO,IAAImD,EAAcjP,EAAM+O,EAAeC,EAAYlD,GAG5D,0BACEoD,EACAC,EACAC,EACAJ,EACAlD,GAEA,OAAO,IAAIuD,EAAiBH,EAAYC,EAAYC,EAAkBJ,EAAYlD,GAGpF,yBACEA,GAEA,OAAO,IAAImD,EAAcN,EAAKW,qBAAqB,GAAIxD,GAAQ,MAAM,EAAOA,GAG9E,2BACE9L,EACAuP,EACAC,EACA1D,GAEA,OAAO,IAAI2D,EAAkBzP,EAAMuP,EAAaC,EAAa1D,GAG/D,uBACE4D,EACA1P,EACA2P,EACAC,EACA9D,GAEA,OAAO,IAAI+D,EAAcH,EAAe1P,EAAM2P,EAAMC,EAAa9D,GAKnE,uBACE9L,EACA8P,EACAhE,GAEA,OAAO,IAAIiE,EAAcvB,EAAcwB,SAAShQ,GAAOA,EAAM8P,EAAMhE,GAGrE,qBACEmE,EACA9C,EACArB,GAEA,OAAO,IAAIoE,EAAYD,EAAa9C,EAAMrB,GAK5C,kCACEqB,EACArB,EACAqE,GAAiB,GAEjB,OAAO,IAAIC,EAAqBjD,EAAMgD,EAAUrE,GAGlD,uCACEA,GAEA,OAAO,IAAIsE,EAAqB,IAAI,EAAOtE,GAG7C,oCACEuE,EACAvE,GAEA,OAAO,IAAIwE,EAAuBD,EAAoBvE,GAGxD,iCACEyE,EACAC,EACAC,EACA3E,GAEA,OAAO,IAAI4E,EAAoBH,EAAeC,EAAYC,EAAQ3E,GAGpE,8BACE6E,EACAC,EACAC,EACA/E,GAEA,OAAO,IAAIgF,EAAiBH,EAAUC,EAAMC,EAAO/E,GAGrD,4BACE0E,EACAzB,EACAe,EACAhE,GAEA,OAAO,IAAIiF,EAAeP,EAAYzB,EAAee,EAAMhE,GAG7D,6BACEkF,GAEA,OAAO,IAAIC,EAAgBD,GAG7B,6BACEE,EACApF,GAEA,OAAO,IAAIqF,EAAgBD,EAAapF,GAG1C,mCACEA,GAEA,OAAO,IAAIsF,EAAsBtF,GAGnC,qCACE0E,EACAa,EACAvF,GAEA,OAAO,IAAIwF,EAAwBd,EAAYa,EAAmBvF,GAGpE,6BACEA,GAEA,OAAO,IAAIyF,EAAgBzF,GAG7B,oCACEpL,EACAoL,GAEA,OAAO,IAAI0F,EAAuB9Q,EAAOoL,GAG3C,gCACEkF,GAEA,OAAO,IAAIS,EAAmBT,GAGhC,kCACER,EACAkB,EACA5F,GAEA,OAAO,IAAI6F,EAAqBnB,EAAYkB,EAAQ5F,GAGtD,sCACEpL,EACAoL,GAEA,OAAO,IAAI8F,EAAyBlR,EAAOoL,GAG7C,2BACE+F,EACA9C,EACAe,EACAhE,GAEA,OAAO,IAAIgG,EAAcD,EAAU9C,EAAee,EAAMhE,GAG1D,4BACEA,GAEA,OAAO,IAAIiG,EAAejG,GAG5B,qCACEkG,EACAC,EACAnG,GAEA,OAAO,IAAIoG,EAAwBF,EAAOC,EAAQnG,GAGpD,+BACEA,GAEA,OAAO,IAAIqG,EAAkBrG,GAG/B,qCACE0E,EACA1E,GAEA,OAAO,IAAIsG,EAAwB5B,EAAY1E,GAGjD,sCACE0E,EACApP,EACA0K,GAEA,OAAO,IAAIuG,EAAyB7B,EAAYpP,EAAU0K,GAG5D,qCACEwG,EACAC,EACAzG,GAEA,OAAO,IAAI0G,EAAwBF,EAASC,EAAczG,GAG5D,+BACE2G,EACAC,EACAC,EACA7G,GAEA,OAAO,IAAI8G,EAAkBH,EAAWC,EAAQC,EAAQ7G,GAG1D,qCACEpL,EACAoL,GAEA,OAAO,IAAI+G,EAAwBnS,EAAOoL,GAG5C,6BACEA,GAEA,OAAO,IAAIgH,EAAgBhH,GAG7B,4BACEA,GAEA,OAAO,IAAIiH,EAAejH,GAG5B,4BACEA,GAEA,OAAO,IAAIkH,EAAelH,GAG5B,oCACE6E,EACAsC,EACAnH,GAEA,OAAO,IAAIoH,EAAuBvC,EAAUsC,EAASnH,GAGvD,mCACE6E,EACAsC,EACAnH,GAEA,OAAO,IAAIqH,EAAsBxC,EAAUsC,EAASnH,GAKtD,4BACEsH,EACAtH,GAEA,OAAO,IAAIuH,GAAeD,EAAYtH,GAGxC,4BACEwH,EACAxH,GAEA,OAAO,IAAIyH,GAAeD,EAAOxH,GAGnC,8BACE9L,EACAwT,EACAC,EACAC,EACAnE,EACAoE,EACAC,EACA9H,GAEA,OAAO,IAAI+H,GAAiB7T,EAAMwT,EAAYC,EAAOC,EAAgBnE,EAAaoE,EAAiBC,EAAS9H,GAG9G,+BACEwH,EACAxH,GAEA,OAAO,IAAIgI,GAAkBR,EAAOxH,GAGtC,yBACEiI,EACAtB,EACA3G,GAEA,OAAO,IAAIkI,GAAYD,EAAWtB,EAAW3G,GAG/C,4BACEA,GAEA,OAAO,IAAImI,GAAenI,GAG5B,6BACE9L,EACAwT,EACAC,EACAxB,EACAnG,GAEA,OAAO,IAAIoI,GAAgBlU,EAAMwT,EAAYC,EAAOxB,EAAQnG,GAG9D,kCACE9L,EACAyT,EACA7D,EACA9D,GAEA,OAAO,IAAIqI,GAAqBnU,EAAMyT,EAAO7D,EAAa9D,GAG5D,6BACE8H,EACAQ,EACAC,EACAvI,GAEA,OAAO,IAAIwI,GAAgBV,EAASQ,EAAMC,EAAWvI,GAGvD,oCACEkF,EACAlF,GAEA,OAAO,IAAIyI,GAAuBvD,EAAalF,GAGjD,mCACE9L,EACAwU,EACA1I,GAEA,OAAO,IAAI2I,GAAsBzU,EAAMwU,EAAc1I,GAGvD,0BACE4I,EACAC,EACA7I,GAGA,OADK6I,IAAcA,EAAeD,GAC3B,IAAIE,GAAaF,EAAWC,EAAc7I,GAGnD,iCACE0E,GAEA,OAAO,IAAIqE,GAAoBrE,GAGjC,yBACEiC,EACAqC,EACAC,EACAjJ,GAEA,OAAO,IAAIkJ,GAAYvC,EAAWqC,EAAQC,EAASjJ,GAGrD,6BACEmJ,EACAb,EACAtI,GAEA,OAAO,IAAIoJ,GAAgBD,EAAc,KAAMb,EAAMtI,GAGvD,qCACEqJ,EACAf,EACAtI,GAEA,OAAO,IAAIoJ,GAAgB,KAAMC,EAAef,EAAMtI,GAGxD,+BACEsJ,EACApV,EACA8L,GAGA,OADK9L,IAAMA,EAAOoV,GACX,IAAIC,GAAkBrV,EAAMoV,EAAatJ,GAGlD,kCACE9L,EACAwT,EACAC,EACAC,EACAnE,EACAoE,EACAC,EACA9H,GAEA,OAAO,IAAIwJ,GAAqBtV,EAAMwT,EAAYC,EAAOC,EAAgBnE,EAAaoE,EAAiBC,EAAS9H,GAGlH,8BACE9L,EACAwT,EACAC,EACA9D,EACAC,EACA9D,GAEA,OAAO,IAAIyJ,GAAiBvV,EAAMwT,EAAYC,EAAO9D,EAAMC,GAAc,EAAG9D,GAG9E,0BACE8D,EACA6C,EACA+C,EACAzB,EACAjI,GAEA,OAAO,IAAI2J,GAAa7F,EAAa6C,EAAW+C,EAAazB,EAAWjI,GAG1E,4BACE4J,EACAC,EACA5B,EACAjI,GAEA,OAAO,IAAI8J,GAAeF,EAAUC,EAAU5B,EAAWjI,GAG3D,iCACE9L,EACAwT,EACAC,EACAC,EACAmC,EACAC,EACAC,EACAjK,GAEA,OAAO,IAAIkK,GAAoBhW,EAAMwT,EAAYC,EAAOC,EAAgBmC,EAAWC,EAAMC,EAAWjK,GAGtG,4BACEmK,EACAC,EACAzC,EACA3H,GAEA,OAAO,IAAIqK,EAAmBF,EAASC,EAAWzC,EAAO3H,GAG3D,+BACE9L,EACAwT,EACAC,EACAC,EACAmC,EACAC,EACAhK,GAEA,OAAO,IAAIsK,GAAkBpW,EAAMwT,EAAYC,EAAOC,EAAgBmC,EAAWC,EAAMhK,GAGzF,kCACE9L,EACAwT,EACAC,EACAG,EACA9H,GAEA,OAAO,IAAIuK,GAAqBrW,EAAMwT,EAAYC,EAAOG,EAAS9H,GAGpE,6BACEpL,EACAoL,GAEA,OAAO,IAAIwK,GAAgB5V,EAAOoL,GAGpC,6BACE2G,EACA8D,EACAzK,GAEA,OAAO,IAAI0K,GAAgB/D,EAAW8D,EAAOzK,GAG/C,wBACEwH,EACAF,EACAtH,GAEA,OAAO,IAAI2K,GAAWnD,EAAOF,EAAYtH,GAG3C,4BACEpL,EACAoL,GAEA,OAAO,IAAI4K,GAAehW,EAAOoL,GAGnC,0BACEsH,EACAuD,EACAC,EACAC,EACA/K,GAEA,OAAO,IAAIgL,GAAa1D,EAAYuD,EAAeC,EAAiBC,EAAmB/K,GAGzF,6BACE9L,EACAwT,EACAC,EACAC,EACA/D,EACA7D,GAEA,OAAO,IAAIiL,GAAgB/W,EAAMwT,EAAYC,EAAOC,EAAgB/D,EAAM7D,GAG5E,+BACE0H,EACAyB,EACAnJ,GAEA,OAAO,IAAIkL,GAAkBxD,EAAYyB,EAAcnJ,GAGzD,iCACE9L,EACAwT,EACAC,EACA9D,EACAC,EACA9D,GAEA,OAAO,IAAImL,GAAoBjX,EAAMwT,EAAYC,EAAO9D,EAAMC,EAAa9D,GAG7E,2BACE0E,EACA1E,GAEA,OAAO,IAAIoL,GAAc1G,EAAY1E,GAGvC,4BACE2G,EACAsB,EACAjI,GAEA,OAAO,IAAIqL,GAAe1E,EAAWsB,EAAWjI,GAIlD,cAAcsL,GACZ,OAAOhY,KAAKwP,MAAQL,EAAS8I,SACFC,WAAiBlY,MAAOgY,aAAeA,EAIpE,uBACE,GAAIhY,KAAKwP,MAAQL,EAAS8I,QACxB,OAA4BC,WAAiBlY,MAAOgY,aAClD,KAAK3I,EAAY8I,MACjB,KAAK9I,EAAY+I,QAAS,OAAO,EAGrC,OAAO,EAIT,sBACE,OAAQpY,KAAKwP,MACX,KAAKL,EAAS8I,QACZ,OAA4BC,WAAiBlY,MAAOgY,aAClD,KAAK3I,EAAY8I,MACjB,KAAK9I,EAAY+I,QACjB,KAAK/I,EAAYgJ,OAAQ,OAAO,EAElC,MAEF,KAAKlJ,EAASmJ,KACd,KAAKnJ,EAASoJ,KACd,KAAKpJ,EAASqJ,MAAO,OAAO,EAE9B,OAAO,EAGD,WAAWhJ,GACjB,IAAIiJ,EAAOP,WAAiBlY,MAI5B,GAHIyY,EAAKjJ,MAAQL,EAASuJ,OACxBD,EAAwBA,EAAMrH,YAE5BqH,EAAKjJ,MAAQL,EAASwJ,eAAgB,CAExC,GADwCF,EAAMrH,WACnC5B,MAAQA,EAAM,OAAO,EAElC,OAAO,EAIT,qBACE,OAAOxP,KAAK4Y,WAAWzJ,EAAS0J,MAIlC,sBACE,OAAO7Y,KAAK4Y,WAAWzJ,EAAS2J,QAppBpC,SA0pBA,MAAsBC,UAAiBxJ,EACrC,YAEEC,EAEOI,EAEPlD,GAEAsM,MAAMxJ,EAAM9C,GAJL,KAAAkD,aAQT,oBAAoBqJ,GAClB,GAAIjZ,KAAKwP,MAAQL,EAAS+J,UAAW,CACnC,IAAIC,EAA+BjB,WAAqBlY,MACxD,IAAKmZ,EAAcvY,KAAKwY,KAAM,CAC5B,IAAIC,EAAoBF,EAAcxJ,cACtC,GAA0B,OAAtB0J,GAA8BA,EAAkBpL,OAAS,GAC3D,IAAK,IAAI5N,EAAI,EAAG2O,EAAIqK,EAAkBpL,OAAQ5N,EAAI2O,IAAK3O,EACrD,GAAIgZ,EAAkBhZ,GAAGiZ,oBAAoBL,GAAqB,OAAO,MAEtE,CACL,IAAIrY,EAAOuY,EAAcvY,KAAK2Y,WAAWxL,KACzC,IAAK,IAAI1N,EAAI,EAAG2O,EAAIiK,EAAmBhL,OAAQ5N,EAAI2O,IAAK3O,EACtD,GAAI4Y,EAAmB5Y,GAAGO,KAAKmN,MAAQnN,EAAM,OAAO,SAIrD,GAAIZ,KAAKwP,MAAQL,EAASqK,aAAc,CAC7C,IAAIC,EAAqCvB,WAAqBlY,MAC1D0Z,EAAiBD,EAAiB3J,WACtC,IAAK,IAAIzP,EAAI,EAAG2O,EAAI0K,EAAezL,OAAQ5N,EAAI2O,IAAK3O,EAClD,GAAIqZ,EAAerZ,GAAGkQ,KAAK+I,oBAAoBL,GAAqB,OAAO,EAE7E,GAAIQ,EAAiB1J,WAAWuJ,oBAAoBL,GAAqB,OAAO,EAChF,IAAIjJ,EAAmByJ,EAAiBzJ,iBACxC,GAAyB,OAArBA,GAA6BA,EAAiBsJ,oBAAoBL,GAAqB,OAAO,OAElGnN,QAAO,GAET,OAAO,GAzCX,aA8CA,MAAa2D,UAAiBF,EAC5B,YAESgK,EAEAH,EAEP1M,GAEAsM,MAAM7J,EAASwK,SAAUjN,GANlB,KAAA6M,aAEA,KAAAH,QALX,aAcA,MAAavJ,UAAsBkJ,EACjC,YAESnY,EAEA+O,EAEPC,EAEAlD,GAEAsM,MAAM7J,EAAS+J,UAAWtJ,EAAYlD,GAR/B,KAAA9L,OAEA,KAAA+O,gBAUT,uBACE,IAAIA,EAAgB3P,KAAK2P,cACzB,OAAyB,OAAlBA,GAA0BA,EAAc1B,OAAS,GAjB5D,kBAsBA,MAAagC,UAAyB8I,EACpC,YAESjJ,EAEAC,EAEAC,EAEPJ,EAEAlD,GAEAsM,MAAM7J,EAASqK,aAAc5J,EAAYlD,GAVlC,KAAAoD,aAEA,KAAAC,aAEA,KAAAC,oBAPX,qBAkBA,MAAaK,UAA0Bd,EACrC,YAES3O,EAEAuP,EAEAC,EAEP1D,GAEAsM,MAAM7J,EAASyK,cAAelN,GARvB,KAAA9L,OAEA,KAAAuP,cAEA,KAAAC,eAPX,sBAgBA,SAAYyJ,GAEV,yBAEA,2BAEA,mBANF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KAUzB,MAAapJ,UAAsBlB,EACjC,YAESe,EAEA1P,EAEA2P,EAEAC,EAEP9D,GAEAsM,MAAM7J,EAAS2K,UAAWpN,GAVnB,KAAA4D,gBAEA,KAAA1P,OAEA,KAAA2P,OAEA,KAAAC,cAQT,KAAAuJ,yBAAoD,KAEpD,KAAA1F,MAAqB,EAAAhS,YAAY2X,KAGjC,GAAGC,GAA2B,OAAQja,KAAKqU,MAAQ4F,IAASA,EAE5D,MAAMA,GAA2B,OAA8B,IAAtBja,KAAKqU,MAAQ4F,GAEtD,IAAIA,GAA2Bja,KAAKqU,OAAS4F,GA1B/C,kBAgCA,SAAY7K,GACV,uBACA,uBACA,2BACA,yCACA,yCACA,2CACA,6BACA,qBACA,uBACA,2BACA,0BACA,oBACA,wBAbF,CAAYA,EAAA,EAAAA,gBAAA,EAAAA,cAAa,KAgBzB,SAAiBA,GAGC,EAAAwB,SAAhB,SAAyBsJ,GACvB,GAAIA,EAAS1K,MAAQL,EAASgL,WAAY,CACxC,IAAIC,EAAiCF,EAAUnM,KAE/C,OADAjC,OAAOsO,EAAQnM,QACPmM,EAAQjM,WAAW,IACzB,KAAK,GACH,GAAe,WAAXiM,EAAsB,OAAOhL,EAAciL,QAC/C,MAEF,KAAK,IACH,GAAe,YAAXD,EAAuB,OAAOhL,EAAckL,SAChD,MAEF,KAAK,IACH,GAAe,SAAXF,EAAoB,OAAOhL,EAAcmL,MAC7C,MAEF,KAAK,IACH,GAAe,UAAXH,EAAqB,OAAOhL,EAAcoL,OAC9C,MAEF,KAAK,IACH,GAAe,UAAXJ,EAAqB,OAAOhL,EAAcqL,OAC9C,MAEF,KAAK,IACH,GAAe,QAAXL,EAAmB,OAAOhL,EAAcsL,KAC5C,MAEF,KAAK,IACH,GAAe,YAAXN,EAAuB,OAAOhL,EAAcuL,SAChD,MAEF,KAAK,IACH,GAAe,aAAXP,EAAwB,OAAOhL,EAAcwL,UACjD,GAAe,UAAXR,EAAqB,OAAOhL,EAAcyL,aAI7C,GAAIX,EAAS1K,MAAQL,EAASwJ,eAAgB,CACnD,IAAImC,EAA+CZ,EAC/C9I,EAAa0J,EAAmB1J,WACpC,GAAIA,EAAW5B,MAAQL,EAASgL,WAAY,CAC1C,IAAIC,EAAiChJ,EAAYrD,KACjDjC,OAAOsO,EAAQnM,QACf,IAAI8M,EAAUD,EAAmB9Y,SAAS+L,KAE1C,GADAjC,OAAOiP,EAAQ9M,QACA,YAAXmM,EACF,OAAQW,EAAQ5M,WAAW,IACzB,KAAK,GACH,GAAe,UAAX4M,EAAqB,OAAO3L,EAAc4L,gBAC9C,MAEF,KAAK,IACH,GAAe,UAAXD,EAAqB,OAAO3L,EAAc6L,gBAC9C,GAAe,WAAXF,EAAsB,OAAO3L,EAAc8L,mBAOzD,OAAO9L,EAAc+L,QAjEzB,CAAiB/L,EAAA,EAAAA,gBAAA,EAAAA,cAAa,KAsE9B,MAAauB,UAAsBpB,EACjC,YAES6L,EAEAxa,EAEA8P,EAEPhE,GAEAsM,MAAM7J,EAASkM,UAAW3O,GARnB,KAAA0O,gBAEA,KAAAxa,OAEA,KAAA8P,QAPX,kBAgBA,SAAY4K,GAEV,mBAEA,uBAEA,qBANF,CAAY,EAAAA,cAAA,EAAAA,YAAW,KAUvB,MAAaxK,UAAoBvB,EAC/B,YAESsB,EAEA9C,EAEPrB,GAEAsM,MAAM7J,EAASoM,QAAS7O,GANjB,KAAAmE,cAEA,KAAA9C,QALX,gBAgBA,MAAsByN,UAAmBjM,GAAzC,eAGA,MAAayB,UAA6BwK,EACxC,YAESzN,EAEAgD,EAEPrE,GAEAsM,MAAM7J,EAASgL,WAAYzN,GANpB,KAAAqB,OAEA,KAAAgD,YALX,yBAcA,SAAY1B,GACV,qBACA,yBACA,uBACA,uBACA,qBACA,uBANF,CAAYA,EAAA,EAAAA,cAAA,EAAAA,YAAW,KAUvB,MAAsBoM,UAA0BD,EAC9C,YAESxD,EAEPtL,GAEAsM,MAAM7J,EAAS8I,QAASvL,GAJjB,KAAAsL,eAHX,sBAYA,MAAa9G,UAA+BuK,EAC1C,YAESxK,EAEPvE,GAEAsM,MAAM3J,EAAYqM,MAAOhP,GAJlB,KAAAuE,sBAHX,2BAYA,SAAY0K,GAEV,uBAEA,eAEA,yBAEA,qBARF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KAYzB,MAAarK,UAA4BkK,EACvC,YAESrK,EAEAC,EAEAC,EAEP3E,GAEAsM,MAAM7J,EAASyM,UAAWlP,GARnB,KAAAyE,gBAEA,KAAAC,aAEA,KAAAC,UAPX,wBAgBA,MAAaK,UAAyB8J,EACpC,YAESjK,EAEAC,EAEAC,EAEP/E,GAEAsM,MAAM7J,EAAS0M,OAAQnP,GARhB,KAAA6E,WAEA,KAAAC,OAEA,KAAAC,SAPX,qBAgBA,MAAaE,UAAuB6J,EAClC,YAESpK,EAEAzB,EAEAe,EAEPhE,GAEAsM,MAAM7J,EAASuJ,KAAMhM,GARd,KAAA0E,aAEA,KAAAzB,gBAEA,KAAAe,OAQT,yBACE,IACIoL,EADAnM,EAAgB3P,KAAK2P,cAEzB,OAAIA,IACEmM,EAAmBnM,EAAc1B,QAC5B,EAAA8N,MAAMxN,KAAKoB,EAAc,GAAGjD,MAAOiD,EAAcmM,EAAmB,GAAGpP,OAG3E1M,KAAKoR,WAAW1E,MAIzB,qBACE,IAAIgE,EAAO1Q,KAAK0Q,KACZsL,EAAetL,EAAKzC,OACxB,OAAI+N,EACK,EAAAD,MAAMxN,KAAKmC,EAAK,GAAGhE,MAAOgE,EAAKsL,EAAe,GAAGtP,OAEnD1M,KAAKoR,WAAW1E,OAjC3B,mBAsCA,MAAamF,UAAwB2J,EACnC,YAES5J,GAEPoH,MAAM7J,EAAS8M,MAAOrK,EAAYlF,OAF3B,KAAAkF,eAHX,oBAUA,MAAaG,UAAwByJ,EACnC,YAES1J,EAEPpF,GAEAsM,MAAM7J,EAAS+M,MAAOxP,GAJf,KAAAoF,eAHX,oBAYA,MAAaE,UAA8BhB,EACzC,YAEEtE,GAEAsM,MAAM,eAAe,EAAOtM,GAC5B1M,KAAKwP,KAAOL,EAASgN,aANzB,0BAWA,MAAajK,UAAgCsJ,EAC3C,YAESpK,EAEAa,EAEPvF,GAEAsM,MAAM7J,EAASiN,cAAe1P,GANvB,KAAA0E,aAEA,KAAAa,qBALX,4BAcA,MAAaG,UAA+BqJ,EAC1C,YAESna,EAEPoL,GAEAsM,MAAM3J,EAAY8I,MAAOzL,GAJlB,KAAApL,SAHX,2BAYA,MAAa+Q,UAA2BmJ,EACtC,YAES5J,GAEPoH,MAAM7J,EAASkN,SAAUzK,EAAYlF,OAF9B,KAAAkF,eAHX,uBAUA,MAAaW,UAA6BiJ,EACxC,YAESpK,EAEAkB,EAEP5F,GAEAsM,MAAM7J,EAASmN,WAAY5P,GANpB,KAAA0E,aAEA,KAAAkB,UALX,yBAcA,MAAaE,UAAiCiJ,EAC5C,YAESna,EAEPoL,GAEAsM,MAAM3J,EAAY+I,QAAS1L,GAJpB,KAAApL,SAHX,6BAYA,MAAaoR,UAAsB8I,EACjC,YAES/I,EAEA9C,EAEAe,EAEPhE,GAEAsM,MAAM7J,EAASoN,IAAK7P,GARb,KAAA+F,WAEA,KAAA9C,gBAEA,KAAAe,OAQT,yBACE,IACIoL,EADAnM,EAAgB3P,KAAK2P,cAEzB,OAAsB,OAAlBA,IAA2BmM,EAAmBnM,EAAc1B,QAAU,EACjE,EAAA8N,MAAMxN,KAAKoB,EAAc,GAAGjD,MAAOiD,EAAcmM,EAAmB,GAAGpP,OAEzE1M,KAAKyS,SAAS/F,MAIvB,qBACE,IAAIgE,EAAO1Q,KAAK0Q,KACZsL,EAAetL,EAAKzC,OACxB,OAAI+N,EACK,EAAAD,MAAMxN,KAAKmC,EAAK,GAAGhE,MAAOgE,EAAKsL,EAAe,GAAGtP,OAEnD1M,KAAKyS,SAAS/F,OA/BzB,kBAoCA,MAAaiG,UAAuB3B,EAClC,YAEEtE,GAEAsM,MAAM,QAAQ,EAAOtM,GACrB1M,KAAKwP,KAAOL,EAASmJ,MANzB,mBAWA,MAAaxF,UAAgC2I,EAC3C,YAES7I,EAEAC,EAEPnG,GAEAsM,MAAM3J,EAAYpE,OAAQyB,GANnB,KAAAkG,QAEA,KAAAC,UALX,4BAcA,MAAaE,UAA0ByI,EACrC,YAEE9O,GAEAsM,MAAM7J,EAASqN,QAAS9P,IAL5B,sBAUA,MAAasG,UAAgCwI,EAC3C,YAESpK,EAEP1E,GAEAsM,MAAM7J,EAASsN,cAAe/P,GAJvB,KAAA0E,cAHX,4BAYA,MAAa6B,UAAiCuI,EAC5C,YAESpK,EAEApP,EAEP0K,GAEAsM,MAAM7J,EAASwJ,eAAgBjM,GANxB,KAAA0E,aAEA,KAAApP,YALX,6BAcA,MAAaoR,UAAgCqI,EAC3C,YAESvI,EAEAC,EAEPzG,GAEAsM,MAAM3J,EAAYqN,OAAQhQ,GANnB,KAAAwG,UAEA,KAAAC,gBALX,4BAcA,MAAaK,UAA0BgI,EACrC,YAESnI,EAEAC,EAEAC,EAEP7G,GAEAsM,MAAM7J,EAASwN,QAASjQ,GARjB,KAAA2G,YAEA,KAAAC,SAEA,KAAAC,UAPX,sBAgBA,MAAaE,UAAgCgI,EAC3C,YAESna,EAEPoL,GAEAsM,MAAM3J,EAAYgJ,OAAQ3L,GAJnB,KAAApL,SAHX,4BAYA,MAAaoS,UAAwB1C,EACnC,YAEEtE,GAEAsM,MAAM,SAAS,EAAOtM,GACtB1M,KAAKwP,KAAOL,EAAS2J,OANzB,oBAWA,MAAanF,UAAuB3C,EAClC,YAEEtE,GAEAsM,MAAM,QAAQ,EAAOtM,GACrB1M,KAAKwP,KAAOL,EAAS0J,MANzB,mBAWA,MAAajF,UAAuB5C,EAClC,YAEEtE,GAEAsM,MAAM,QAAQ,EAAOtM,GACrB1M,KAAKwP,KAAOL,EAASoJ,MANzB,mBAWA,MAAapG,UAAwBnB,EACnC,YAEEtE,GAEAsM,MAAM,SAAS,EAAOtM,GACtB1M,KAAKwP,KAAOL,EAASqJ,OANzB,oBAWA,MAAsBoE,UAAwBpB,EAC5C,YAEEhM,EAEO+B,EAEAsC,EAEPnH,GAEAsM,MAAMxJ,EAAM9C,GANL,KAAA6E,WAEA,KAAAsC,WAPX,oBAgBA,MAAaC,UAA+B8I,EAC1C,YAEErL,EAEAsC,EAEAnH,GAEAsM,MAAM7J,EAAS0N,aAActL,EAAUsC,EAASnH,IATpD,2BAcA,MAAaqH,UAA8B6I,EACzC,YAEErL,EAEAsC,EAEAnH,GAEAsM,MAAM7J,EAAS2N,YAAavL,EAAUsC,EAASnH,IATnD,0BAgBA,MAAsBqQ,UAAkBxN,GAAxC,cAGA,SAAYD,GAEV,mBAEA,+BAEA,yBAEA,qCARF,CAAYA,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAYtB,uBAA4BC,EAC1B,YAESyN,EAEAxP,EAEAO,GAEPiL,MAAM7J,EAAS8N,OAAQ,IAAI,EAAAlB,MAAM,EAAGhO,EAAKE,SANlC,KAAA+O,aAEA,KAAAxP,iBAEA,KAAAO,OAeT,KAAAiG,WAA0B,IAAI3L,MAE9B,KAAA6U,gBAAuB,EAEvB,KAAAC,YAA+B,KAcvB,KAAAC,UAA0B,KAG1B,KAAAC,WAAkB,EAjCxB,IAAIC,EAAeC,GAAmB/P,GACtCxN,KAAKsd,aAAeA,EACpB,IAAIE,EAAMF,EAAaG,YAAY,EAAAnb,gBACnCtC,KAAK0d,WAAaF,GAAO,EAAIF,EAAajP,UAAUmP,EAAM,GAAKF,EAC/Dtd,KAAK0M,MAAMY,OAAStN,KAetB,eACE,OAAOA,KAAKsd,cAAgB,EAAAza,cAI9B,gBACE,IAAI2M,EAAOxP,KAAKgd,WAChB,OAAOxN,GAAQF,EAAWqO,SAAWnO,GAAQF,EAAWsO,cAU1D,OAAOJ,GACL1R,OAAO0R,GAAO,GAAKA,EAAM,YACzB,IAAIJ,EAAYpd,KAAKod,UACrB,IAAKA,EAAW,CACdpd,KAAKod,UAAYA,EAAY,CAAC,GAC9B,IAAIrP,EAAO/N,KAAK+N,KACZ8P,EAAM,EACNjQ,EAAMG,EAAKE,OACf,KAAO4P,EAAMjQ,GACmB,IAA1BG,EAAKI,WAAW0P,MAA6BT,EAAU9O,KAAKuP,GAElET,EAAU9O,KAAK,YAIjB,IAFA,IAAIhO,EAAI,EACJa,EAAIic,EAAUnP,OAAS,EACpB3N,EAAIa,GAAG,CACZ,IAAIV,EAAIH,GAAMa,EAAIb,GAAM,GACpB8B,EAAI0b,UAAUV,EAAU3c,IAC5B,GAAI+c,EAAMpb,EAAGjB,EAAIV,MACZ,IAAI+c,EAAMM,UAAUV,EAAU3c,EAAI,IAErC,OADAT,KAAKqd,WAAaG,EAAMpb,EAAI,EACrB3B,EAAI,EAERH,EAAIG,EAAI,GAEf,OAAOqL,OAAO,GAIhB,WACE,OAAO9L,KAAKqd,aAKhB,MAAsBU,UAA6BhB,EACjD,YAEEvN,EAEO5O,EAEAwT,EAEAC,EAEP3H,GAEAsM,MAAMxJ,EAAM9C,GARL,KAAA9L,OAEA,KAAAwT,aAEA,KAAAC,QAQT,GAAG4F,GAA2B,OAAQja,KAAKqU,MAAQ4F,IAASA,EAE5D,MAAMA,GAA2B,OAA8B,IAAtBja,KAAKqU,MAAQ4F,GAEtD,IAAIA,GAA2Bja,KAAKqU,OAAS4F,GArB/C,yBAyBA,MAAalD,UAA2BxH,EACtC,YAESsH,EAEAC,EAEAzC,EAEP3H,GAEAsM,MAAM7J,EAAS6O,eAAgBtR,GARxB,KAAAmK,UAEA,KAAAC,YAEA,KAAAzC,SAPX,uBAgBA,MAAsB4J,UAAyCF,EAC7D,YAEEvO,EAEA5O,EAEAwT,EAEAC,EAEO9D,EAEAC,EAEP9D,GAEAsM,MAAMxJ,EAAM5O,EAAMwT,EAAYC,EAAO3H,GAN9B,KAAA6D,OAEA,KAAAC,eAbX,qCAsBA,MAAayD,WAAuB8I,EAClC,YAES/I,EAEPtH,GAEAsM,MAAM7J,EAASnE,MAAO0B,GAJf,KAAAsH,cAHX,oBAYA,MAAaG,WAAuB4I,EAClC,YAES7I,EAEPxH,GAEAsM,MAAM7J,EAAS+O,MAAOxR,GAJf,KAAAwH,SAHX,oBAYA,MAAaO,WAAyBsJ,EACpC,YAEEnd,EAEAwT,EAEAC,EAEOC,EAEAnE,EAEAoE,EAEAC,EAEP9H,GAEAsM,MAAM7J,EAASgP,iBAAkBvd,EAAMwT,EAAYC,EAAO3H,GAVnD,KAAA4H,iBAEA,KAAAnE,cAEA,KAAAoE,kBAEA,KAAAC,UAQT,KAAA4J,eAA4C,KAE5C,gBACE,IAAI9J,EAAiBtU,KAAKsU,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAerG,OAAS,GA3B7D,sBAgCA,MAAayG,WAA0BqI,EACrC,YAES7I,EAEPxH,GAEAsM,MAAM7J,EAASkP,SAAU3R,GAJlB,KAAAwH,SAHX,uBAYA,MAAaU,WAAoBmI,EAC/B,YAESpI,EAEAtB,EAEP3G,GAEAsM,MAAM7J,EAASmP,GAAI5R,GANZ,KAAAiI,YAEA,KAAAtB,aALX,iBAcA,MAAawB,WAAuBkI,EAClC,YAEErQ,GAEAsM,MAAM7J,EAASjM,MAAOwJ,IAL1B,oBAUA,MAAaoI,WAAwBiJ,EACnC,YAEEnd,EAEAwT,EAEAC,EAEOxB,EAEPnG,GAEAsM,MAAM7J,EAASoP,gBAAiB3d,EAAMwT,EAAYC,EAAO3H,GAJlD,KAAAmG,UATX,qBAkBA,MAAakC,WAA6BkJ,EACxC,YAEErd,EAEAyT,EAEA7D,EAEA9D,GAEAsM,MAAM7J,EAASqP,qBAAsB5d,EAAM,KAAMyT,EAAO,KAAM7D,EAAa9D,IAX/E,0BAgBA,MAAa2I,WAA8B0H,EACzC,YAESnc,EAEAwU,EAEP1I,GAEAsM,MAAM7J,EAASsP,aAAc/R,GANtB,KAAA9L,OAEA,KAAAwU,gBALX,2BAcA,MAAaI,WAAqBjG,EAChC,YAES+F,EAEAC,EAEP7I,GAEAsM,MAAM7J,EAASuP,aAAchS,GANtB,KAAA4I,YAEA,KAAAC,gBALX,kBAcA,MAAaL,WAAwB6H,EACnC,YAESvI,EAEAQ,EAEAC,EAEPvI,GAGA,GADAsM,MAAM7J,EAASwP,OAAQjS,GARhB,KAAA8H,UAEA,KAAAQ,OAEA,KAAAC,YAKHD,EAAM,CACR,IAAIxH,EAAiB,EAAAoR,cAAc5J,EAAK1T,OACpC0T,EAAK1T,MAAMud,WAAW,KACxBrR,EAAiB,EAAAsR,YAAYtR,EAAgBd,EAAMY,OAAOgQ,cAErD9P,EAAeqR,WAAW,EAAA/b,kBAAiB0K,EAAiB,EAAA1K,eAAiB0K,GAEpFxN,KAAKsd,aAAe9P,OAEpBxN,KAAKsd,aAAe,MArB1B,qBA8BA,MAAanI,WAA+B4H,EAC1C,YAESnL,EAEPlF,GAEAsM,MAAM7J,EAAS4P,cAAerS,GAJvB,KAAAkF,eAHX,4BAYA,MAAa6D,WAA4BsH,EACvC,YAES3L,GAEP4H,MAAM7J,EAAS6P,WAAY5N,EAAW1E,OAF/B,KAAA0E,cAHX,yBAUA,MAAa+E,WAAyB8H,EACpC,YAEErd,EAEAwT,EAEAC,EAEA9D,EAEAC,EAEOyO,EAEPvS,GAEAsM,MAAM7J,EAAS+P,iBAAkBte,EAAMwT,EAAYC,EAAO9D,EAAMC,EAAa9D,GAJtE,KAAAuS,kBAbX,sBAsBA,MAAa5I,WAAqB0G,EAChC,YAESvM,EAEA6C,EAEA+C,EAEAzB,EAEPjI,GAEAsM,MAAM7J,EAASgQ,IAAKzS,GAVb,KAAA8D,cAEA,KAAA6C,YAEA,KAAA+C,cAEA,KAAAzB,aATX,kBAkBA,MAAa6B,WAAuBuG,EAClC,YAESzG,EAEAC,EAEA5B,EAEPjI,GAEAsM,MAAM7J,EAASiQ,MAAO1S,GARf,KAAA4J,WAEA,KAAAC,WAEA,KAAA5B,aAPX,oBAgBA,SAAkB0K,GAEhB,mBAEA,iDAEA,mCANF,CAAkB,EAAAA,YAAA,EAAAA,UAAS,KAU3B,MAAazI,WAA4BmH,EACvC,YAEEnd,EAEAwT,EAEAC,EAEOC,EAEAmC,EAEAC,EAEAC,EAEPjK,GAEAsM,MAAM7J,EAASmQ,oBAAqB1e,EAAMwT,EAAYC,EAAO3H,GAVtD,KAAA4H,iBAEA,KAAAmC,YAEA,KAAAC,OAEA,KAAAC,YAQT,gBACE,IAAIrC,EAAiBtU,KAAKsU,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAerG,OAAS,EAI3D,QACE,OAAO,IAAI2I,GACT5W,KAAKY,KACLZ,KAAKoU,WACLpU,KAAKqU,MACLrU,KAAKsU,eACLtU,KAAKyW,UACLzW,KAAK0W,KACL1W,KAAK2W,UACL3W,KAAK0M,QAtCX,yBA4CA,MAAakJ,WAAoBmH,EAC/B,YAES1J,EAEAqC,EAEAC,EAEPjJ,GAEAsM,MAAM7J,EAASoQ,GAAI7S,GARZ,KAAA2G,YAEA,KAAAqC,SAEA,KAAAC,WAPX,iBAgBA,MAAaM,WAA0B8H,EACrC,YAEEnd,EAEOoV,EAEPtJ,GAEAsM,MAAM7J,EAASqQ,kBAAmB5e,EAAM,KAAM,EAAAyB,YAAY2X,KAAMtN,GAJzD,KAAAsJ,eALX,uBAcA,MAAaF,WAAwBiH,EACnC,YAESlH,EAEAE,EAEAf,EAEPtI,GAEAsM,MAAM7J,EAASsQ,OAAQ/S,GARhB,KAAAmJ,eAEA,KAAAE,gBAEA,KAAAf,OAKP,IAAIxH,EAAiB,EAAAoR,cAAc5J,EAAK1T,OACpC0T,EAAK1T,MAAMud,WAAW,KACxBrR,EAAiB,EAAAsR,YAAYtR,EAAgBd,EAAMY,OAAOgQ,cAErD9P,EAAeqR,WAAW,EAAA/b,kBAAiB0K,EAAiB,EAAA1K,eAAiB0K,GAEpFxN,KAAKsd,aAAe9P,GAlBxB,qBA0BA,MAAa0I,WAA6BzB,GACxC,YAEE7T,EAEAwT,EAEAC,EAEAC,EAEAnE,EAEAoE,EAEAC,EAEA9H,GAEAsM,MAAMpY,EAAMwT,EAAYC,EAAOC,EAAgBnE,EAAaoE,EAAiBC,EAAS9H,GACtF1M,KAAKwP,KAAOL,EAASuQ,sBApBzB,0BAyBA,MAAa1I,WAA0BJ,GACrC,YAEEhW,EAEAwT,EAEAC,EAEAC,EAEAmC,EAEAC,EAEAhK,GAEAsM,MAAMpY,EAAMwT,EAAYC,EAAOC,EAAgBmC,EAAWC,EAAM,EAAgBhK,GAChF1M,KAAKwP,KAAOL,EAASwQ,mBAlBzB,uBAuBA,MAAa1I,WAA6B8G,EACxC,YAEEnd,EAEAwT,EAEAC,EAEOG,EAEP9H,GAEAsM,MAAM7J,EAASyQ,qBAAsBhf,EAAMwT,EAAYC,EAAO3H,GAJvD,KAAA8H,WATX,0BAkBA,MAAa0C,WAAwB6F,EACnC,YAESzb,EAEPoL,GAEAsM,MAAM7J,EAAS0Q,OAAQnT,GAJhB,KAAApL,SAHX,qBAYA,MAAa+V,WAAmB9H,EAC9B,YAES2E,EAEAF,EAEPtH,GAEAsM,MAAM7J,EAAS2Q,WAAYpT,GANpB,KAAAwH,QAEA,KAAAF,cALX,gBAcA,MAAaoD,WAAwB2F,EACnC,YAES1J,EAEA8D,EAEPzK,GAEAsM,MAAM7J,EAAS4Q,OAAQrT,GANhB,KAAA2G,YAEA,KAAA8D,SALX,qBAcA,MAAaG,WAAuByF,EAClC,YAESzb,EAEPoL,GAEAsM,MAAM7J,EAAS6Q,MAAOtT,GAJf,KAAApL,SAHX,oBAYA,MAAaoW,WAAqBqF,EAChC,YAES/I,EAEAuD,EAEAC,EAEAC,EAEP/K,GAEAsM,MAAM7J,EAAS8Q,IAAKvT,GAVb,KAAAsH,aAEA,KAAAuD,gBAEA,KAAAC,kBAEA,KAAAC,qBATX,kBAkBA,MAAaE,WAAwBoG,EACnC,YAEEnd,EAEAwT,EAEAC,EAEOC,EAEA/D,EAEP7D,GAEAsM,MAAM7J,EAAS+Q,gBAAiBtf,EAAMwT,EAAYC,EAAO3H,GANlD,KAAA4H,iBAEA,KAAA/D,QAXX,qBAoBA,MAAasH,WAA4BoG,EACvC,YAEErd,EAEAwT,EAEAC,EAEA9D,EAEAC,EAEA9D,GAEAsM,MAAM7J,EAASgR,oBAAqBvf,EAAMwT,EAAYC,EAAO9D,EAAMC,EAAa9D,IAfpF,yBAoBA,MAAakL,WAA0BmF,EACrC,YAES3I,EAEAyB,EAEPnJ,GAEAsM,MAAM7J,EAASiR,SAAU1T,GANlB,KAAA0H,aAEA,KAAAyB,gBALX,uBAcA,MAAaiC,WAAsBiF,EACjC,YAES3L,EAEP1E,GAEAsM,MAAM7J,EAASkR,KAAM3T,GAJd,KAAA0E,cAHX,mBAYA,MAAa2G,WAAuBgF,EAClC,YAES1J,EAEAsB,EAEPjI,GAEAsM,MAAM7J,EAASmR,MAAO5T,GANf,KAAA2G,YAEA,KAAAsB,aAoBX,SAAgB4I,GAAmBvI,GACjC,IAAIwI,EAAMxI,EAAKyI,YAAY,KACvBzP,EAAMgH,EAAK/G,OACf,GAAIuP,GAAO,GAAKxP,EAAMwP,GAAO,EAAG,CAC9B,IAAI+C,EAAM/C,EACV,OAAS+C,EAAMvS,GACb,IAAK,EAAAwS,kBAAkBxL,EAAK7G,WAAWoS,IAErC,OADAzU,QAAO,GACAkJ,EAGX,OAAOA,EAAK3G,UAAU,EAAGmP,GAG3B,OADA1R,QAAO,GACAkJ,EAvCT,oBAcA,yBAA8BxF,EAAqB4E,GACjD,GAAIA,EACF,IAAK,IAAI/T,EAAI,EAAG2O,EAAIoF,EAAWnG,OAAQ5N,EAAI2O,IAAK3O,EAAG,CACjD,IAAIogB,EAAYrM,EAAW/T,GAC3B,GAAIogB,EAAUrF,eAAiB5L,EAAM,OAAOiR,EAGhD,OAAO,MAIT,wBAkBA,yBAA8BlQ,GAC5B,GAAIA,EAAKf,MAAQL,EAAS+J,UAAW,CACnC,IAAItY,EAAuB2P,EAAM3P,KACjC,QAAuB,OAAdA,EAAKwY,MAAiBxY,EAAK2Y,WAAWxL,KAAKE,OAAS,GAE/D,OAAO,I,+OCrvET,aAMA,OAKA,OAYA,IAAYyS,EAwIAC,EAMZ,SAAgBC,EAAiB7S,GAE/B,OADAjC,OAAOiC,EAAKE,QACJF,EAAKI,WAAW,IACtB,KAAK,GACH,GAAY,YAARJ,EAAoB,OAAO2S,EAAMG,SACrC,GAAY,MAAR9S,EAAc,OAAO2S,EAAMI,GAC/B,GAAY,SAAR/S,EAAiB,OAAO2S,EAAMK,MAClC,GAAY,SAARhT,EAAiB,OAAO2S,EAAMM,MAClC,MAEF,KAAK,GACH,GAAY,SAARjT,EAAiB,OAAO2S,EAAMxC,MAClC,MAEF,KAAK,GACH,GAAY,QAARnQ,EAAgB,OAAO2S,EAAMO,KACjC,GAAY,SAARlT,EAAiB,OAAO2S,EAAMQ,MAClC,GAAY,SAARnT,EAAiB,OAAO2S,EAAMzE,MAClC,GAAY,YAARlO,EAAoB,OAAO2S,EAAMrC,SACrC,GAAY,SAARtQ,EAAiB,OAAO2S,EAAMS,MAClC,GAAY,eAARpT,EAAuB,OAAO2S,EAAMvE,YACxC,MAEF,KAAK,IACH,GAAY,YAARpO,EAAoB,OAAO2S,EAAMU,SACrC,GAAY,WAARrT,EAAmB,OAAO2S,EAAMW,QACpC,GAAY,WAARtT,EAAmB,OAAO2S,EAAMY,QACpC,GAAY,UAARvT,EAAkB,OAAO2S,EAAMa,OACnC,GAAY,MAARxT,EAAc,OAAO2S,EAAMpC,GAC/B,MAEF,KAAK,IACH,GAAY,QAARvQ,EAAgB,OAAO2S,EAAMc,KACjC,GAAY,QAARzT,EAAgB,OAAO2S,EAAMe,KACjC,GAAY,UAAR1T,EAAkB,OAAO2S,EAAM/B,OACnC,GAAY,WAAR5Q,EAAmB,OAAO2S,EAAMgB,QACpC,MAEF,KAAK,IACH,GAAY,SAAR3T,EAAiB,OAAO2S,EAAMlI,MAClC,GAAY,WAARzK,EAAmB,OAAO2S,EAAMiB,QACpC,GAAY,OAAR5T,EAAe,OAAO2S,EAAMvB,IAChC,GAAY,QAARpR,EAAgB,OAAO2S,EAAMkB,KACjC,GAAY,YAAR7T,EAAoB,OAAO2S,EAAMrE,SACrC,MAEF,KAAK,IACH,GAAY,OAARtO,EAAe,OAAO2S,EAAMmB,IAChC,MAEF,KAAK,IACH,GAAY,MAAR9T,EAAc,OAAO2S,EAAMnB,GAC/B,GAAY,cAARxR,EAAsB,OAAO2S,EAAMoB,WACvC,GAAY,UAAR/T,EAAkB,OAAO2S,EAAMjB,OACnC,GAAY,MAAR1R,EAAc,OAAO2S,EAAMqB,GAC/B,GAAY,cAARhU,EAAsB,OAAO2S,EAAMpE,WACvC,GAAY,aAARvO,EAAqB,OAAO2S,EAAMsB,UACtC,GAAY,MAARjU,EAAc,OAAO2S,EAAMuB,GAC/B,MAEF,KAAK,IACH,GAAY,SAARlU,EAAiB,OAAO2S,EAAMwB,MAClC,MAEF,KAAK,IACH,GAAY,OAARnU,EAAe,OAAO2S,EAAMyB,IAChC,MAEF,KAAK,IACH,GAAY,UAARpU,EAAkB,OAAO2S,EAAM0B,OACnC,MAEF,KAAK,IACH,GAAY,aAARrU,EAAqB,OAAO2S,EAAM2B,UACtC,GAAY,OAARtU,EAAe,OAAO2S,EAAMnE,IAChC,GAAY,QAARxO,EAAgB,OAAO2S,EAAMpI,KACjC,MAEF,KAAK,IACH,GAAY,MAARvK,EAAc,OAAO2S,EAAM4B,GAC/B,MAEF,KAAK,IACH,GAAY,WAARvU,EAAmB,OAAO2S,EAAM6B,QACpC,GAAY,WAARxU,EAAmB,OAAO2S,EAAM8B,QACpC,GAAY,aAARzU,EAAqB,OAAO2S,EAAM+B,UACtC,GAAY,UAAR1U,EAAkB,OAAO2S,EAAMgC,OACnC,MAEF,KAAK,IACH,GAAY,YAAR3U,EAAoB,OAAO2S,EAAMiC,SACrC,GAAY,UAAR5U,EAAkB,OAAO2S,EAAMb,OACnC,MAEF,KAAK,IACH,GAAY,OAAR9R,EAAe,OAAO2S,EAAMkC,IAChC,GAAY,UAAR7U,EAAkB,OAAO2S,EAAMmC,OACnC,GAAY,SAAR9U,EAAiB,OAAO2S,EAAM5H,MAClC,GAAY,UAAR/K,EAAkB,OAAO2S,EAAMX,OACnC,MAEF,KAAK,IACH,GAAY,QAARhS,EAAgB,OAAO2S,EAAM7H,KACjC,GAAY,SAAR9K,EAAiB,OAAO2S,EAAMV,MAClC,GAAY,QAARjS,EAAgB,OAAO2S,EAAMnI,KACjC,GAAY,OAARxK,EAAe,OAAO2S,EAAMT,IAChC,GAAY,QAARlS,EAAgB,OAAO2S,EAAMoC,KACjC,GAAY,UAAR/U,EAAkB,OAAO2S,EAAMqC,OACnC,MAEF,KAAK,IACH,GAAY,OAARhV,EAAe,OAAO2S,EAAMsC,IAChC,GAAY,QAARjV,EAAgB,OAAO2S,EAAML,KACjC,MAEF,KAAK,IACH,GAAY,SAARtS,EAAiB,OAAO2S,EAAMJ,MAClC,GAAY,QAARvS,EAAgB,OAAO2S,EAAMuC,KACjC,MAEF,KAAK,IACH,GAAY,SAARlV,EAAiB,OAAO2S,EAAMwC,MAItC,OAAOxC,EAAMyC,QAGf,SAAgBC,EAAsBC,GACpC,OAAQA,GACN,KAAK3C,EAAMG,SACX,KAAKH,EAAMI,GACX,KAAKJ,EAAMvE,YACX,KAAKuE,EAAMW,QACX,KAAKX,EAAMa,OACX,KAAKb,EAAMkB,KACX,KAAKlB,EAAMvB,IACX,KAAKuB,EAAMmB,IACX,KAAKnB,EAAMpE,WACX,KAAKoE,EAAMuB,GACX,KAAKvB,EAAMwB,MACX,KAAKxB,EAAM0B,OACX,KAAK1B,EAAM2B,UACX,KAAK3B,EAAMpI,KACX,KAAKoI,EAAMiC,SACX,KAAKjC,EAAMkC,IACX,KAAKlC,EAAMoC,KACX,KAAKpC,EAAML,KAAM,OAAO,EACxB,QAAS,OAAO,IAlSpB,SAAYK,GAKV,2BACA,eACA,qBACA,qBACA,qBACA,mBACA,qBACA,qBACA,qBACA,2BACA,kCACA,4BACA,0BACA,0BACA,wBACA,gBACA,oBACA,oBACA,wBACA,0BACA,sBACA,0BACA,kBACA,oBACA,4BACA,kBACA,gBACA,gCACA,wBACA,gBACA,gCACA,8BACA,gBACA,sBACA,kBACA,wBACA,8BACA,kBACA,oBACA,gBACA,0BACA,0BACA,8BACA,wBACA,4BACA,wBACA,kBACA,wBACA,sBACA,wBACA,oBACA,sBACA,oBACA,kBACA,oBACA,wBACA,kBACA,oBACA,sBACA,oBACA,sBAIA,8BACA,gCACA,8BACA,gCACA,kCACA,oCACA,kBACA,kCACA,8BACA,sBACA,4BACA,kCACA,0CACA,gDACA,sCACA,gDACA,oDACA,8DACA,gDACA,oBACA,sBACA,8CACA,4BACA,sBACA,0BACA,8BACA,kCACA,8CACA,0DACA,kFACA,8BACA,kBACA,sBACA,kCACA,sBACA,kDACA,0BACA,4BACA,sBACA,yBACA,mCACA,qCACA,2CACA,6DACA,qCACA,yCACA,6DACA,yEACA,iGACA,6CACA,iCACA,qCACA,iBAIA,iCACA,uCACA,yCACA,qCAIA,2BACA,+BArIF,CAAYA,EAAA,EAAAA,QAAA,EAAAA,MAAK,KAwIjB,SAAYC,GACV,yBACA,uBACA,uBAHF,CAAYA,EAAA,EAAAA,qBAAA,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BACA,0BACA,8BACA,oCAjDF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAoDxB,SAAYM,GACV,uBACA,uBACA,uBACA,uBACA,6BACA,6BACA,uBACA,uBACA,uBACA,uBACA,0BACA,0BACA,4BACA,4BACA,4BACA,4BACA,gCACA,gCACA,0BACA,0BACA,wBACA,wBACA,8BACA,8BACA,0BACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,wCACA,wCACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,gCACA,8BACA,wCACA,wCAGA,sCACA,wCACA,sCACA,wCACA,wCAGA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CAGA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,0BACA,4BACA,4BACA,oCACA,oCACA,oCACA,4BACA,4BACA,oCACA,oCACA,oCACA,4BACA,4BACA,oCACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,4BACA,8BACA,8BACA,gCACA,gCACA,oCACA,4BACA,4BACA,8BACA,8BACA,gCACA,gCACA,oCACA,oDACA,qDACA,qDACA,qDACA,mDACA,mDACA,mDACA,mDACA,qDACA,uDACA,qDACA,uDACA,qDACA,uDACA,qDACA,uDAzHF,CAAY,EAAAA,UAAA,EAAAA,QAAO,KA4HnB,SAAYL,GACV,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,qBACA,uBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,sBACA,wBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBAGA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,yBACA,2BACA,iCACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BAEA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,+BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,+BACA,iDACA,iDACA,iDACA,iDACA,qCApLF,CAAYA,EAAA,EAAAA,WAAA,EAAAA,SAAQ,KAuLpB,SAAYM,GACV,iBACA,iBACA,iBACA,eACA,iBACA,mBANF,CAAY,EAAAA,cAAA,EAAAA,YAAW,KASvB,SAAYC,GACV,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,2CARF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KAWzB,SAAYC,GACV,2CACA,2CACA,2CACA,2CACA,2CACA,2CANF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KASzB,SAAYC,GACV,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,4BACA,4BAZF,CAAY,EAAAA,cAAA,EAAAA,YAAW,KAevB,SAAYC,GACV,6BACA,6BACA,6BACA,6BACA,6BALF,CAAY,EAAAA,gBAAA,EAAAA,cAAa,KAQzB,SAAYC,GACV,uCACA,uCACA,uCACA,uCACA,qCACA,q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ACA,oHACA,wFACA,gFACA,kIACA,kIACA,4FACA,oHACA,oFACA,kFACA,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,gKACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,0DACA,kDACA,gFACA,gGACA,gGACA,wDACA,kFACA,sFACA,0GACA,8GACA,wMACA,oFACA,8HACA,0NACA,sFACA,0IACA,gMACA,0LACA,wGACA,oIACA,kIACA,0HACA,wGACA,oIACA,wFACA,4KACA,sHACA,gFACA,oKACA,gLACA,4FACA,0MACA,wKACA,0FACA,kQACA,8DACA,kGACA,gKACA,oIACA,kJACA,0GACA,kKACA,4DACA,oJACA,oJACA,0GACA,0EACA,4FACA,oFACA,sNACA,8FACA,0QACA,kLACA,sLACA,gHACA,sFACA,8IACA,sDACA,0HACA,wEACA,8CACA,4FACA,gIACA,iLACA,+MA9KF,CAAY,EAAAA,iBAAA,EAAAA,eAAc,KAkL1B,kCAAuCI,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,gCACjB,KAAK,IAAK,MAAO,sDACjB,KAAK,IAAK,MAAO,0DACjB,KAAK,IAAK,MAAO,0DACjB,KAAK,IAAK,MAAO,uDACjB,KAAK,IAAK,MAAO,0DACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,mDACjB,KAAK,IAAK,MAAO,iCACjB,KAAK,IAAK,MAAO,kCACjB,KAAK,IAAK,MAAO,mCACjB,KAAK,IAAK,MAAO,kEACjB,KAAK,IAAK,MAAO,iDACjB,KAAK,IAAK,MAAO,oCACjB,KAAK,IAAK,MAAO,8BACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,IAAK,MAAO,qCAC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GAAO,EAAG,CACZ,GAAW,GAAPA,EAAU,MAAO,IACrB,GAxGc,IAwGVhQ,EAAeW,WAAW,GAC5B,OAAOX,EAGX,OAASgQ,EAAM,GACb,GA7Gc,IA6GVhQ,EAAeW,WAAWqP,GAC5B,OAAOhQ,EAAea,UAAU,EAAGmP,GAGvC,MAAO,IA3GT,kBAoFA,uBAA4BhQ,EAAwBk0H,GAClD,OAAIl0H,EAAeqR,WAAW,QACrBrR,EAEFoR,EACL6iH,EAAQC,GAAU,EAAAp/H,eAAiBkL,IAKvC,a,sPC3GA,SAAkBm0H,GAEhB,mBACA,4BACA,wCACA,wCACA,kDACA,6BAEA,sBACA,6CACA,0BACA,0BACA,4BACA,4BACA,4CACA,0CACA,wCACA,oCACA,8CACA,gCACA,gCACA,0CACA,kDACA,+CACA,gDACA,wBAEA,cAEA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAEA,cACA,cACA,cACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eAEA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cAEA,8BACA,4BACA,gBACA,8BACA,4BACA,mBACA,sBACA,iCACA,oCACA,gCACA,sBACA,sBACA,wBACA,kBACA,kCACA,wBACA,kCACA,kCACA,oBACA,4BACA,sBACA,+BACA,kCACA,8BACA,0BACA,oBACA,4BACA,8BACA,kCACA,sBACA,uBAEA,6BACA,4BACA,yCACA,iBACA,kCAnIF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAuI1B,uBAA4BjhI,GAC1B,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,IAMb,wBAA6BA,GAC3B,OAAQA,GACN,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAOA,GAAK,MAAmBA,GAAK,OAM1C,0BAA+BA,GAC7B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,wBAA6BA,GAC3B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,6BAAkC8L,GAChC,OAAOA,GAAQ,IAAcA,GAAQ,KAC9BA,GAAQ,IAAcA,GAAQ,IAC9BA,GAAQ,IAAeA,GAAQ,IAIxC,6BAAkC9L,GAChC,MAAMkhI,EAAS,GAAJlhI,EACX,OAAOkhI,GAAM,IAAcA,GAAM,KACrB,IAALlhI,GACK,IAALA,GACAA,EAAI,SAmLqB8L,EAnLY9L,GAoL9B,KAAO8L,EAAO,QACrBq1H,EAAmBr1H,EAAas1H,IAFzC,IAAkCt1H,GA/KlC,8BAAmC9L,GACjC,OAAOA,GAAK,IAAcA,GAAK,KAIjC,4BAAiCA,GAC/B,MAAMkhI,EAAS,GAAJlhI,EACX,OAAOkhI,GAAM,IAAcA,GAAM,KAC1BlhI,GAAK,IAAeA,GAAK,IACpB,IAALA,GACK,IAALA,GACAA,EAAI,SAyKoB8L,EAzKY9L,GA0K7B,KAAO8L,EAAO,QACrBq1H,EAAmBr1H,EAAau1H,IAFzC,IAAiCv1H,GArKjC,MAAMs1H,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAA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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\n * @fileoverview Various utility.\n * @license Apache-2.0\n */\n\nexport * from \"./binary\";\nexport * from \"./collections\";\nexport * from \"./math\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./vector\";\n","/**\n * @fileoverview Common constants used by various parts of the compiler.\n * @license Apache-2.0\n */\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITELY_ASSIGNED = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Did error. */\n  ERRORED = 1 << 23,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 24,\n  /** Is scoped. */\n  SCOPED = 1 << 25,\n  /** Is a stub. */\n  STUB = 1 << 26,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 27,\n  /** Is (part of) a closure. */\n  CLOSURE = 1 << 28,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 29\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n/** Stub function delimiter. */\nexport const STUB_DELIMITER = \"@\";\n\n/** Common names. */\nexport namespace CommonNames {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const funcref = \"funcref\";\n  export const externref = \"externref\";\n  export const exnref = \"exnref\";\n  export const anyref = \"anyref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_TABLE_BASE = \"ASC_TABLE_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_LOW_MEMORY_LIMIT = \"ASC_LOW_MEMORY_LIMIT\";\n  export const ASC_WASI = \"ASC_WASI\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  export const ASC_FEATURE_MULTI_VALUE = \"ASC_FEATURE_MULTI_VALUE\";\n  export const ASC_FEATURE_GC = \"ASC_FEATURE_GC\";\n  export const ASC_FEATURE_MEMORY64 = \"ASC_FEATURE_MEMORY64\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Funcref = \"Funcref\";\n  export const Externref = \"Externref\";\n  export const Exnref = \"Exnref\";\n  export const Anyref = \"Anyref\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const StaticArray = \"StaticArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const Function = \"Function\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const NativeMath = \"NativeMath\";\n  export const NativeMathf = \"NativeMathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  export const Error = \"Error\";\n  // runtime\n  export const abort = \"abort\";\n  export const trace = \"trace\";\n  export const seed = \"seed\";\n  export const pow = \"pow\";\n  export const ipow32 = \"ipow32\";\n  export const ipow64 = \"ipow64\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const new_ = \"__new\";\n  export const renew = \"__renew\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const newBuffer = \"__newBuffer\";\n  export const newArray = \"__newArray\";\n  export const BLOCK = \"~lib/rt/common/BLOCK\";\n  export const OBJECT = \"~lib/rt/common/OBJECT\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * @fileoverview Shared diagnostic handling.\n * @license Apache-2.0\n */\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Source\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Overly pedantic message. */\n  PEDANTIC,\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return \"PEDANTIC\";\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence for magenta foreground. */\nexport const COLOR_MAGENTA: string = \"\\u001b[95m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return COLOR_MAGENTA;\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null; // TODO: Make this a related message for chains?\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 !== null) message = message.replace(\"{0}\", arg0);\n    if (arg1 !== null) message = message.replace(\"{1}\", arg1);\n    if (arg2 !== null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Tests if this message equals the specified. */\n  equals(other: DiagnosticMessage): bool {\n    if (this.code != other.code) return false;\n    var thisRange = this.range;\n    var otherRange = other.range;\n    if (thisRange) {\n      if (!otherRange || !thisRange.equals(otherRange)) return false;\n    } else if (otherRange) {\n      return false;\n    }\n    var thisRelatedRange = this.relatedRange;\n    var otherRelatedRange = other.relatedRange;\n    if (thisRelatedRange) {\n      if (!otherRelatedRange || !thisRelatedRange.equals(otherRelatedRange)) return false;\n    } else if (otherRange) {\n      return false;\n    }\n    return this.message == other.message;\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    var range = this.range;\n    if (range) {\n      let source = range.source;\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString() +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        source.normalizedPath +\n        \"(\" +\n        source.lineAt(range.start).toString() +\n        \",\" +\n        source.columnAt().toString() +\n        \"+\" +\n        (range.end - range.start).toString() +\n        \")\"\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString() +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString());\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  var range = message.range;\n  if (range) {\n    let source = range.source;\n\n    // include context information if requested\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(source.lineAt(range.start).toString());\n    sb.push(\",\");\n    sb.push(source.columnAt().toString());\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      let relatedSource = relatedRange.source;\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedSource.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedSource.lineAt(relatedRange.start).toString());\n      sb.push(\",\");\n      sb.push(relatedSource.columnAt().toString());\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n  /** Diagnostic messages already seen, by range. */\n  private seen: Map<Source,Map<i32,DiagnosticMessage[]>> = new Map();\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    if (!diagnostics) diagnostics = [];\n    this.diagnostics = diagnostics;\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range | null,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2);\n    if (range) message = message.withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    // It is possible that the same diagnostic is emitted twice, for example\n    // when compiling generics with different types or when recompiling a loop\n    // because our initial assumptions didn't hold. It is even possible to get\n    // multiple instances of the same range during parsing. Deduplicate these.\n    if (range) {\n      let seen = this.seen;\n      if (seen.has(range.source)) {\n        let seenInSource = assert(seen.get(range.source));\n        if (seenInSource.has(range.start)) {\n          let seenMessagesAtPos = assert(seenInSource.get(range.start));\n          for (let i = 0, k = seenMessagesAtPos.length; i < k; ++i) {\n            if (seenMessagesAtPos[i].equals(message)) return;\n          }\n          seenMessagesAtPos.push(message);\n        } else {\n          seenInSource.set(range.start, [ message ]);\n        }\n      } else {\n        let seenInSource = new Map<i32,DiagnosticMessage[]>();\n        seenInSource.set(range.start, [ message ]);\n        seen.set(range.source, seenInSource);\n      }\n    }\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an overly pedantic diagnostic message. */\n  pedantic(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an overly pedantic diagnostic message with a related range. */\n  pedanticRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * @fileoverview Abstract syntax tree representing a source file once parsed.\n *\n * Each node in the AST is represented by an instance of a subclass of `Node`,\n * with its `Node#kind` represented by one of the `NodeKind` constants, which\n * dependent code typically switches over. The intended way to create a node\n * is to use the respective `Node.createX` method instead of its constructor.\n *\n * Note that the AST does not contain any type information except type names.\n *\n * @license Apache-2.0\n */\n\n// TODO: Make the AST more easily serializable by refactoring `Node#range` so\n// it doesn't reference the non-serializable `Source` object.\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode,\n  isTrivialAlphanum\n} from \"./util\";\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  OMITTED,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  FOROF,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  INDEXSIGNATURE,\n  COMMENT\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n  constructor(\n    /** Kind of this node. */\n    public kind: NodeKind,\n    /** Source range. */\n    public range: Range\n  ) {}\n\n  // types\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return new TypeName(Node.createIdentifierExpression(name, range), null, range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    return new NamedTypeNode(name, typeArguments, isNullable, range);\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    return new FunctionTypeNode(parameters, returnType, explicitThisType, isNullable, range);\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return new NamedTypeNode(Node.createSimpleTypeName(\"\", range), null, false, range);\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    return new TypeParameterNode(name, extendsType, defaultType, range);\n  }\n\n  static createParameter(\n    parameterKind: ParameterKind,\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    range: Range\n  ): ParameterNode {\n    return new ParameterNode(parameterKind, name, type, initializer, range);\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    return new DecoratorNode(DecoratorKind.fromNode(name), name, args, range);\n  }\n\n  static createComment(\n    commentKind: CommentKind,\n    text: string,\n    range: Range\n  ): CommentNode {\n    return new CommentNode(commentKind, text, range);\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    text: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    return new IdentifierExpression(text, isQuoted, range);\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    return new IdentifierExpression(\"\", false, range);\n  }\n\n  static createArrayLiteralExpression(\n    elementExpressions: Expression[],\n    range: Range\n  ): ArrayLiteralExpression {\n    return new ArrayLiteralExpression(elementExpressions, range);\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    return new AssertionExpression(assertionKind, expression, toType, range);\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    return new BinaryExpression(operator, left, right, range);\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArguments: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    return new CallExpression(expression, typeArguments, args, range);\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    return new ClassExpression(declaration);\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    return new CommaExpression(expressions, range);\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    return new ConstructorExpression(range);\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    elementExpression: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    return new ElementAccessExpression(expression, elementExpression, range);\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    return new FalseExpression(range);\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    return new FloatLiteralExpression(value, range);\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    return new FunctionExpression(declaration);\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    return new InstanceOfExpression(expression, isType, range);\n  }\n\n  static createIntegerLiteralExpression(\n    value: i64,\n    range: Range\n  ): IntegerLiteralExpression {\n    return new IntegerLiteralExpression(value, range);\n  }\n\n  static createNewExpression(\n    typeName: TypeName,\n    typeArguments: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    return new NewExpression(typeName, typeArguments, args, range);\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    return new NullExpression(range);\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    return new ObjectLiteralExpression(names, values, range);\n  }\n\n  static createOmittedExpression(\n    range: Range\n  ): OmittedExpression {\n    return new OmittedExpression(range);\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    return new ParenthesizedExpression(expression, range);\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    return new PropertyAccessExpression(expression, property, range);\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    patternFlags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    return new RegexpLiteralExpression(pattern, patternFlags, range);\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    return new TernaryExpression(condition, ifThen, ifElse, range);\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    return new StringLiteralExpression(value, range);\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    return new SuperExpression(range);\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    return new ThisExpression(range);\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    return new TrueExpression(range);\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    return new UnaryPostfixExpression(operator, operand, range);\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    return new UnaryPrefixExpression(operator, operand, range);\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    return new BlockStatement(statements, range);\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    return new BreakStatement(label, range);\n  }\n\n  static createClassDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null,\n    implementsTypes: NamedTypeNode[] | null,\n    members: DeclarationStatement[],\n    range: Range\n  ): ClassDeclaration {\n    return new ClassDeclaration(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    return new ContinueStatement(label, range);\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    return new DoStatement(statement, condition, range);\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    return new EmptyStatement(range);\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    values: EnumValueDeclaration[],\n    range: Range\n  ): EnumDeclaration {\n    return new EnumDeclaration(name, decorators, flags, values, range);\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    flags: CommonFlags,\n    initializer: Expression | null,\n    range: Range\n  ): EnumValueDeclaration {\n    return new EnumValueDeclaration(name, flags, initializer, range);\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    return new ExportStatement(members, path, isDeclare, range);\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    return new ExportDefaultStatement(declaration, range);\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    return new ExportImportStatement(name, externalName, range);\n  }\n\n  static createExportMember(\n    localName: IdentifierExpression,\n    exportedName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    if (!exportedName) exportedName = localName;\n    return new ExportMember(localName, exportedName, range);\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    return new ExpressionStatement(expression);\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    return new IfStatement(condition, ifTrue, ifFalse, range);\n  }\n\n  static createImportStatement(\n    declarations: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    return new ImportStatement(declarations, null, path, range);\n  }\n\n  static createWildcardImportStatement(\n    namespaceName: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    return new ImportStatement(null, namespaceName, path, range);\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    if (!name) name = foreignName;\n    return new ImportDeclaration(name, foreignName, range);\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null,\n    implementsTypes: NamedTypeNode[] | null,\n    members: DeclarationStatement[],\n    range: Range\n  ): InterfaceDeclaration {\n    return new InterfaceDeclaration(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    range: Range\n  ): FieldDeclaration {\n    return new FieldDeclaration(name, decorators, flags, type, initializer, -1, range);\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    return new ForStatement(initializer, condition, incrementor, statement, range);\n  }\n\n  static createForOfStatement(\n    variable: Statement,\n    iterable: Expression,\n    statement: Statement,\n    range: Range\n  ): ForOfStatement {\n    return new ForOfStatement(variable, iterable, statement, range);\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    return new FunctionDeclaration(name, decorators, flags, typeParameters, signature, body, arrowKind, range);\n  }\n\n  static createIndexSignature(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    flags: CommonFlags,\n    range: Range\n  ): IndexSignatureNode {\n    return new IndexSignatureNode(keyType, valueType, flags, range);\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    range: Range\n  ): MethodDeclaration {\n    return new MethodDeclaration(name, decorators, flags, typeParameters, signature, body, range);\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    members: Statement[],\n    range: Range\n  ): NamespaceDeclaration {\n    return new NamespaceDeclaration(name, decorators, flags, members, range);\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    return new ReturnStatement(value, range);\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    return new SwitchStatement(condition, cases, range);\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    return new SwitchCase(label, statements, range);\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    return new ThrowStatement(value, range);\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    return new TryStatement(statements, catchVariable, catchStatements, finallyStatements, range);\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    type: TypeNode,\n    range: Range\n  ): TypeDeclaration {\n    return new TypeDeclaration(name, decorators, flags, typeParameters, type, range);\n  }\n\n  static createVariableStatement(\n    decorators: DecoratorNode[] | null,\n    declarations: VariableDeclaration[],\n    range: Range\n  ): VariableStatement {\n    return new VariableStatement(decorators, declarations, range);\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    range: Range\n  ): VariableDeclaration {\n    return new VariableDeclaration(name, decorators, flags, type, initializer, range);\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    return new VoidStatement(expression, range);\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    return new WhileStatement(condition, statement, range);\n  }\n\n  /** Tests if this node is a literal of the specified kind. */\n  isLiteralKind(literalKind: LiteralKind): bool {\n    return this.kind == NodeKind.LITERAL\n        && (<LiteralExpression>changetype<Node>(this)).literalKind == literalKind; // TS\n  }\n\n  /** Tests if this node is a literal of a numeric kind (float or integer). */\n  get isNumericLiteral(): bool {\n    if (this.kind == NodeKind.LITERAL) {\n      switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n        case LiteralKind.FLOAT:\n        case LiteralKind.INTEGER: return true;\n      }\n    }\n    return false;\n  }\n\n  /** Tests whether this node is guaranteed to compile to a constant value. */\n  get compilesToConst(): bool {\n    switch (this.kind) {\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n          case LiteralKind.FLOAT:\n          case LiteralKind.INTEGER:\n          case LiteralKind.STRING: return true;\n        }\n        break;\n      }\n      case NodeKind.NULL:\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return true;\n    }\n    return false;\n  }\n\n  private isAccessOn(kind: NodeKind): bool {\n    let node = changetype<Node>(this);\n    if (node.kind == NodeKind.CALL) {\n      node = (<CallExpression>node).expression;\n    }\n    if (node.kind == NodeKind.PROPERTYACCESS) {\n      let target = (<PropertyAccessExpression>node).expression;\n      if (target.kind == kind) return true;\n    }\n    return false;\n  }\n\n  /** Checks if this node accesses a method or property on `this`. */\n  get isAccessOnThis(): bool {\n    return this.isAccessOn(NodeKind.THIS);\n  }\n\n  /** Checks if this node accesses a method or property on `super`. */\n  get isAccessOnSuper(): bool {\n    return this.isAccessOn(NodeKind.SUPER);\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  constructor(\n    /** Kind of the type node. */\n    kind: NodeKind,\n    /** Whether nullable or not. */\n    public isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>changetype<TypeNode>(this); // TS\n      if (!namedTypeNode.name.next) {\n        let typeArgumentNodes = namedTypeNode.typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = namedTypeNode.name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let functionTypeNode = <FunctionTypeNode>changetype<TypeNode>(this); // TS\n      let parameterNodes = functionTypeNode.parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if (functionTypeNode.returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = functionTypeNode.explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  constructor(\n    /** Identifier of this part. */\n    public identifier: IdentifierExpression,\n    /** Next part of the type name or `null` if this is the last part. */\n    public next: TypeName | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPENAME, range);\n  }\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  constructor(\n    /** Type name. */\n    public name: TypeName,\n    /** Type argument references. */\n    public typeArguments: TypeNode[] | null,\n    /** Whether nullable or not. */\n    isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NAMEDTYPE, isNullable, range);\n  }\n\n  /** Checks if this type node has type arguments. */\n  get hasTypeArguments(): bool {\n    var typeArguments = this.typeArguments;\n    return typeArguments !== null && typeArguments.length > 0;\n  }\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  constructor(\n    /** Function parameters. */\n    public parameters: ParameterNode[],\n    /** Return type. */\n    public returnType: TypeNode,\n    /** Explicitly provided this type, if any. */\n    public explicitThisType: NamedTypeNode | null, // can't be a function\n    /** Whether nullable or not. */\n    isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FUNCTIONTYPE, isNullable, range);\n  }\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  constructor(\n    /** Identifier reference. */\n    public name: IdentifierExpression,\n    /** Extended type reference, if any. */\n    public extendsType: NamedTypeNode | null, // can't be a function\n    /** Default type if omitted, if any. */\n    public defaultType: NamedTypeNode | null, // can't be a function\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPEPARAMETER, range);\n  }\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  constructor(\n    /** Parameter kind. */\n    public parameterKind: ParameterKind,\n    /** Parameter name. */\n    public name: IdentifierExpression,\n    /** Parameter type. */\n    public type: TypeNode,\n    /** Initializer expression, if any. */\n    public initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PARAMETER, range);\n  }\n\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  FINAL,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.f: {\n          if (nameStr == \"final\") return DecoratorKind.FINAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (nameNode.kind == NodeKind.PROPERTYACCESS) {\n      let propertyAccessNode = <PropertyAccessExpression>nameNode;\n      let expression = propertyAccessNode.expression;\n      if (expression.kind == NodeKind.IDENTIFIER) {\n        let nameStr = (<IdentifierExpression>expression).text;\n        assert(nameStr.length);\n        let propStr = propertyAccessNode.property.text;\n        assert(propStr.length);\n        if (nameStr == \"operator\") {\n          switch (propStr.charCodeAt(0)) {\n            case CharCode.b: {\n              if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n              break;\n            }\n            case CharCode.p: {\n              if (propStr == \"prefix\") return DecoratorKind.OPERATOR_PREFIX;\n              if (propStr == \"postfix\") return DecoratorKind.OPERATOR_POSTFIX;\n              break;\n            }\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  constructor(\n    /** Built-in decorator kind, or custom. */\n    public decoratorKind: DecoratorKind,\n    /** Name expression. */\n    public name: Expression,\n    /** Argument expressions. */\n    public args: Expression[] | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.DECORATOR, range);\n  }\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash line comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  constructor(\n    /** Comment kind. */\n    public commentKind: CommentKind,\n    /** Comment text. */\n    public text: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.COMMENT, range);\n  }\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  constructor(\n    /** Textual name. */\n    public text: string,\n    /** Whether quoted or not. */\n    public isQuoted: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IDENTIFIER, range);\n  }\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  constructor(\n    /** Specific literal kind. */\n    public literalKind: LiteralKind,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.LITERAL, range);\n  }\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Nested element expressions. */\n    public elementExpressions: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.ARRAY, range);\n  }\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  /** A prefix assertion, i.e. `<T>expr`. */\n  PREFIX,\n  /** An as assertion, i.e. `expr as T`. */\n  AS,\n  /** A non-null assertion, i.e. `!expr`. */\n  NONNULL,\n  /** A const assertion, i.e. `expr as const`. */\n  CONST\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  constructor(\n    /** Specific kind of this assertion. */\n    public assertionKind: AssertionKind,\n    /** Expression being asserted. */\n    public expression: Expression,\n    /** Target type, if applicable. */\n    public toType: TypeNode | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ASSERTION, range);\n  }\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  constructor(\n    /** Operator token. */\n    public operator: Token,\n    /** Left-hand side expression */\n    public left: Expression,\n    /** Right-hand side expression. */\n    public right: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BINARY, range);\n  }\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  constructor(\n    /** Called expression. Usually an identifier or property access expression. */\n    public expression: Expression,\n    /** Provided type arguments. */\n    public typeArguments: TypeNode[] | null,\n    /** Provided arguments. */\n    public args: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CALL, range);\n  }\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments) {\n      if (numTypeArguments = typeArguments.length) {\n        return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n      }\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.args;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  constructor(\n    /** Inline class declaration. */\n    public declaration: ClassDeclaration\n  ) {\n    super(NodeKind.CLASS, declaration.range);\n  }\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  constructor(\n    /** Sequential expressions. */\n    public expressions: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.COMMA, range);\n  }\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"constructor\", false, range);\n    this.kind = NodeKind.CONSTRUCTOR;\n  }\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  constructor(\n    /** Expression being accessed. */\n    public expression: Expression,\n    /** Element of the expression being accessed. */\n    public elementExpression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ELEMENTACCESS, range);\n  }\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Float value. */\n    public value: f64,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.FLOAT, range);\n  }\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  constructor(\n    /** Inline function declaration. */\n    public declaration: FunctionDeclaration\n  ) {\n    super(NodeKind.FUNCTION, declaration.range);\n  }\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  constructor(\n    /** Expression being asserted. */\n    public expression: Expression,\n    /** Type to test for. */\n    public isType: TypeNode,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.INSTANCEOF, range);\n  }\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Integer value. */\n    public value: i64,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.INTEGER, range);\n  }\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends Expression {\n  constructor(\n    /** Type being constructed. */\n    public typeName: TypeName,\n    /** Provided type arguments. */\n    public typeArguments: TypeNode[] | null,\n    /** Provided arguments. */\n    public args: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NEW, range);\n  }\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments !== null && (numTypeArguments = typeArguments.length) > 0) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.args;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"null\", false, range);\n    this.kind = NodeKind.NULL;\n  }\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Field names. */\n    public names: IdentifierExpression[],\n    /** Field values. */\n    public values: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.OBJECT, range);\n  }\n}\n\n/** Represents an omitted expression, e.g. within an array literal. */\nexport class OmittedExpression extends Expression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.OMITTED, range);\n  }\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  constructor(\n    /** Expression in parenthesis. */\n    public expression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PARENTHESIZED, range);\n  }\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  constructor(\n    /** Expression being accessed. */\n    public expression: Expression,\n    /** Property of the expression being accessed. */\n    public property: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PROPERTYACCESS, range);\n  }\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Regular expression pattern. */\n    public pattern: string,\n    /** Regular expression flags. */\n    public patternFlags: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.REGEXP, range);\n  }\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Expression executed when condition is `true`. */\n    public ifThen: Expression,\n    /** Expression executed when condition is `false`. */\n    public ifElse: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TERNARY, range);\n  }\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  constructor(\n    /** String value without quotes. */\n    public value: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.STRING, range);\n  }\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"super\", false, range);\n    this.kind = NodeKind.SUPER;\n  }\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"this\", false, range);\n    this.kind = NodeKind.THIS;\n  }\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"true\", false, range);\n    this.kind = NodeKind.TRUE;\n  }\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"false\", false, range);\n    this.kind = NodeKind.FALSE;\n  }\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n  constructor(\n    /** Unary expression kind. */\n    kind: NodeKind,\n    /** Operator token. */\n    public operator: Token,\n    /** Operand expression. */\n    public operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  constructor(\n    /** Operator token. */\n    operator: Token,\n    /** Operand expression. */\n    operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.UNARYPOSTFIX, operator, operand, range);\n  }\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  constructor(\n    /** Operator token. */\n    operator: Token,\n    /** Operand expression. */\n    operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.UNARYPREFIX, operator, operand, range);\n  }\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  constructor(\n    /** Source kind. */\n    public sourceKind: SourceKind,\n    /** Normalized path with file extension. */\n    public normalizedPath: string,\n    /** Full source text. */\n    public text: string\n  ) {\n    super(NodeKind.SOURCE, new Range(0, text.length));\n    var internalPath = mangleInternalPath(normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.range.source = this;\n  }\n\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[] = new Array();\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: string[] | null = null;\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n\n  /** Cached line starts. */\n  private lineCache: i32[] | null = null;\n\n  /** Remembered column number. */\n  private lineColumn: i32 = 1;\n\n  /** Determines the line number at the specified position. Starts at `1`. */\n  lineAt(pos: i32): i32 {\n    assert(pos >= 0 && pos < 0x7fffffff);\n    var lineCache = this.lineCache;\n    if (!lineCache) {\n      this.lineCache = lineCache = [0];\n      let text = this.text;\n      let off = 0;\n      let end = text.length;\n      while (off < end) {\n        if (text.charCodeAt(off++) == CharCode.LINEFEED) lineCache.push(off);\n      }\n      lineCache.push(0x7fffffff);\n    }\n    var l = 0;\n    var r = lineCache.length - 1;\n    while (l < r) {\n      let m = l + ((r - l) >> 1);\n      let s = unchecked(lineCache[m]);\n      if (pos < s) r = m;\n      else if (pos < unchecked(lineCache[m + 1])) {\n        this.lineColumn = pos - s + 1;\n        return m + 1;\n      }\n      else l = m + 1;\n    }\n    return assert(0);\n  }\n\n  /** Gets the column number at the last position queried with `lineAt`. Starts at `1`. */\n  columnAt(): i32 {\n    return this.lineColumn;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  constructor(\n    /** Declaration node kind. */\n    kind: NodeKind,\n    /** Simple name being declared. */\n    public name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    public decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    public flags: CommonFlags,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature. */\nexport class IndexSignatureNode extends Node {\n  constructor(\n    /** Key type. */\n    public keyType: NamedTypeNode,\n    /** Value type. */\n    public valueType: TypeNode,\n    /** Common flags indicating specific traits. */\n    public flags: CommonFlags,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.INDEXSIGNATURE, range);\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n  constructor(\n    /** Variable-like declaration node kind. */\n    kind: NodeKind,\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    public type: TypeNode | null,\n    /** Initializer expression, if any. */\n    public initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, name, decorators, flags, range);\n  }\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  constructor(\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BLOCK, range);\n  }\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  constructor(\n    /** Target label, if any. */\n    public label: IdentifierExpression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BREAK, range);\n  }\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Accepted type parameters. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Base class type being extended, if any. */\n    public extendsType: NamedTypeNode | null, // can't be a function\n    /** Interface types being implemented, if any. */\n    public implementsTypes: NamedTypeNode[] | null, // can't be functions\n    /** Class member declarations. */\n    public members: DeclarationStatement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CLASSDECLARATION, name, decorators, flags, range);\n  }\n\n  /** Index signature, if present. */\n  indexSignature: IndexSignatureNode | null = null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  constructor(\n    /** Target label, if applicable. */\n    public label: IdentifierExpression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CONTINUE, range);\n  }\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  constructor(\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Condition when to repeat. */\n    public condition: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.DO, range);\n  }\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EMPTY, range);\n  }\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Enum value declarations. */\n    public values: EnumValueDeclaration[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ENUMDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ENUMVALUEDECLARATION, name, null, flags, null, initializer, range);\n  }\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Statement {\n  constructor(\n    /** Identifier being imported. */\n    public name: IdentifierExpression,\n    /** Identifier being exported. */\n    public externalName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTIMPORT, range);\n  }\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  constructor(\n    /** Local identifier. */\n    public localName: IdentifierExpression,\n    /** Exported identifier. */\n    public exportedName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTMEMBER, range);\n  }\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  constructor(\n    /** Array of members if a set of named exports, or `null` if a file export. */\n    public members: ExportMember[] | null,\n    /** Path being exported from, if applicable. */\n    public path: StringLiteralExpression | null,\n    /** Whether this is a declared export. */\n    public isDeclare: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORT, range);\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      this.internalPath = normalizedPath;\n    } else {\n      this.internalPath = null;\n    }\n  }\n\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  constructor(\n    /** Declaration being exported as default. */\n    public declaration: DeclarationStatement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTDEFAULT, range);\n  }\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  constructor(\n    /** Expression being used as a statement.*/\n    public expression: Expression\n  ) {\n    super(NodeKind.EXPRESSION, expression.range);\n  }\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    type: TypeNode | null,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n    public parameterIndex: i32,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FIELDDECLARATION, name, decorators, flags, type, initializer, range);\n  }\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  constructor(\n    /** Initializer statement, if present. Either a `VariableStatement` or `ExpressionStatement`. */\n    public initializer: Statement | null,\n    /** Condition expression, if present. */\n    public condition: Expression | null,\n    /** Incrementor expression, if present. */\n    public incrementor: Expression | null,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FOR, range);\n  }\n}\n\n/** Represents a `for..of` statement. */\nexport class ForOfStatement extends Statement {\n  constructor(\n    /** Variable statement. Either a `VariableStatement` or `ExpressionStatement` of `IdentifierExpression`. */\n    public variable: Statement,\n    /** Iterable expression being iterated. */\n    public iterable: Expression,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FOROF, range);\n  }\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Function signature. */\n    public signature: FunctionTypeNode,\n    /** Body statement. Usually a block. */\n    public body: Statement | null,\n    /** Arrow function kind, if applicable. */\n    public arrowKind: ArrowKind,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FUNCTIONDECLARATION, name, decorators, flags, range);\n  }\n\n  /** Gets if this function is generic. */\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return new FunctionDeclaration(\n      this.name,\n      this.decorators,\n      this.flags,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  constructor(\n    /** Condition. */\n    public condition: Expression,\n    /** Statement executed when condition is `true`. */\n    public ifTrue: Statement,\n    /** Statement executed when condition is `false`. */\n    public ifFalse: Statement | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IF, range);\n  }\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Identifier being imported. */\n    public foreignName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IMPORTDECLARATION, name, null, CommonFlags.NONE, range);\n  }\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  constructor(\n    /** Array of member declarations or `null` if an asterisk import. */\n    public declarations: ImportDeclaration[] | null,\n    /** Name of the local namespace, if an asterisk import. */\n    public namespaceName: IdentifierExpression | null,\n    /** Path being imported from. */\n    public path: StringLiteralExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IMPORT, range);\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    this.internalPath = normalizedPath;\n  }\n\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Accepted type parameters. */\n    typeParameters: TypeParameterNode[] | null,\n    /** Base class type being extended, if any. */\n    extendsType: NamedTypeNode | null, // can't be a function\n    /** Interface types being implemented, if any. */\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    /** Class member declarations. */\n    members: DeclarationStatement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n    this.kind = NodeKind.INTERFACEDECLARATION;\n  }\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    typeParameters: TypeParameterNode[] | null,\n    /** Function signature. */\n    signature: FunctionTypeNode,\n    /** Body statement. Usually a block. */\n    body: Statement | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(name, decorators, flags, typeParameters, signature, body, ArrowKind.NONE, range);\n    this.kind = NodeKind.METHODDECLARATION;\n  }\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Array of namespace members. */\n    public members: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NAMESPACEDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  constructor(\n    /** Value expression being returned, if present. */\n    public value: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.RETURN, range);\n  }\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  constructor(\n    /** Label expression. `null` indicates the default case. */\n    public label: Expression | null,\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.SWITCHCASE, range);\n  }\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Contained cases. */\n    public cases: SwitchCase[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.SWITCH, range);\n  }\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  constructor(\n    /** Value expression being thrown. */\n    public value: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.THROW, range);\n  }\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  constructor(\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Exception variable name, if a `catch` clause is present. */\n    public catchVariable: IdentifierExpression | null,\n    /** Statements being executed on catch, if a `catch` clause is present. */\n    public catchStatements: Statement[] | null,\n    /** Statements being executed afterwards, if a `finally` clause is present. */\n    public finallyStatements: Statement[] | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TRY, range);\n  }\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Type being aliased. */\n    public type: TypeNode,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPEDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    type: TypeNode | null,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VARIABLEDECLARATION, name, decorators, flags, type, initializer, range);\n  }\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  constructor(\n    /** Array of decorators. */\n    public decorators: DecoratorNode[] | null,\n    /** Array of member declarations. */\n    public declarations: VariableDeclaration[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VARIABLE, range);\n  }\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  constructor(\n    /** Expression being dropped. */\n    public expression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VOID, range);\n  }\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.WHILE, range);\n  }\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  var pos = path.lastIndexOf(\".\");\n  var len = path.length;\n  if (pos >= 0 && len - pos >= 2) { // at least one char plus dot\n    let cur = pos;\n    while (++cur < len) {\n      if (!isTrivialAlphanum(path.charCodeAt(cur))) {\n        assert(false); // not a valid external path\n        return path;\n      }\n    }\n    return path.substring(0, pos);\n  }\n  assert(false); // not an external path\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next !== null || name.identifier.text.length > 0);\n  }\n  return false;\n}\n","/**\n * @fileoverview A TypeScript tokenizer modified for AssemblyScript.\n *\n * The `Tokenizer` scans over a source file and returns one syntactic token\n * at a time that the parser will combine to an abstract syntax tree.\n *\n * It skips over trivia like comments and whitespace and provides a general\n * mark/reset mechanism for the parser to utilize on ambiguous tokens, with\n * one token of lookahead otherwise.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      if (text == \"abstract\") return Token.ABSTRACT;\n      if (text == \"as\") return Token.AS;\n      if (text == \"async\") return Token.ASYNC;\n      if (text == \"await\") return Token.AWAIT;\n      break;\n    }\n    case CharCode.b: {\n      if (text == \"break\") return Token.BREAK;\n      break;\n    }\n    case CharCode.c: {\n      if (text == \"case\") return Token.CASE;\n      if (text == \"catch\") return Token.CATCH;\n      if (text == \"class\") return Token.CLASS;\n      if (text == \"continue\") return Token.CONTINUE;\n      if (text == \"const\") return Token.CONST;\n      if (text == \"constructor\") return Token.CONSTRUCTOR;\n      break;\n    }\n    case CharCode.d: {\n      if (text == \"debugger\") return Token.DEBUGGER;\n      if (text == \"declare\") return Token.DECLARE;\n      if (text == \"default\") return Token.DEFAULT;\n      if (text == \"delete\") return Token.DELETE;\n      if (text == \"do\") return Token.DO;\n      break;\n    }\n    case CharCode.e: {\n      if (text == \"else\") return Token.ELSE;\n      if (text == \"enum\") return Token.ENUM;\n      if (text == \"export\") return Token.EXPORT;\n      if (text == \"extends\") return Token.EXTENDS;\n      break;\n    }\n    case CharCode.f: {\n      if (text == \"false\") return Token.FALSE;\n      if (text == \"finally\") return Token.FINALLY;\n      if (text == \"for\") return Token.FOR;\n      if (text == \"from\") return Token.FROM;\n      if (text == \"function\") return Token.FUNCTION;\n      break;\n    }\n    case CharCode.g: {\n      if (text == \"get\") return Token.GET;\n      break;\n    }\n    case CharCode.i: {\n      if (text == \"if\") return Token.IF;\n      if (text == \"implements\") return Token.IMPLEMENTS;\n      if (text == \"import\") return Token.IMPORT;\n      if (text == \"in\") return Token.IN;\n      if (text == \"instanceof\") return Token.INSTANCEOF;\n      if (text == \"interface\") return Token.INTERFACE;\n      if (text == \"is\") return Token.IS;\n      break;\n    }\n    case CharCode.k: {\n      if (text == \"keyof\") return Token.KEYOF;\n      break;\n    }\n    case CharCode.l: {\n      if (text == \"let\") return Token.LET;\n      break;\n    }\n    case CharCode.m: {\n      if (text == \"module\") return Token.MODULE;\n      break;\n    }\n    case CharCode.n: {\n      if (text == \"namespace\") return Token.NAMESPACE;\n      if (text == \"new\") return Token.NEW;\n      if (text == \"null\") return Token.NULL;\n      break;\n    }\n    case CharCode.o: {\n      if (text == \"of\") return Token.OF;\n      break;\n    }\n    case CharCode.p: {\n      if (text == \"package\") return Token.PACKAGE;\n      if (text == \"private\") return Token.PRIVATE;\n      if (text == \"protected\") return Token.PROTECTED;\n      if (text == \"public\") return Token.PUBLIC;\n      break;\n    }\n    case CharCode.r: {\n      if (text == \"readonly\") return Token.READONLY;\n      if (text == \"return\") return Token.RETURN;\n      break;\n    }\n    case CharCode.s: {\n      if (text == \"set\") return Token.SET;\n      if (text == \"static\") return Token.STATIC;\n      if (text == \"super\") return Token.SUPER;\n      if (text == \"switch\") return Token.SWITCH;\n      break;\n    }\n    case CharCode.t: {\n      if (text == \"this\") return Token.THIS;\n      if (text == \"throw\") return Token.THROW;\n      if (text == \"true\") return Token.TRUE;\n      if (text == \"try\") return Token.TRY;\n      if (text == \"type\") return Token.TYPE;\n      if (text == \"typeof\") return Token.TYPEOF;\n      break;\n    }\n    case CharCode.v: {\n      if (text == \"var\") return Token.VAR;\n      if (text == \"void\") return Token.VOID;\n      break;\n    }\n    case CharCode.w: {\n      if (text == \"while\") return Token.WHILE;\n      if (text == \"with\") return Token.WITH;\n      break;\n    }\n    case CharCode.y: {\n      if (text == \"yield\") return Token.YIELD;\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  start: i32;\n  end: i32;\n  source!: Source;\n  debugInfoRef: usize = 0;\n\n  constructor(start: i32, end: i32) {\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    let range = new Range(\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n    range.source = a.source;\n    return range;\n  }\n\n  equals(other: Range): bool {\n    return this.source == other.source && this.start == other.start && this.end == other.end;\n  }\n\n  get atStart(): Range {\n    let range = new Range(this.start, this.start);\n    range.source = this.source;\n    return range;\n  }\n\n  get atEnd(): Range {\n    let range = new Range(this.end, this.end);\n    range.source = this.source;\n    return range;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n}\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    if (!diagnostics) diagnostics = [];\n    this.diagnostics = diagnostics;\n    this.source = source;\n\n    var text = source.text;\n    var end = text.length;\n    var pos = 0;\n    // skip bom\n    if (\n      pos < end &&\n      text.charCodeAt(pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++pos;\n    }\n\n    // skip shebang\n    if (\n      pos + 1 < end &&\n      text.charCodeAt(pos) == CharCode.HASH &&\n      text.charCodeAt(pos + 1) == CharCode.EXCLAMATION\n    ) {\n      pos += 2;\n      while (\n        pos < end &&\n        text.charCodeAt(pos) != CharCode.LINEFEED\n      ) {\n        ++pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n    this.pos = pos;\n    this.end = end;\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    var token: Token;\n    do token = this.unsafeNext(identifierHandling);\n    while (token == Token.INVALID);\n    this.token = token;\n    return token;\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    var end = this.end;\n    var pos = this.pos;\n    while (pos < end) {\n      this.tokenPos = pos;\n      let c = text.charCodeAt(pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++pos < end &&\n            text.charCodeAt(pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++pos;\n          if (\n            maxTokenLength > 1 && pos < end &&\n            text.charCodeAt(pos) == CharCode.EQUALS\n          ) {\n            ++pos;\n            if (\n              maxTokenLength > 2 && pos < end &&\n              text.charCodeAt(pos) == CharCode.EQUALS\n            ) {\n              this.pos = pos + 1;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            this.pos = pos;\n            return Token.EXCLAMATION_EQUALS;\n          }\n          this.pos = pos;\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          this.pos = pos;\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++pos;\n          if (\n            maxTokenLength > 1 && pos < end &&\n            text.charCodeAt(pos) == CharCode.EQUALS\n          ) {\n            this.pos = pos + 1;\n            return Token.PERCENT_EQUALS;\n          }\n          this.pos = pos;\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.AMPERSAND) {\n              this.pos = pos + 1;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          this.pos = pos + 1;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          this.pos = pos + 1;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++pos;\n              if (\n                maxTokenLength > 2 && pos < end &&\n                text.charCodeAt(pos) == CharCode.EQUALS\n              ) {\n                this.pos = pos + 1;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              this.pos = pos;\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          this.pos = pos;\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.PLUS) {\n              this.pos = pos + 1;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          this.pos = pos + 1;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.MINUS) {\n              this.pos = pos + 1;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (isDecimalDigit(chr)) {\n              this.pos = pos - 1;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(pos + 1) == CharCode.DOT\n            ) {\n              this.pos = pos + 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          this.pos = pos;\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = pos;\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                pos + 1 < end &&\n                text.charCodeAt(pos + 1) == CharCode.SLASH\n              ) {\n                ++pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++pos < end) {\n                if (text.charCodeAt(pos) == CharCode.LINEFEED) {\n                  ++pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, pos),\n                  this.range(commentStartPos, pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++pos < end) {\n                c = text.charCodeAt(pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  pos + 1 < end &&\n                  text.charCodeAt(pos + 1) == CharCode.SLASH\n                ) {\n                  pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, pos),\n                  this.range(commentStartPos, pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          this.pos = pos;\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          this.pos = pos + 1;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          this.pos = pos + 1;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++pos;\n              if (\n                maxTokenLength > 2 &&\n                pos < end &&\n                text.charCodeAt(pos) == CharCode.EQUALS\n              ) {\n                this.pos = pos + 1;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              this.pos = pos;\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.EQUALS) {\n              ++pos;\n              if (\n                maxTokenLength > 2 &&\n                pos < end &&\n                text.charCodeAt(pos) == CharCode.EQUALS\n              ) {\n                this.pos = pos + 1;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              this.pos = pos;\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              this.pos = pos + 1;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          this.pos = pos;\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++pos;\n              if (maxTokenLength > 2 && pos < end) {\n                chr = text.charCodeAt(pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++pos;\n                  if (\n                    maxTokenLength > 3 && pos < end &&\n                    text.charCodeAt(pos) == CharCode.EQUALS\n                  ) {\n                    this.pos = pos + 1;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  this.pos = pos;\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  this.pos = pos + 1;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              this.pos = pos;\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          this.pos = pos + 1;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          this.pos = pos + 1;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          this.pos = pos + 1;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++pos;\n          if (\n            maxTokenLength > 1 && pos < end &&\n            text.charCodeAt(pos) == CharCode.EQUALS\n          ) {\n            this.pos = pos + 1;\n            return Token.CARET_EQUALS;\n          }\n          this.pos = pos;\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          this.pos = pos + 1;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.BAR) {\n              this.pos = pos + 1;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.BAR_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          this.pos = pos + 1;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          this.pos = pos + 1;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          this.pos = pos + 1;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = pos;\n              while (\n                ++pos < end &&\n                isIdentifierPart(c = text.charCodeAt(pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                this.pos = pos;\n                return keywordToken;\n              }\n              this.pos = pos = posBefore;\n            }\n            this.pos = pos;\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++pos;\n            break;\n          }\n          let start = pos++;\n          if ( // surrogate pair?\n            (c & 0xFC00) == 0xD800 && pos < end &&\n            ((text.charCodeAt(pos)) & 0xFC00) == 0xDC00\n          ) ++pos;\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(start, pos)\n          );\n          this.pos = pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    this.pos = pos;\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      let nextToken: Token;\n      do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      while (nextToken == Token.INVALID);\n      this.nextToken = nextToken;\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    if (token == Token.GREATERTHAN) {  // where parsing type arguments\n      maxCompoundLength = 1;\n    }\n    var nextToken: Token;\n    do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n    while (nextToken == Token.INVALID);\n    if (nextToken == token) {\n      this.token = token;\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state = reusableState;\n    if (state) {\n      reusableState = null;\n      state.pos = this.pos;\n      state.token = this.token;\n      state.tokenPos = this.tokenPos;\n    } else {\n      state = new State(this.pos, this.token, this.tokenPos);\n    }\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    let range = new Range(start, end);\n    range.source = this.source;\n    return range;\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var end = this.end;\n    var pos = this.pos;\n    var start = pos;\n    while (\n      ++pos < end &&\n      isIdentifierPart(text.charCodeAt(pos))\n    );\n    this.pos = pos;\n    return text.substring(start, pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var end = this.end;\n    var pos = this.pos;\n    var quote = text.charCodeAt(pos++);\n    var start = pos;\n    var result = \"\";\n    while (true) {\n      if (pos >= end) {\n        result += text.substring(start, pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(pos);\n      if (c == quote) {\n        result += text.substring(start, pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, pos);\n        this.pos = pos; // save\n        result += this.readEscapeSequence();\n        pos = this.pos; // restore\n        start = pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, pos)\n        );\n        break;\n      }\n      ++pos;\n    }\n    this.pos = pos;\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.x: {\n        return this.readHexadecimalEscape(); // \\xDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    if (pos + 1 < end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 2) | 32) {\n        case CharCode.x:\n        case CharCode.b:\n        case CharCode.o: return true;\n      }\n    }\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || (c | 32) == CharCode.e) return false;\n      if (c != CharCode._ && (c < CharCode._0 || c > CharCode._9)) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    if (pos + 2 < this.end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 1) | 32) {\n        case CharCode.x: {\n          this.pos = pos + 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b: {\n          this.pos = pos + 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o: {\n          this.pos = pos + 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(pos + 1))) {\n        let start = pos;\n        this.pos = pos + 1;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): i64 {\n    var text = this.source.text;\n    let pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readDecimalInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        } else if (pos - 1 == start && text.charCodeAt(pos - 1) == CharCode._0) {\n          this.error(\n            DiagnosticCode.Numeric_separators_are_not_allowed_here,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readOctalInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readBinaryInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    var text = this.source.text;\n    var end = this.end;\n    var start = this.pos;\n    var sepCount = this.readDecimalFloatPartial(false);\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      sepCount += this.readDecimalFloatPartial();\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if ((c | 32) == CharCode.e) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        sepCount += this.readDecimalFloatPartial();\n      }\n    }\n    let result = text.substring(start, this.pos);\n    if (sepCount) result = result.replaceAll(\"_\", \"\");\n    return parseFloat(result);\n  }\n\n  /** Reads past one section of a decimal float literal. Returns the number of separators encountered. */\n  private readDecimalFloatPartial(allowLeadingZeroSep: bool = true): u32 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var start = pos;\n    var end = this.end;\n    var sepEnd = start;\n    var sepCount = 0;\n\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n\n      if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        } else if (!allowLeadingZeroSep && pos - 1 == start && text.charCodeAt(pos - 1) == CharCode._0) {\n          this.error(\n            DiagnosticCode.Numeric_separators_are_not_allowed_here,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n        ++sepCount;\n      } else if (!isDecimalDigit(c)) {\n        break;\n      }\n      ++pos;\n    }\n\n    if (pos != start && sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n\n    this.pos = pos;\n    return sepCount;\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readHexadecimalEscape(remain: i32 = 2): string {\n    var value = 0;\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    while (pos < end) {\n      let c = text.charCodeAt(pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(pos - 1, pos)\n        );\n        this.pos = pos;\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(pos)\n      );\n      this.pos = pos;\n      return \"\";\n    }\n    this.pos = pos;\n    return String.fromCharCode(value);\n  }\n\n  readUnicodeEscape(): string {\n    return this.readHexadecimalEscape(4);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 0x10000\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 0x10000) >>> 10) | 0xD800,\n        ((value32 - 0x10000) & 1023) | 0xDC00\n      );\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  constructor(\n    /** Current position. */\n    public pos: i32,\n    /** Current token. */\n    public token: Token,\n    /** Current token's position. */\n    public tokenPos: i32\n  ) {}\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * @fileoverview AssemblyScript's intermediate representation.\n *\n * The compiler uses Binaryen IR, which is fairly low level, as its\n * primary intermediate representation, with the following structures\n * holding any higher level information that cannot be represented by\n * Binaryen IR alone, for example higher level types.\n *\n * Similar to the AST being composed of `Node`s in `Source`s, the IR is\n * composed of `Element`s in a `Program`. Each class or function is\n * represented by a \"prototype\" holding all the relevant information,\n * including each's concrete instances. If a class or function is not\n * generic, there is exactly one instance, otherwise there is one for\n * each concrete set of type arguments.\n *\n * @license Apache-2.0\n */\n\n// Element                    Base class of all elements\n// ├─DeclaredElement          Base class of elements with a declaration\n// │ ├─TypedElement           Base class of elements resolving to a type\n// │ │ ├─TypeDefinition       Type alias declaration\n// │ │ ├─VariableLikeElement  Base class of all variable-like elements\n// │ │ │ ├─EnumValue          Enum value\n// │ │ │ ├─Global             File global\n// │ │ │ ├─Local              Function local\n// │ │ │ ├─Field              Class field (instance only)\n// │ │ │ └─Property           Class property\n// │ │ ├─IndexSignature       Class index signature\n// │ │ ├─Function             Concrete function instance\n// │ │ └─Class                Concrete class instance\n// │ ├─Namespace              Namespace with static members\n// │ ├─FunctionPrototype      Prototype of concrete function instances\n// │ ├─FieldPrototype         Prototype of concrete field instances\n// │ ├─PropertyPrototype      Prototype of concrete property instances\n// │ └─ClassPrototype         Prototype of concrete classe instances\n// └─File                     File, analogous to Source in the AST\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  STUB_DELIMITER,\n  CommonNames,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  Signature,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportDefaultStatement,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n  ParameterKind\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef,\n  MemorySegment\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  writeI64,\n  writeI32AsI64,\n  writeI64AsI32\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Compiler options. */\n    public options: Options,\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(SourceKind.LIBRARY_ENTRY, LIBRARY_SUBST + \".wasm\", \"[native code]\");\n    this.nativeSource = nativeSource;\n    this.parser = new Parser(this.diagnostics, this.sources);\n    this.resolver = new Resolver(this);\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n  }\n\n  /** Parser instance. */\n  parser: Parser;\n  /** Resolver instance. */\n  resolver!: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile!: File;\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** An indicator if the program has been initialized. */\n  initialized: bool = false;\n\n  // Lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // Standard library\n\n  /** Gets the standard `ArrayBufferView` instance. */\n  get arrayBufferViewInstance(): Class {\n    var cached = this._arrayBufferViewInstance;\n    if (!cached) this._arrayBufferViewInstance = cached = this.requireClass(CommonNames.ArrayBufferView);\n    return cached;\n  }\n  private _arrayBufferViewInstance: Class | null = null;\n\n  /** Gets the standard `ArrayBuffer` instance. */\n  get arrayBufferInstance(): Class {\n    var cached = this._arrayBufferInstance;\n    if (!cached) this._arrayBufferInstance = cached = this.requireClass(CommonNames.ArrayBuffer);\n    return cached;\n  }\n  private _arrayBufferInstance: Class | null = null;\n\n  /** Gets the standard `Array` prototype. */\n  get arrayPrototype(): ClassPrototype {\n    var cached = this._arrayPrototype;\n    if (!cached) this._arrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _arrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `StaticArray` prototype. */\n  get staticArrayPrototype(): ClassPrototype {\n    var cached = this._staticArrayPrototype;\n    if (!cached) this._staticArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.StaticArray, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _staticArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Set` prototype. */\n  get setPrototype(): ClassPrototype {\n    var cached = this._setPrototype;\n    if (!cached) this._setPrototype = cached = <ClassPrototype>this.require(CommonNames.Set, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _setPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Map` prototype. */\n  get mapPrototype(): ClassPrototype {\n    var cached = this._mapPrototype;\n    if (!cached) this._mapPrototype = cached = <ClassPrototype>this.require(CommonNames.Map, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _mapPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Function` prototype. */\n  get functionPrototype(): ClassPrototype {\n    var cached = this._functionPrototype;\n    if (!cached) this._functionPrototype = cached = <ClassPrototype>this.require(CommonNames.Function, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _functionPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int8Array` prototype. */\n  get int8ArrayPrototype(): ClassPrototype {\n    var cached = this._int8ArrayPrototype;\n    if (!cached) this._int8ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int8ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int16Array` prototype. */\n  get int16ArrayPrototype(): ClassPrototype {\n    var cached = this._int16ArrayPrototype;\n    if (!cached) this._int16ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int16ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int32Array` prototype. */\n  get int32ArrayPrototype(): ClassPrototype {\n    var cached = this._int32ArrayPrototype;\n    if (!cached) this._int32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int64Array` prototype. */\n  get int64ArrayPrototype(): ClassPrototype {\n    var cached = this._int64ArrayPrototype;\n    if (!cached) this._int64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint8Array` prototype. */\n  get uint8ArrayPrototype(): ClassPrototype {\n    var cached = this._uint8ArrayPrototype;\n    if (!cached) this._uint8ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint8ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint8ClampedArray` prototype. */\n  get uint8ClampedArrayPrototype(): ClassPrototype {\n    var cached = this._uint8ClampedArrayPrototype;\n    if (!cached) this._uint8ClampedArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint8ClampedArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint16Array` prototype. */\n  get uint16ArrayPrototype(): ClassPrototype {\n    var cached = this._uint16ArrayPrototype;\n    if (!cached) this._uint16ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint16ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint32Array` prototype. */\n  get uint32ArrayPrototype(): ClassPrototype {\n    var cached = this._uint32ArrayPrototype;\n    if (!cached) this._uint32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint64Array` prototype. */\n  get uint64ArrayPrototype(): ClassPrototype {\n    var cached = this._uint64ArrayPrototype;\n    if (!cached) this._uint64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Float32Array` prototype. */\n  get float32ArrayPrototype(): ClassPrototype {\n    var cached = this._float32ArrayPrototype;\n    if (!cached) this._float32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _float32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Float64Array` prototype. */\n  get float64ArrayPrototype(): ClassPrototype {\n    var cached = this._float64ArrayPrototype;\n    if (!cached) this._float64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Float64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _float64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `String` instance. */\n  get stringInstance(): Class {\n    var cached = this._stringInstance;\n    if (!cached) this._stringInstance = cached = this.requireClass(CommonNames.String);\n    return cached;\n  }\n  private _stringInstance: Class | null = null;\n\n  /** Gets the standard `abort` instance, if not explicitly disabled. */\n  get abortInstance(): Function | null {\n    return this.lookupFunction(CommonNames.abort);\n  }\n\n  // Runtime interface\n\n  /** Gets the runtime `__alloc(size: usize): usize` instance. */\n  get allocInstance(): Function {\n    var cached = this._allocInstance;\n    if (!cached) this._allocInstance = cached = this.requireFunction(CommonNames.alloc);\n    return cached;\n  }\n  private _allocInstance: Function | null = null;\n\n  /** Gets the runtime `__realloc(ptr: usize, newSize: usize): usize` instance. */\n  get reallocInstance(): Function {\n    var cached = this._reallocInstance;\n    if (!cached) this._reallocInstance = cached = this.requireFunction(CommonNames.realloc);\n    return cached;\n  }\n  private _reallocInstance: Function | null = null;\n\n  /** Gets the runtime `__free(ptr: usize): void` instance. */\n  get freeInstance(): Function {\n    var cached = this._freeInstance;\n    if (!cached) this._freeInstance = cached = this.requireFunction(CommonNames.free);\n    return cached;\n  }\n  private _freeInstance: Function | null = null;\n\n  /** Gets the runtime `__new(size: usize, id: u32): usize` instance. */\n  get newInstance(): Function {\n    var cached = this._newInstance;\n    if (!cached) this._newInstance = cached = this.requireFunction(CommonNames.new_);\n    return cached;\n  }\n  private _newInstance: Function | null = null;\n\n  /** Gets the runtime `__renew(ptr: usize, size: usize): usize` instance. */\n  get renewInstance(): Function {\n    var cached = this._renewInstance;\n    if (!cached) this._renewInstance = cached = this.requireFunction(CommonNames.renew);\n    return cached;\n  }\n  private _renewInstance: Function | null = null;\n\n  /** Gets the runtime `__retain(ptr: usize): usize` instance. */\n  get retainInstance(): Function {\n    var cached = this._retainInstance;\n    if (!cached) this._retainInstance = cached = this.requireFunction(CommonNames.retain);\n    return cached;\n  }\n  private _retainInstance: Function | null = null;\n\n  /** Gets the runtime `__release(ptr: usize): void` instance. */\n  get releaseInstance(): Function {\n    var cached = this._releaseInstance;\n    if (!cached) this._releaseInstance = cached = this.requireFunction(CommonNames.release);\n    return cached;\n  }\n  private _releaseInstance: Function | null = null;\n\n  /** Gets the runtime `__collect(): void` instance. */\n  get collectInstance(): Function {\n    var cached = this._collectInstance;\n    if (!cached) this._collectInstance = cached = this.requireFunction(CommonNames.collect);\n    return cached;\n  }\n  private _collectInstance: Function | null = null;\n\n  /** Gets the runtime `__visit(ptr: usize, cookie: u32): void` instance. */\n  get visitInstance(): Function {\n    var cached = this._visitInstance;\n    if (!cached) this._visitInstance = cached = this.requireFunction(CommonNames.visit);\n    return cached;\n  }\n  private _visitInstance: Function | null = null;\n\n  /** Gets the runtime `__typeinfo(id: u32): RTTIFlags` instance. */\n  get typeinfoInstance(): Function {\n    var cached = this._typeinfoInstance;\n    if (!cached) this._typeinfoInstance = cached = this.requireFunction(CommonNames.typeinfo);\n    return cached;\n  }\n  private _typeinfoInstance: Function | null = null;\n\n  /** Gets the runtime `__instanceof(ptr: usize, superId: u32): bool` instance. */\n  get instanceofInstance(): Function {\n    var cached = this._instanceofInstance;\n    if (!cached) this._instanceofInstance = cached = this.requireFunction(CommonNames.instanceof_);\n    return cached;\n  }\n  private _instanceofInstance: Function | null = null;\n\n  /** Gets the runtime `__newBuffer(size: usize, id: u32, data: usize = 0): usize` instance. */\n  get newBufferInstance(): Function {\n    var cached = this._newBufferInstance;\n    if (!cached) this._newBufferInstance = cached = this.requireFunction(CommonNames.newBuffer);\n    return cached;\n  }\n  private _newBufferInstance: Function | null = null;\n\n  /** Gets the runtime `__newArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` instance. */\n  get newArrayInstance(): Function {\n    var cached = this._newArrayInstance;\n    if (!cached) this._newArrayInstance = cached = this.requireFunction(CommonNames.newArray);\n    return cached;\n  }\n  private _newArrayInstance: Function | null = null;\n\n  /** Gets the runtime's internal `BLOCK` instance. */\n  get BLOCKInstance(): Class {\n    var cached = this._BLOCKInstance;\n    if (!cached) this._BLOCKInstance = cached = this.requireClass(CommonNames.BLOCK);\n    return cached;\n  }\n  private _BLOCKInstance: Class | null = null;\n\n  /** Gets the runtime's internal `OBJECT` instance. */\n  get OBJECTInstance(): Class {\n    var cached = this._OBJECTInstance;\n    if (!cached) this._OBJECTInstance = cached = this.requireClass(CommonNames.OBJECT);\n    return cached;\n  }\n  private _OBJECTInstance: Class | null = null;\n\n  // Utility\n\n  /** Tests whether this is a WASI program. */\n  get isWasi(): bool {\n    return this.elementsByName.has(CommonNames.ASC_WASI);\n  }\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    var cached = this._runtimeHeaderSize;\n    if (!cached) {\n      // see: rt/common.ts\n      var blockOverhead = this.BLOCKInstance.nextMemoryOffset;\n      var totalOverhead = this.OBJECTInstance.nextMemoryOffset;\n      const AL_SIZE = 16;\n      const AL_MASK = AL_SIZE - 1;\n      var objectOverhead = (totalOverhead - blockOverhead + AL_MASK) & ~AL_MASK;\n      var headerSize = blockOverhead + objectOverhead;\n      assert(headerSize == 20);\n      this._runtimeHeaderSize = cached = headerSize;\n    }\n    return cached;\n  }\n  private _runtimeHeaderSize: u32 = 0;\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, null, null, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null, flags, null,\n      Node.createOmittedType(range),\n      range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    var signature = this.nativeDummySignature;\n    if (!signature) {\n      this.nativeDummySignature = signature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonNames.void_, range),\n          null, false, range\n        ),\n        null, false, range\n      );\n    }\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, null, signature, null, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, [], range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      null,\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? assert(elementsByDeclaration.get(declaration))\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(): void {\n    if (this.initialized) return;\n    this.initialized = true;\n\n    var options = this.options;\n\n    // register native types\n    this.registerNativeType(CommonNames.i8, Type.i8);\n    this.registerNativeType(CommonNames.i16, Type.i16);\n    this.registerNativeType(CommonNames.i32, Type.i32);\n    this.registerNativeType(CommonNames.i64, Type.i64);\n    this.registerNativeType(CommonNames.isize, options.isizeType);\n    this.registerNativeType(CommonNames.u8, Type.u8);\n    this.registerNativeType(CommonNames.u16, Type.u16);\n    this.registerNativeType(CommonNames.u32, Type.u32);\n    this.registerNativeType(CommonNames.u64, Type.u64);\n    this.registerNativeType(CommonNames.usize, options.usizeType);\n    this.registerNativeType(CommonNames.bool, Type.bool);\n    this.registerNativeType(CommonNames.f32, Type.f32);\n    this.registerNativeType(CommonNames.f64, Type.f64);\n    this.registerNativeType(CommonNames.void_, Type.void);\n    this.registerNativeType(CommonNames.number, Type.f64); // alias\n    this.registerNativeType(CommonNames.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonNames.native, new TypeDefinition(\n      CommonNames.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.indexof, new TypeDefinition(\n      CommonNames.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.valueof, new TypeDefinition(\n      CommonNames.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.returnof, new TypeDefinition(\n      CommonNames.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n\n    // The following types might not be enabled by compiler options, so the\n    // compiler needs to check this condition whenever such a value is created\n    // respectively stored or loaded.\n    this.registerNativeType(CommonNames.v128, Type.v128);\n    this.registerNativeType(CommonNames.funcref, Type.funcref);\n    this.registerNativeType(CommonNames.externref, Type.externref);\n    this.registerNativeType(CommonNames.exnref, Type.exnref);\n    this.registerNativeType(CommonNames.anyref, Type.anyref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonNames.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonNames.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_TABLE_BASE, Type.i32,\n      i64_new(options.tableBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_LOW_MEMORY_LIMIT, Type.i32,\n      i64_new(options.lowMemoryLimit, 0));\n\n    // register feature hints\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MULTI_VALUE, Type.bool,\n      i64_new(options.hasFeature(Feature.MULTI_VALUE) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_GC, Type.bool,\n      i64_new(options.hasFeature(Feature.GC) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MEMORY64, Type.bool,\n      i64_new(options.hasFeature(Feature.MEMORY64) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file, queuedExtends);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    // TODO: for (let [file, starExports] of queuedExportsStar) {\n    for (let _keys = Map_keys(queuedExportsStar), i = 0, k = _keys.length; i < k; ++i) {\n      let file = _keys[i];\n      let starExports = assert(queuedExportsStar.get(file));\n      for (let j = 0, l = starExports.length; j < l; ++j) {\n        let exportStar = unchecked(starExports[j]);\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports.\n    // note that imports may depend upon imports, so repeat until there's no more progress.\n    do {\n      let i = 0, madeProgress = false;\n      while (i < queuedImports.length) {\n        let queuedImport = queuedImports[i];\n        let localIdentifier = queuedImport.localIdentifier;\n        let foreignIdentifier = queuedImport.foreignIdentifier;\n        if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            foreignIdentifier.text,\n            queuedImport.foreignPath,\n            queuedImport.foreignPathAlt,\n            queuedExports\n          );\n          if (element) {\n            queuedImport.localFile.add(\n              localIdentifier.text,\n              element,\n              localIdentifier // isImport\n            );\n            queuedImports.splice(i, 1);\n            madeProgress = true;\n          } else {\n            ++i;\n          }\n        } else { // i.e. import * as bar from \"./bar\"\n          let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n          if (foreignFile) {\n            let localFile = queuedImport.localFile;\n            let localName = localIdentifier.text;\n            localFile.add(\n              localName,\n              foreignFile.asAliasNamespace(\n                localName,\n                localFile,\n                localIdentifier\n              ),\n              localIdentifier // isImport\n            );\n            queuedImports.splice(i, 1);\n            madeProgress = true;\n          } else {\n            ++i;\n            assert(false); // already reported by the parser not finding the file\n          }\n        }\n      }\n      if (!madeProgress) {\n        // report queued imports we were unable to resolve\n        for (let j = 0, l = queuedImports.length; j < l; ++j) {\n          let queuedImport = queuedImports[j];\n          let foreignIdentifier = queuedImport.foreignIdentifier;\n          if (foreignIdentifier) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n            );\n          }\n        }\n        break;\n      }\n    } while (true);\n\n    // queued exports should be resolvable now that imports are finalized\n    // TODO: for (let [file, exports] of queuedExports) {\n    for (let _keys = Map_keys(queuedExports), i = 0, k = _keys.length; i < k; ++i) {\n      let file = unchecked(_keys[i]);\n      let exports = assert(queuedExports.get(file));\n      // TODO: for (let [exportName, queuedExport] of exports) {\n      for (let exportNames = Map_keys(exports), j = 0, l = exportNames.length; j < l; ++j) {\n        let exportName = unchecked(exportNames[j]);\n        let queuedExport = assert(exports.get(exportName));\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement !== null && isDeclaredElement(globalElement.kind)) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.arrayBufferInstance.id == 0);\n    assert(this.stringInstance.id == 1);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonNames.I8);\n    this.registerWrapperClass(Type.i16, CommonNames.I16);\n    this.registerWrapperClass(Type.i32, CommonNames.I32);\n    this.registerWrapperClass(Type.i64, CommonNames.I64);\n    this.registerWrapperClass(options.isizeType, CommonNames.Isize);\n    this.registerWrapperClass(Type.u8, CommonNames.U8);\n    this.registerWrapperClass(Type.u16, CommonNames.U16);\n    this.registerWrapperClass(Type.u32, CommonNames.U32);\n    this.registerWrapperClass(Type.u64, CommonNames.U64);\n    this.registerWrapperClass(options.usizeType, CommonNames.Usize);\n    this.registerWrapperClass(Type.bool, CommonNames.Bool);\n    this.registerWrapperClass(Type.f32, CommonNames.F32);\n    this.registerWrapperClass(Type.f64, CommonNames.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonNames.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) {\n      this.registerWrapperClass(Type.funcref, CommonNames.Funcref);\n      this.registerWrapperClass(Type.externref, CommonNames.Externref);\n      if (options.hasFeature(Feature.EXCEPTION_HANDLING)) {\n        this.registerWrapperClass(Type.exnref, CommonNames.Exnref);\n      }\n      if (options.hasFeature(Feature.GC)) {\n        this.registerWrapperClass(Type.anyref, CommonNames.Anyref);\n      }\n    }\n\n    // resolve prototypes of extended classes or interfaces\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent);\n      if (!baseElement) continue;\n      if (thisPrototype.kind == ElementKind.CLASS_PROTOTYPE) {\n        if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n          let basePrototype = <ClassPrototype>baseElement;\n          if (basePrototype.hasDecorator(DecoratorFlags.FINAL)) {\n            this.error(\n              DiagnosticCode.Class_0_is_final_and_cannot_be_extended,\n              extendsNode.range, basePrototype.identifierNode.text\n            );\n          }\n          if (\n            basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n            thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n          ) {\n            this.error(\n              DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n              Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n            );\n          }\n          thisPrototype.basePrototype = basePrototype;\n        } else {\n          this.error(\n            DiagnosticCode.A_class_may_only_extend_another_class,\n            extendsNode.range\n          );\n        }\n      } else if (thisPrototype.kind == ElementKind.INTERFACE_PROTOTYPE) {\n        if (baseElement.kind == ElementKind.INTERFACE_PROTOTYPE) {\n          thisPrototype.basePrototype = <InterfacePrototype>baseElement;\n        } else {\n          this.error(\n            DiagnosticCode.An_interface_can_only_extend_an_interface,\n            extendsNode.range\n          );\n        }\n      }\n    }\n\n    // resolve prototypes of implemented interfaces\n    for (let i = 0, k = queuedImplements.length; i < k; ++i) {\n      let thisPrototype = queuedImplements[i];\n      let implementsNodes = assert(thisPrototype.implementsNodes); // must be present if in queuedImplements\n      for (let j = 0, l = implementsNodes.length; j < l; ++j) {\n        let implementsNode = implementsNodes[j];\n        let interfaceElement = resolver.resolveTypeName(implementsNode.name, thisPrototype.parent);\n        if (!interfaceElement) continue;\n        if (interfaceElement.kind == ElementKind.INTERFACE_PROTOTYPE) {\n          let interfacePrototype = <InterfacePrototype>interfaceElement;\n          let interfacePrototypes = thisPrototype.interfacePrototypes;\n          if (!interfacePrototypes) thisPrototype.interfacePrototypes = interfacePrototypes = new Array();\n          interfacePrototypes.push(interfacePrototype);\n        } else {\n          this.error(\n            DiagnosticCode.A_class_can_only_implement_an_interface,\n            implementsNode.range\n          );\n        }\n      }\n    }\n\n    // check for virtual overloads in extended classes and implemented interfaces\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let basePrototype = thisPrototype.basePrototype;\n      if (basePrototype) {\n        this.markVirtuals(thisPrototype, basePrototype);\n      }\n    }\n    for (let i = 0, k = queuedImplements.length; i < k; ++i) {\n      let thisPrototype = queuedImplements[i];\n      let basePrototype = thisPrototype.basePrototype;\n      let interfacePrototypes = thisPrototype.interfacePrototypes;\n      if (basePrototype) {\n        this.markVirtuals(thisPrototype, basePrototype);\n      }\n      if (interfacePrototypes) {\n        for (let j = 0, l = interfacePrototypes.length; j < l; ++j) {\n          this.markVirtuals(thisPrototype, interfacePrototypes[j]);\n        }\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (!globalAliases) globalAliases = new Map();\n      let isWasi = this.isWasi;\n      if (!globalAliases.has(CommonNames.abort)) {\n        globalAliases.set(CommonNames.abort,\n          isWasi\n            ? BuiltinNames.wasiAbort\n            : BuiltinNames.abort\n        );\n      }\n      if (!globalAliases.has(CommonNames.trace)) {\n        globalAliases.set(CommonNames.trace,\n          isWasi\n            ? BuiltinNames.wasiTrace\n            : BuiltinNames.trace\n        );\n      }\n      if (!globalAliases.has(CommonNames.seed)) {\n        globalAliases.set(CommonNames.seed,\n          isWasi\n            ? BuiltinNames.wasiSeed\n            : BuiltinNames.seed\n        );\n      }\n      if (!globalAliases.has(CommonNames.Math)) {\n        globalAliases.set(CommonNames.Math, CommonNames.NativeMath);\n      }\n      if (!globalAliases.has(CommonNames.Mathf)) {\n        globalAliases.set(CommonNames.Mathf, CommonNames.NativeMathf);\n      }\n      // TODO: for (let [alias, name] of globalAliases) {\n      for (let _keys = Map_keys(globalAliases), i = 0, k = _keys.length; i < k; ++i) {\n        let alias = unchecked(_keys[i]);\n        let name = changetype<string>(globalAliases.get(alias));\n        assert(name != null);\n        if (!name.length) {\n          this.elementsByName.delete(alias);\n          continue;\n        }\n        let firstChar = name.charCodeAt(0);\n        if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n          this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n        } else {\n          let elementsByName = this.elementsByName;\n          if (elementsByName.has(name)) {\n            elementsByName.set(alias, assert(elementsByName.get(name)));\n          } else {\n            throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    // TODO: for (let file of this.filesByName.values()) {\n    for (let _values = Map_values(this.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.markModuleExports(file);\n      }\n    }\n  }\n\n  /** Marks virtual members in a base class overloaded in this class. */\n  private markVirtuals(thisPrototype: ClassPrototype, basePrototype: ClassPrototype): void {\n    // TODO: make this work with interfaaces as well\n    var thisInstanceMembers = thisPrototype.instanceMembers;\n    if (thisInstanceMembers) {\n      do {\n        let baseInstanceMembers = basePrototype.instanceMembers;\n        if (baseInstanceMembers) {\n          for (let _values = Map_values(thisInstanceMembers), j = 0, l = _values.length; j < l; ++j) {\n            let thisMember = _values[j];\n            if (\n              !thisMember.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.PRIVATE) &&\n              baseInstanceMembers.has(thisMember.name)\n            ) {\n              let baseMember = assert(baseInstanceMembers.get(thisMember.name));\n              if (\n                thisMember.kind == ElementKind.FUNCTION_PROTOTYPE &&\n                baseMember.kind == ElementKind.FUNCTION_PROTOTYPE\n              ) {\n                let thisMethod = <FunctionPrototype>thisMember;\n                let baseMethod = <FunctionPrototype>baseMember;\n                if (!thisMethod.visibilityEquals(baseMethod)) {\n                  this.errorRelated(\n                    DiagnosticCode.Overload_signatures_must_all_be_public_private_or_protected,\n                    thisMethod.identifierNode.range, baseMethod.identifierNode.range\n                  );\n                }\n                baseMember.set(CommonFlags.VIRTUAL);\n                let overloads = baseMethod.overloads;\n                if (!overloads) baseMethod.overloads = overloads = new Set();\n                overloads.add(<FunctionPrototype>thisMember);\n                let baseMethodInstances = baseMethod.instances;\n                if (baseMethodInstances) {\n                  for (let _values = Map_values(baseMethodInstances), a = 0, b = _values.length; a < b; ++a) {\n                    let baseMethodInstance = _values[a];\n                    baseMethodInstance.set(CommonFlags.VIRTUAL);\n                  }\n                }\n              } else if (\n                thisMember.kind == ElementKind.PROPERTY_PROTOTYPE &&\n                baseMember.kind == ElementKind.PROPERTY_PROTOTYPE\n              ) {\n                let thisProperty = <PropertyPrototype>thisMember;\n                let baseProperty = <PropertyPrototype>baseMember;\n                if (!thisProperty.visibilityEquals(baseProperty)) {\n                  this.errorRelated(\n                    DiagnosticCode.Overload_signatures_must_all_be_public_private_or_protected,\n                    thisProperty.identifierNode.range, baseProperty.identifierNode.range\n                  );\n                }\n                baseProperty.set(CommonFlags.VIRTUAL);\n                let baseGetter = baseProperty.getterPrototype;\n                if (baseGetter) {\n                  baseGetter.set(CommonFlags.VIRTUAL);\n                  let thisGetter = thisProperty.getterPrototype;\n                  if (thisGetter) {\n                    let overloads = baseGetter.overloads;\n                    if (!overloads) baseGetter.overloads = overloads = new Set();\n                    overloads.add(thisGetter);\n                  }\n                  let baseGetterInstances = baseGetter.instances;\n                  if (baseGetterInstances) {\n                    for (let _values = Map_values(baseGetterInstances), a = 0, b = _values.length; a < b; ++a) {\n                      let baseGetterInstance = _values[a];\n                      baseGetterInstance.set(CommonFlags.VIRTUAL);\n                    }\n                  }\n                }\n                let baseSetter = baseProperty.setterPrototype;\n                if (baseSetter !== null && thisProperty.setterPrototype !== null) {\n                  baseSetter.set(CommonFlags.VIRTUAL);\n                  let thisSetter = thisProperty.setterPrototype;\n                  if (thisSetter) {\n                    let overloads = baseSetter.overloads;\n                    if (!overloads) baseSetter.overloads = overloads = new Set();\n                    overloads.add(thisSetter);\n                  }\n                  let baseSetterInstances = baseSetter.instances;\n                  if (baseSetterInstances) {\n                    for (let _values = Map_values(baseSetterInstances), a = 0, b = _values.length; a < b; ++a) {\n                      let baseSetterInstance = _values[a];\n                      baseSetterInstance.set(CommonFlags.VIRTUAL);\n                    }\n                  }\n                }\n              } else {\n                this.errorRelated(\n                  DiagnosticCode.Duplicate_identifier_0,\n                  thisMember.identifierNode.range,\n                  baseMember.identifierNode.range\n                );\n              }\n            }\n          }\n        }\n        let nextPrototype = basePrototype.basePrototype;\n        if (!nextPrototype) break;\n        basePrototype = nextPrototype;\n      } while (true);\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"Missing standard library component: \" + name);\n    if (element.kind != kind) throw Error(\"Invalid standard library component: \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"Invalid standard library class: \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a global function is present and returns it. */\n  private requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = <FunctionPrototype>this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(prototype, typeArguments);\n    if (!resolved) throw new Error(\"Invalid standard library function: \" + name);\n    return resolved;\n  }\n\n  /** Marks all exports of the specified file as module exports. */\n  private markModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), j = 0, l = _values.length; j < l; ++j) {\n        let element = unchecked(_values[j]);\n        this.markModuleExport(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.markModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) {\n          // TODO: for (let member of instanceMembers.values()) {\n          for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n            let member = unchecked(_values[i]);\n            this.markModuleExport(member);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>element;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    var staticMembers = element.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.markModuleExport(member);\n      }\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the wrapper class of a non-class type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.isInternalReference && !wrapperClasses.has(type));\n    var element = assert(this.lookupGlobal(className));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = assert(this.resolver.resolveClass(<ClassPrototype>element, null));\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  registerConstantInteger(name: string, type: Type, value: i64): void {\n    assert(type.isIntegerInclReference);\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.isFloatValue);\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = assert(elementsByName.get(name));\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n      ? assert(filesByName.get(foreignPath))\n      : filesByName.has(foreignPathAlt)\n        ? assert(filesByName.get(foreignPathAlt))\n        : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = assert(queuedExports.get(foreignFile));\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = assert(fileQueuedExports.get(foreignName));\n          let queuedExportForeignPath = queuedExport.foreignPath;\n          if (queuedExportForeignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExportForeignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.FINAL |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    // remember classes that implement interfaces\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (numImplementsTypes) {\n        // cannot implement interfaces when unmanaged\n        if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        } else {\n          queuedImplements.push(element);\n        }\n      }\n    }\n\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            let method = this.initializeMethod(methodDeclaration, element);\n            if (method !== null && methodDeclaration.name.kind == NodeKind.CONSTRUCTOR) {\n              element.constructorPrototype = method;\n            }\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATURE: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    var acceptedFlags: DecoratorFlags = DecoratorFlags.UNSAFE;\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      acceptedFlags |= DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.READONLY)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, acceptedFlags)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return null;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return null;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n    return element;\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let args = decorator.args;\n            let numArgs = args ? args.length : 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.args)[0];\n              if (firstArg.isLiteralKind(LiteralKind.STRING)) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString()\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = assert(queuedExportsStar.get(parent));\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = statement.internalPath!; // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent, queuedExtends);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = assert(exports.get(\"default\"));\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else {\n      let namespaceName = statement.namespaceName;\n      if (namespaceName) { // import * as foo from \"./bar\"\n        queuedImports.push(new QueuedImport(\n          parent,\n          namespaceName,\n          null, // indicates import *\n          statement.internalPath,\n          statement.internalPath + INDEX_SUFFIX\n        ));\n      } else {\n        // import \"./foo\"\n      }\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, declaration.name /* isImport */);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n      if (declaration.range.source.isLibrary || declaration.is(CommonFlags.EXPORT)) {\n        validDecorators |= DecoratorFlags.LAZY;\n      }\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    // remember interfaces that extend another interface\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeFieldAsProperty(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            this.initializeMethod(methodDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of an interface, as a property. */\n  private initializeFieldAsProperty(\n    /** Field declaration. */\n    declaration: FieldDeclaration,\n    /** Parent interface. */\n    parent: InterfacePrototype\n  ): void {\n    var typeNode = declaration.type;\n    if (!typeNode) typeNode = Node.createOmittedType(declaration.name.range.atEnd);\n    this.initializeProperty(\n      Node.createMethodDeclaration(\n        declaration.name,\n        declaration.decorators,\n        declaration.flags | CommonFlags.GET,\n        null,\n        Node.createFunctionType(\n          [],\n          typeNode,\n          null,\n          false,\n          declaration.range\n        ),\n        null,\n        declaration.range\n      ),\n      parent\n    );\n    if (!declaration.is(CommonFlags.READONLY)) {\n      this.initializeProperty(\n        Node.createMethodDeclaration(\n          declaration.name,\n          declaration.decorators,\n          declaration.flags | CommonFlags.SET,\n          null,\n          Node.createFunctionType(\n            [\n              Node.createParameter(\n                ParameterKind.DEFAULT,\n                declaration.name,\n                typeNode,\n                null,\n                declaration.name.range\n              )\n            ],\n            Node.createOmittedType(declaration.name.range.atEnd),\n            null,\n            false,\n            declaration.range\n          ),\n          null,\n          declaration.range\n        ),\n        parent\n      );\n    }\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): DeclaredElement | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original, queuedExtends);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n\n  /** Finds all cyclic classes. */\n  findCyclicClasses(): Set<Class> {\n    var cyclics = new Set<Class>();\n    // TODO: for (let instance of this.managedClasses.values()) {\n    for (let _values = Map_values(this.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      if (!instance.isAcyclic) cyclics.add(instance);\n    }\n    return cyclics;\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a final class. */\n  FINAL = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.FINAL: return DecoratorFlags.FINAL;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent!: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do {\n      current = current.parent;\n      if (current.kind == ElementKind.FILE) return <File>current;\n    } while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members !== null && members.has(name)) return assert(members.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = assert(members.get(name));\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          let reportedIdentifier = localIdentifierIfImport\n            ? localIdentifierIfImport\n            : element.identifierNode;\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range,\n              (<DeclaredElement>existing).identifierNode.range,\n              reportedIdentifier.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range, reportedIdentifier.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Checks if this element is public, explicitly or implicitly. */\n  get isPublic(): bool {\n    return !this.isAny(CommonFlags.PRIVATE | CommonFlags.PROTECTED);\n  }\n\n  /** Checks if this element is implicitly public, i.e. not explicitly declared to be. */\n  get isImplicitlyPublic(): bool {\n    return this.isPublic && !this.is(CommonFlags.PUBLIC);\n  }\n\n  /** Checks if the visibility of this element equals the specified. */\n  visibilityEquals(other: Element): bool {\n    if (this.isPublic == other.isPublic) return true;\n    const vis = CommonFlags.PRIVATE | CommonFlags.PROTECTED;\n    return (this.flags & vis) == (other.flags & vis);\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return this.internalName + \", kind=\" + this.kind.toString();\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the signature node, if applicable, along the identifier node. */\n  get identifierAndSignatureRange(): Range {\n    var declaration = this.declaration;\n    var identifierNode = declaration.name;\n    if (declaration.kind == NodeKind.FUNCTIONDECLARATION || declaration.kind == NodeKind.METHODDECLARATION) {\n      let signatureNode = (<FunctionDeclaration>declaration).signature;\n      return Range.join(identifierNode.range, signatureNode.range);\n    }\n    return identifierNode.range;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n\n  /** Checks if this element is a compatible override of the specified. */\n  isCompatibleOverride(base: DeclaredElement): bool {\n    var self: DeclaredElement = this; // TS\n    var kind = self.kind;\n    if (kind == base.kind) {\n      switch (kind) {\n        case ElementKind.FUNCTION: {\n          return (<Function>self).signature.isAssignableTo((<Function>base).signature, /* sameSize */ true);\n        }\n        case ElementKind.PROPERTY: {\n          let selfProperty = <Property>self;\n          let baseProperty = <Property>base;\n          let selfGetter = selfProperty.getterInstance;\n          let baseGetter = baseProperty.getterInstance;\n          if (selfGetter) {\n            if (!baseGetter || !selfGetter.signature.isAssignableTo(baseGetter.signature, true)) {\n              return false;\n            }\n          } else if (baseGetter) {\n            return false;\n          }\n          let selfSetter = selfProperty.setterInstance;\n          let baseSetter = baseProperty.setterInstance;\n          if (selfSetter) {\n            if (!baseSetter || !selfSetter.signature.isAssignableTo(baseSetter.signature, true)) {\n              return false;\n            }\n          } else if (baseSetter) {\n            return false;\n          }\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction!: Function;\n  /** Array of `import * as X` alias namespaces of this file. */\n  aliasNamespaces: Array<Namespace> = new Array<Namespace>();\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element, localIdentifierIfImport)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !localIdentifierIfImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n\n    // Also, add to the namespaces that capture our exports\n    for(let i = 0; i < this.aliasNamespaces.length; i++) {\n      let ns = this.aliasNamespaces[i];\n      ns.add(name, element);\n    }\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports !== null && exports.has(name)) return assert(exports.get(name));\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asAliasNamespace(\n    name: string, \n    parent: Element, \n    localIdentifier: IdentifierExpression\n  ): Namespace {\n    var declaration = this.program.makeNativeNamespaceDeclaration(name);\n    declaration.name = localIdentifier;\n    var ns = new Namespace(name, parent, declaration);\n    ns.set(CommonFlags.SCOPED);\n    this.copyExportsToNamespace(ns);\n    // NOTE: Some exports are still queued, and can't yet be added here,\n    // so we remember all the alias namespaces and add to them as well\n    // when adding an element to the file.\n    this.aliasNamespaces.push(ns);\n    return ns;\n  }\n\n  /** Recursively copies the exports of this file to the specified namespace. */\n  private copyExportsToNamespace(ns: Namespace): void {\n    var exports = this.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        ns.add(memberName, member);\n      }\n    }\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        exportsStar[i].copyExportsToNamespace(ns);\n      }\n    }\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: i64 = i64_zero;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64 = 0;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: i64, type: Type): void {\n    assert(type.isIntegerInclReference);\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.isFloatValue);\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).initializer;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Original name of the (temporary) local. */\n  private originalName: string;\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.originalName = name;\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n\n  /** Sets the temporary name of this local. */\n  setTemporaryName(name: string): void {\n    this.name = name;\n    this.internalName = mangleInternalName(name, this.parent, false);\n  }\n\n  /** Resets the temporary name of this local. */\n  resetTemporaryName(): void {\n    var name = this.originalName;\n    this.name = name;\n    this.internalName = mangleInternalName(name, this.parent, false);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n  /** Methods overloading this one, if any. These are unbound. */\n  overloads: Set<FunctionPrototype> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS ||\n           parent.kind == ElementKind.PROPERTY_PROTOTYPE && (\n             parent.parent.kind == ElementKind.CLASS ||\n             parent.parent.kind == ElementKind.INTERFACE\n           );\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var declaration = this.declaration;\n    assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    bound.overloads = this.overloads;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return assert(instances.get(instanceKey));\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Concrete type arguments. */\n  typeArguments: Type[] | null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow!: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Varargs stub for calling with omitted arguments. */\n  varargsStub: Function | null = null;\n  /** Virtual stub for calling overloads. */\n  virtualStub: Function | null = null;\n  /** Runtime memory segment, if created. */\n  memorySegment: MemorySegment | null = null;\n  /** Original function, if a stub. Otherwise `this`. */\n  original!: Function;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.typeArguments = typeArguments;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.original = this;\n    var program = prototype.program;\n    this.type = signature.type;\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        let local = new Local(\n          CommonNames.this_,\n          localIndex++,\n          thisType,\n          this\n        );\n        this.localsByName.set(CommonNames.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = this.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.createParent(this);\n    registerConcreteElement(program, this);\n  }\n\n  /** Gets the name of the parameter at the specified index. */\n  getParameterName(index: i32): string {\n    var parameters = (<FunctionDeclaration>this.declaration).signature.parameters;\n    return parameters.length > index\n      ? parameters[index].name.text\n      : getDefaultParameterName(index);\n  }\n\n  /** Creates a stub for use with this function, i.e. for varargs or virtual calls. */\n  newStub(postfix: string): Function {\n    var stub = new Function(\n      this.original.name + STUB_DELIMITER + postfix,\n      this.prototype,\n      this.typeArguments,\n      this.signature.clone(),\n      this.contextualTypeArguments\n    );\n    stub.original = this.original;\n    stub.set(this.flags & ~CommonFlags.COMPILED | CommonFlags.STUB);\n    return stub;\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    if (!declaration) declaration = this.program.makeNativeVariableDeclaration(localName);\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return assert(locals.get(name));\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempFuncrefs: Local[] | null = null;\n  tempExternrefs: Local[] | null = null;\n  tempExnrefs: Local[] | null = null;\n  tempAnyrefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    var breakStack = this.breakStack;\n    assert(!breakStack || !breakStack.length); // internal error\n    this.breakStack = breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let range = debugLocations[i];\n        let source = range.source;\n        module.setDebugLocation(\n          ref,\n          range.debugInfoRef,\n          source.debugInfoIndex,\n          source.lineAt(range.start),\n          source.columnAt() - 1 // source maps are 0-based\n        );\n      }\n    }\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n  /** Getter function reference, if compiled. */\n  getterRef: FunctionRef = 0;\n  /** Setter function reference, if compiled. */\n  setterRef: FunctionRef = 0;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Gets the internal name of the respective getter function. */\n  get internalGetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + GETTER_PREFIX + this.name;\n  }\n\n  /** Gets the internal name of the respective setter function. */\n  get internalSetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + SETTER_PREFIX + this.name;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n  /** Property instance, if resolved. */\n  instance: Property | null = null;\n\n  /** Clones of this prototype that are bound to specific classes. */\n  private boundPrototypes: Map<Class,PropertyPrototype> | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element. Either a class prototype or instance. */\n    parent: Element,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    switch (this.parent.kind) {\n      case ElementKind.CLASS:\n      case ElementKind.INTERFACE: return true;\n    }\n    return false;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): PropertyPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var firstDeclaration = this.declaration;\n    assert(firstDeclaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new PropertyPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>firstDeclaration\n    );\n    bound.flags = this.flags;\n    var getterPrototype = this.getterPrototype;\n    if (getterPrototype) {\n      bound.getterPrototype = getterPrototype.toBound(classInstance);\n    }\n    var setterPrototype = this.setterPrototype;\n    if (setterPrototype) {\n      bound.setterPrototype = setterPrototype.toBound(classInstance);\n    }\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      Node.createVariableDeclaration(\n        prototype.identifierNode,\n        null,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE,\n        null, null,\n        prototype.identifierNode.range\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    if (this.is(CommonFlags.INSTANCE)) {\n      registerConcreteElement(this.program, this);\n    }\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved index signature. */\nexport class IndexSignature extends TypedElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(\n      ElementKind.INDEXSIGNATURE,\n      \"[]\",\n      parent.internalName + \"[]\",\n      parent.program,\n      parent,\n      parent.program.makeNativeVariableDeclaration(\"[]\") // is fine\n    );\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,DeclaredElement> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null;\n  /** Interface prototypes, if applicable. */\n  interfacePrototypes: InterfacePrototype[] | null = null;\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n  /** Classes extending this class. */\n  extendees: Set<ClassPrototype> = new Set();\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    var seen = new Set<ClassPrototype>();\n    do {\n      // cannot directly or indirectly extend itself\n      if (seen.has(current)) break;\n      seen.add(current);\n      if (current === basePtototype) return true;\n      current = current.basePrototype;\n    } while (current);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = assert(instanceMembers.get(name));\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null = null;\n  /** Implemented interfaces, if applicable. */\n  interfaces: Set<Interface> | null = null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  nextMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n  /** Classes directly extending this class. */\n  extendees: Set<Class> | null = null;\n  /** Classes implementing this interface. */\n  implementers: Set<Class> | null = null;\n  /** Whether the field initialization check has already been performed. */\n  didCheckFieldInitialization: bool = false;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY_PROTOTYPE &&\n        (<PropertyPrototype>lengthField).getterPrototype !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    var usizeType = program.options.usizeType;\n    var type = new Type(usizeType.kind, usizeType.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, usizeType.size);\n    type.classReference = this;\n    this.setType(type);\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters !== null && typeParameters.length > 0) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Sets the base class. */\n  setBase(base: Class): void {\n    assert(!this.base);\n    this.base = base;\n    var extendees = base.extendees;\n    if (!extendees) base.extendees = extendees = new Set();\n    extendees.add(this);\n\n    // Inherit contextual type arguments from base class\n    var inheritedTypeArguments = base.contextualTypeArguments;\n    if (inheritedTypeArguments) {\n      let contextualTypeArguments = this.contextualTypeArguments;\n      // TODO: for (let [baseName, baseType] of inheritedTypeArguments) {\n      for (let _keys = Map_keys(inheritedTypeArguments), i = 0, k = _keys.length; i < k; ++i) {\n        let baseName = unchecked(_keys[i]);\n        let baseType = assert(inheritedTypeArguments.get(baseName));\n        if (!contextualTypeArguments) {\n          this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        } else if (!contextualTypeArguments.has(baseName)) {\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n  }\n\n  /** Adds an interface. */\n  addInterface(iface: Interface): void {\n    var interfaces = this.interfaces;\n    if (!interfaces) this.interfaces = interfaces = new Set();\n    interfaces.add(iface);\n    var implementers = iface.implementers;\n    if (!implementers) iface.implementers = implementers = new Set();\n    implementers.add(this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do {\n      if (current == target) return true;\n      if (target.kind == ElementKind.INTERFACE) {\n        let interfaces = current.interfaces;\n        if (interfaces) {\n          for (let _values = Set_values(interfaces), i = 0, k = _values.length; i < k; ++i) {\n            let iface = _values[i];\n            if (iface.isAssignableTo(target)) return true;\n          }\n        }\n      }\n      current = current.base;\n    } while (current);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n      instance = instance.base;\n    } while (instance);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Creates a buffer suitable to hold a runtime instance of this class. */\n  createBuffer(overhead: i32 = 0): Uint8Array {\n    var size = this.nextMemoryOffset + overhead;\n    var buffer = new Uint8Array(this.program.runtimeHeaderSize + size);\n    assert(!this.program.options.isWasm64); // TODO: WASM64, mmInfo is usize\n    // see: std/assembly/rt/common.ts\n    assert(size < (1 << 28));      // 1 bit BUFFERED + 3 bits color\n    var OBJECT = this.program.OBJECTInstance;\n    OBJECT.writeField(\"mmInfo\", size, buffer, 0);\n    OBJECT.writeField(\"gcInfo\", 1, buffer, 0); // RC = 1\n    OBJECT.writeField(\"gcInfo2\", 0, buffer, 0);\n    OBJECT.writeField(\"rtId\", this.id, buffer, 0);\n    OBJECT.writeField(\"rtSize\", size, buffer, 0);\n    return buffer;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32 = this.program.runtimeHeaderSize): i32 {\n    var element = this.lookupInSelf(name);\n    if (element !== null && element.kind == ElementKind.FIELD) {\n      let fieldInstance = <Field>element;\n      let offset = baseOffset + fieldInstance.memoryOffset;\n      let typeKind = fieldInstance.type.kind;\n      switch (typeKind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          assert(!i64_is(value));\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          assert(!i64_is(value));\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          assert(!i64_is(value));\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          if (this.program.options.isWasm64) {\n            if (i64_is(value)) {\n              writeI64(value, buffer, offset);\n            } else {\n              writeI32AsI64(i32(value), buffer, offset, typeKind == TypeKind.USIZE);\n            }\n            return 8;\n          } else {\n            if (i64_is(value)) {\n              writeI64AsI32(value, buffer, offset, typeKind == TypeKind.USIZE);\n            } else {\n              writeI32(i32(value), buffer, offset);\n            }\n            return 4;\n          }\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          if (i64_is(value)) {\n            writeI64(value, buffer, offset);\n          } else {\n            writeI32AsI64(i32(value), buffer, offset, typeKind == TypeKind.U64);\n          }\n          return 8;\n        }\n        case TypeKind.F32: {\n          assert(!i64_is(value));\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          assert(!i64_is(value));\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do {\n      if (current.prototype === extendedPrototype) return current.typeArguments;\n      current = current.base;\n    } while (current);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var arrayPrototype = program.arrayPrototype;\n    if (this.extends(arrayPrototype)) {\n      return this.getTypeArgumentsTo(arrayPrototype)![0];\n    }\n    var staticArrayPrototype = program.staticArrayPrototype;\n    if (this.extends(staticArrayPrototype)) {\n      return this.getTypeArgumentsTo(staticArrayPrototype)![0];\n    }\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    var prototype = current.prototype;\n    switch (prototype.name.charCodeAt(0)) {\n      case CharCode.F: {\n        if (prototype == program.float32ArrayPrototype) return Type.f32;\n        if (prototype == program.float64ArrayPrototype) return Type.f64;\n        break;\n      }\n      case CharCode.I: {\n        if (prototype == program.int8ArrayPrototype) return Type.i8;\n        if (prototype == program.int16ArrayPrototype) return Type.i16;\n        if (prototype == program.int32ArrayPrototype) return Type.i32;\n        if (prototype == program.int64ArrayPrototype) return Type.i64;\n        break;\n      }\n      case CharCode.U: {\n        if (prototype == program.uint8ArrayPrototype) return Type.u8;\n        if (prototype == program.uint8ClampedArrayPrototype) return Type.u8;\n        if (prototype == program.uint16ArrayPrototype) return Type.u16;\n        if (prototype == program.uint32ArrayPrototype) return Type.u32;\n        if (prototype == program.uint64ArrayPrototype) return Type.u64;\n        break;\n      }\n    }\n    assert(false);\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var instanceMembers = this.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind == ElementKind.FIELD) {\n          let fieldType = (<Field>member).type;\n          if (fieldType.isReference) {\n            if ((current = fieldType.getClass()) !== null && (\n              current === other ||\n              current.cyclesTo(other, except)\n            )) return true;\n          }\n        }\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n\n  /** Gets all extendees of this class (that do not have the specified instance member). */\n  getAllExtendees(exceptIfMember: string | null = null, out: Set<Class> = new Set()): Set<Class> {\n    var extendees = this.extendees;\n    if (extendees) {\n      for (let _values = Set_values(extendees), i = 0, k = _values.length; i < k; ++i) {\n        let extendee = _values[i];\n        if (exceptIfMember) {\n          let instanceMembers = extendee.prototype.instanceMembers;\n          if (instanceMembers !== null && instanceMembers.has(exceptIfMember)) continue;\n        }\n        out.add(extendee);\n        extendee.getAllExtendees(exceptIfMember, out);\n      }\n    }\n    return out;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: InterfacePrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  if (newer.members) return null;\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    // TODO: for (let [memberName, member] of srcMembers) {\n    for (let _keys = Map_keys(srcMembers), i = 0, k = _keys.length; i < k; ++i) {\n      let memberName = unchecked(_keys[i]);\n      let member = assert(srcMembers.get(memberName));\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    case ElementKind.PROPERTY_PROTOTYPE: // properties are just containers\n    case ElementKind.PROPERTY: {         //\n      parent = parent.parent;\n      // fall-through\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] = [];\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"$\" + i.toString());\n  }\n  return cachedDefaultParameterNames[index];\n}\n","/**\n * @fileoverview A thin wrapper around Binaryen's C-API.\n *\n * The AssemblyScript compiler utilizes Binaryen's C-API directly. Even\n * though it currently imports binaryen.js, none of the JS APIs it\n * provides are used.\n *\n * @license Apache-2.0\n */\n\nimport { Target } from \"./common\";\nimport * as binaryen from \"./glue/binaryen\";\n\nexport type ModuleRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type EventRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\n// The following constants must be updated by running scripts/update-constants.\n// This is necessary because the functions are not yet callable with Binaryen\n// compiled to WebAssembly, requiring awaiting the ready promise first. Note\n// that this essentially fixes the compiler to specific versions of Binaryen\n// sometimes, because these constants can differ between Binaryen versions.\n\nexport type NativeType = usize;\nexport namespace NativeType {\n  export const None: NativeType = 0 /* _BinaryenTypeNone */;\n  export const Unreachable: NativeType = 1 /* _BinaryenTypeUnreachable */;\n  export const I32: NativeType = 2 /* _BinaryenTypeInt32 */;\n  export const I64: NativeType = 3 /* _BinaryenTypeInt64 */;\n  export const F32: NativeType = 4 /* _BinaryenTypeFloat32 */;\n  export const F64: NativeType = 5 /* _BinaryenTypeFloat64 */;\n  export const V128: NativeType = 6 /* _BinaryenTypeVec128 */;\n  export const Funcref: NativeType = 7 /* _BinaryenTypeFuncref */;\n  export const Externref: NativeType = 8 /* _BinaryenTypeExternref */;\n  export const Exnref: NativeType = 9 /* _BinaryenTypeExnref */;\n  export const Anyref: NativeType = 10 /* _BinaryenTypeAnyref */;\n  export const Auto: NativeType = -1 /* _BinaryenTypeAuto */;\n}\n\nexport enum FeatureFlags {\n  MVP = 0 /* _BinaryenFeatureMVP */,\n  Atomics = 1 /* _BinaryenFeatureAtomics */,\n  MutableGloabls = 2 /* _BinaryenFeatureMutableGlobals */,\n  NontrappingFPToInt = 4 /* _BinaryenFeatureNontrappingFPToInt */,\n  SIMD128 = 8 /* _BinaryenFeatureSIMD128 */,\n  BulkMemory = 16 /* _BinaryenFeatureBulkMemory */,\n  SignExt = 32 /* _BinaryenFeatureSignExt */,\n  ExceptionHandling = 64 /* _BinaryenFeatureExceptionHandling */,\n  TailCall = 128 /* _BinaryenFeatureTailCall */,\n  ReferenceTypes = 256 /* _BinaryenFeatureReferenceTypes */,\n  MultiValue = 512 /* _BinaryenFeatureMultivalue */,\n  GC = 1024 /* _BinaryenFeatureGC */,\n  Memory64 = 2048, // TODO: missing in Binaryen API\n  All = 4095 /* _BinaryenFeatureAll */\n}\n\nexport enum ExpressionId {\n  Invalid = 0 /* _BinaryenInvalidId */,\n  Block = 1 /* _BinaryenBlockId */,\n  If = 2 /* _BinaryenIfId */,\n  Loop = 3 /* _BinaryenLoopId */,\n  Break = 4 /* _BinaryenBreakId */,\n  Switch = 5 /* _BinaryenSwitchId */,\n  Call = 6 /* _BinaryenCallId */,\n  CallIndirect = 7 /* _BinaryenCallIndirectId */,\n  LocalGet = 8 /* _BinaryenLocalGetId */,\n  LocalSet = 9 /* _BinaryenLocalSetId */,\n  GlobalGet = 10 /* _BinaryenGlobalGetId */,\n  GlobalSet = 11 /* _BinaryenGlobalSetId */,\n  Load = 12 /* _BinaryenLoadId */,\n  Store = 13 /* _BinaryenStoreId */,\n  Const = 14 /* _BinaryenConstId */,\n  Unary = 15 /* _BinaryenUnaryId */,\n  Binary = 16 /* _BinaryenBinaryId */,\n  Select = 17 /* _BinaryenSelectId */,\n  Drop = 18 /* _BinaryenDropId */,\n  Return = 19 /* _BinaryenReturnId */,\n  MemorySize = 20 /* _BinaryenMemorySizeId */,\n  MemoryGrow = 21 /* _BinaryenMemoryGrowId */,\n  Nop = 22 /* _BinaryenNopId */,\n  Unreachable = 23 /* _BinaryenUnreachableId */,\n  AtomicCmpxchg = 25 /* _BinaryenAtomicCmpxchgId */,\n  AtomicRMW = 24 /* _BinaryenAtomicRMWId */,\n  AtomicWait = 26 /* _BinaryenAtomicWaitId */,\n  AtomicNotify = 27 /* _BinaryenAtomicNotifyId */,\n  AtomicFence = 28 /* _BinaryenAtomicFenceId */,\n  SIMDExtract = 29 /* _BinaryenSIMDExtractId */,\n  SIMDReplace = 30 /* _BinaryenSIMDReplaceId */,\n  SIMDShuffle = 31 /* _BinaryenSIMDShuffleId */,\n  SIMDTernary = 32 /* _BinaryenSIMDTernaryId */,\n  SIMDShift = 33 /* _BinaryenSIMDShiftId */,\n  SIMDLoad = 34 /* _BinaryenSIMDLoadId */,\n  MemoryInit = 35 /* _BinaryenMemoryInitId */,\n  DataDrop = 36 /* _BinaryenDataDropId */,\n  MemoryCopy = 37 /* _BinaryenMemoryCopyId */,\n  MemoryFill = 38 /* _BinaryenMemoryFillId */,\n  Pop = 39 /* _BinaryenPopId */,\n  RefNull = 40 /* _BinaryenRefNullId */,\n  RefIsNull = 41 /* _BinaryenRefIsNullId */,\n  RefFunc = 42 /* _BinaryenRefFuncId */,\n  Try = 44 /* _BinaryenTryId */,\n  Throw = 45 /* _BinaryenThrowId */,\n  Rethrow = 46 /* _BinaryenRethrowId */,\n  BrOnExn = 47 /* _BinaryenBrOnExnId */,\n  TupleMake = 48 /* _BinaryenTupleMakeId */,\n  TupleExtract = 49 /* _BinaryenTupleExtractId */\n}\n\nexport enum UnaryOp {\n  ClzI32 = 0 /* _BinaryenClzInt32 */,\n  ClzI64 = 1 /* _BinaryenClzInt64 */,\n  CtzI32 = 2 /* _BinaryenCtzInt32 */,\n  CtzI64 = 3 /* _BinaryenCtzInt64 */,\n  PopcntI32 = 4 /* _BinaryenPopcntInt32 */,\n  PopcntI64 = 5 /* _BinaryenPopcntInt64 */,\n  NegF32 = 6 /* _BinaryenNegFloat32 */,\n  NegF64 = 7 /* _BinaryenNegFloat64 */,\n  AbsF32 = 8 /* _BinaryenAbsFloat32 */,\n  AbsF64 = 9 /* _BinaryenAbsFloat64 */,\n  CeilF32 = 10 /* _BinaryenCeilFloat32 */,\n  CeilF64 = 11 /* _BinaryenCeilFloat64 */,\n  FloorF32 = 12 /* _BinaryenFloorFloat32 */,\n  FloorF64 = 13 /* _BinaryenFloorFloat64 */,\n  TruncF32 = 14 /* _BinaryenTruncFloat32 */,\n  TruncF64 = 15 /* _BinaryenTruncFloat64 */,\n  NearestF32 = 16 /* _BinaryenNearestFloat32 */,\n  NearestF64 = 17 /* _BinaryenNearestFloat64 */,\n  SqrtF32 = 18 /* _BinaryenSqrtFloat32 */,\n  SqrtF64 = 19 /* _BinaryenSqrtFloat64 */,\n  EqzI32 = 20 /* _BinaryenEqZInt32 */,\n  EqzI64 = 21 /* _BinaryenEqZInt64 */,\n  ExtendI32 = 22 /* _BinaryenExtendSInt32 */,\n  ExtendU32 = 23 /* _BinaryenExtendUInt32 */,\n  WrapI64 = 24 /* _BinaryenWrapInt64 */,\n  TruncF32ToI32 = 25 /* _BinaryenTruncSFloat32ToInt32 */,\n  TruncF32ToI64 = 26 /* _BinaryenTruncSFloat32ToInt64 */,\n  TruncF32ToU32 = 27 /* _BinaryenTruncUFloat32ToInt32 */,\n  TruncF32ToU64 = 28 /* _BinaryenTruncUFloat32ToInt64 */,\n  TruncF64ToI32 = 29 /* _BinaryenTruncSFloat64ToInt32 */,\n  TruncF64ToI64 = 30 /* _BinaryenTruncSFloat64ToInt64 */,\n  TruncF64ToU32 = 31 /* _BinaryenTruncUFloat64ToInt32 */,\n  TruncF64ToU64 = 32 /* _BinaryenTruncUFloat64ToInt64 */,\n  ReinterpretF32 = 33 /* _BinaryenReinterpretFloat32 */,\n  ReinterpretF64 = 34 /* _BinaryenReinterpretFloat64 */,\n  ConvertI32ToF32 = 35 /* _BinaryenConvertSInt32ToFloat32 */,\n  ConvertI32ToF64 = 36 /* _BinaryenConvertSInt32ToFloat64 */,\n  ConvertU32ToF32 = 37 /* _BinaryenConvertUInt32ToFloat32 */,\n  ConvertU32ToF64 = 38 /* _BinaryenConvertUInt32ToFloat64 */,\n  ConvertI64ToF32 = 39 /* _BinaryenConvertSInt64ToFloat32 */,\n  ConvertI64ToF64 = 40 /* _BinaryenConvertSInt64ToFloat64 */,\n  ConvertU64ToF32 = 41 /* _BinaryenConvertUInt64ToFloat32 */,\n  ConvertU64ToF64 = 42 /* _BinaryenConvertUInt64ToFloat64 */,\n  PromoteF32 = 43 /* _BinaryenPromoteFloat32 */,\n  DemoteF64 = 44 /* _BinaryenDemoteFloat64 */,\n  ReinterpretI32 = 45 /* _BinaryenReinterpretInt32 */,\n  ReinterpretI64 = 46 /* _BinaryenReinterpretInt64 */,\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = 47 /* _BinaryenExtendS8Int32 */,\n  ExtendI16ToI32 = 48 /* _BinaryenExtendS16Int32 */,\n  ExtendI8ToI64 = 49 /* _BinaryenExtendS8Int64 */,\n  ExtendI16ToI64 = 50 /* _BinaryenExtendS16Int64 */,\n  ExtendI32ToI64 = 51 /* _BinaryenExtendS32Int64 */,\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  TruncF32ToI32Sat = 52 /* _BinaryenTruncSatSFloat32ToInt32 */,\n  TruncF32ToU32Sat = 53 /* _BinaryenTruncSatUFloat32ToInt32 */,\n  TruncF64ToI32Sat = 54 /* _BinaryenTruncSatSFloat64ToInt32 */,\n  TruncF64ToU32Sat = 55 /* _BinaryenTruncSatUFloat64ToInt32 */,\n  TruncF32ToI64Sat = 56 /* _BinaryenTruncSatSFloat32ToInt64 */,\n  TruncF32ToU64Sat = 57 /* _BinaryenTruncSatUFloat32ToInt64 */,\n  TruncF64ToI64Sat = 58 /* _BinaryenTruncSatSFloat64ToInt64 */,\n  TruncF64ToU64Sat = 59 /* _BinaryenTruncSatUFloat64ToInt64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  SplatI8x16 = 60 /* _BinaryenSplatVecI8x16 */,\n  SplatI16x8 = 61 /* _BinaryenSplatVecI16x8 */,\n  SplatI32x4 = 62 /* _BinaryenSplatVecI32x4 */,\n  SplatI64x2 = 63 /* _BinaryenSplatVecI64x2 */,\n  SplatF32x4 = 64 /* _BinaryenSplatVecF32x4 */,\n  SplatF64x2 = 65 /* _BinaryenSplatVecF64x2 */,\n  NotV128 = 66 /* _BinaryenNotVec128 */,\n  AbsI8x16 = 67 /* __BinaryenAbsVecI8x16 */,\n  NegI8x16 = 68 /* _BinaryenNegVecI8x16 */,\n  AnyTrueI8x16 = 69 /* _BinaryenAnyTrueVecI8x16 */,\n  AllTrueI8x16 = 70 /* _BinaryenAllTrueVecI8x16 */,\n  BitmaskI8x16 = 71 /* __BinaryenBitmaskVecI8x16 */,\n  AbsI16x8 = 72 /* __BinaryenAbsVecI16x8 */,\n  NegI16x8 = 73 /* _BinaryenNegVecI16x8 */,\n  AnyTrueI16x8 = 74 /* _BinaryenAnyTrueVecI16x8 */,\n  AllTrueI16x8 = 75 /* _BinaryenAllTrueVecI16x8 */,\n  BitmaskI16x8 = 76 /* _BinaryenBitmaskVecI16x8 */,\n  AbsI32x4 = 77 /* _BinaryenAbsVecI32x4 */,\n  NegI32x4 = 78 /* _BinaryenNegVecI32x4 */,\n  AnyTrueI32x4 = 79 /* _BinaryenAnyTrueVecI32x4 */,\n  AllTrueI32x4 = 80 /* _BinaryenAllTrueVecI32x4 */,\n  BitmaskI32x4 = 81 /* _BinaryenBitmaskVecI32x4 */,\n  NegI64x2 = 82 /* _BinaryenNegVecI64x2 */,\n  AnyTrueI64x2 = 83 /* _BinaryenAnyTrueVecI64x2 */,\n  AllTrueI64x2 = 84 /* _BinaryenAllTrueVecI64x2 */,\n  AbsF32x4 = 85 /* _BinaryenAbsVecF32x4 */,\n  NegF32x4 = 86 /* _BinaryenNegVecF32x4 */,\n  SqrtF32x4 = 87 /* _BinaryenSqrtVecF32x4 */,\n  CeilF32x4 = 88 /* _BinaryenCeilVecF32x4 */,\n  FloorF32x4 = 89 /* _BinaryenFloorVecF32x4 */,\n  TruncF32x4 = 90 /* BinaryenTruncVecF32x4 */,\n  NearestF32x4 = 91 /* BinaryenNearestVecF32x4 */,\n  AbsF64x2 = 92 /* _BinaryenAbsVecF64x2 */,\n  NegF64x2 = 93 /* _BinaryenNegVecF64x2 */,\n  SqrtF64x2 = 94 /* _BinaryenSqrtVecF64x2 */,\n  CeilF64x2 = 95 /* _BinaryenCeilVecF64x2 */,\n  FloorF64x2 = 96 /* _BinaryenFloorVecF64x2 */,\n  TruncF64x2 = 97 /* BinaryenTruncVecF64x2 */,\n  NearestF64x2 = 98 /* BinaryenNearestVecF64x2 */,\n  TruncSatF32x4ToI32x4 = 99 /* _BinaryenTruncSatSVecF32x4ToVecI32x4 */,\n  TruncSatF32x4ToU32x4 = 100 /* _BinaryenTruncSatUVecF32x4ToVecI32x4 */,\n  TruncSatF64x2ToI64x2 = 101 /* _BinaryenTruncSatSVecF64x2ToVecI64x2 */,\n  TruncSatF64x2ToU64x2 = 102 /* _BinaryenTruncSatUVecF64x2ToVecI64x2 */,\n  ConvertI32x4ToF32x4 = 103 /* _BinaryenConvertSVecI32x4ToVecF32x4 */,\n  ConvertU32x4ToF32x4 = 104 /* _BinaryenConvertUVecI32x4ToVecF32x4 */,\n  ConvertI64x2ToF64x2 = 105 /* _BinaryenConvertSVecI64x2ToVecF64x2 */,\n  ConvertU64x2ToF64x2 = 106 /* _BinaryenConvertUVecI64x2ToVecF64x2 */,\n  WidenLowI8x16ToI16x8 = 107 /* _BinaryenWidenLowSVecI8x16ToVecI16x8 */,\n  WidenHighI8x16ToI16x8 = 108 /* _BinaryenWidenHighSVecI8x16ToVecI16x8 */,\n  WidenLowU8x16ToU16x8 = 109 /* _BinaryenWidenLowUVecI8x16ToVecI16x8 */,\n  WidenHighU8x16ToU16x8 = 110 /* _BinaryenWidenHighUVecI8x16ToVecI16x8 */,\n  WidenLowI16x8ToI32x4 = 111 /* _BinaryenWidenLowSVecI16x8ToVecI32x4 */,\n  WidenHighI16x8ToI32x4 = 112 /* _BinaryenWidenHighSVecI16x8ToVecI32x4 */,\n  WidenLowU16x8ToU32x4 = 113 /* _BinaryenWidenLowUVecI16x8ToVecI32x4 */,\n  WidenHighU16x8ToU32x4 = 114 /* _BinaryenWidenHighUVecI16x8ToVecI32x4 */\n}\n\nexport enum BinaryOp {\n  AddI32 = 0 /* _BinaryenAddInt32 */,\n  SubI32 = 1 /* _BinaryenSubInt32 */,\n  MulI32 = 2 /* _BinaryenMulInt32 */,\n  DivI32 = 3 /* _BinaryenDivSInt32 */,\n  DivU32 = 4 /* _BinaryenDivUInt32 */,\n  RemI32 = 5 /* _BinaryenRemSInt32 */,\n  RemU32 = 6 /* _BinaryenRemUInt32 */,\n  AndI32 = 7 /* _BinaryenAndInt32 */,\n  OrI32 = 8 /* _BinaryenOrInt32 */,\n  XorI32 = 9 /* _BinaryenXorInt32 */,\n  ShlI32 = 10 /* _BinaryenShlInt32 */,\n  ShrI32 = 11 /* _BinaryenShrSInt32 */,\n  ShrU32 = 12 /* _BinaryenShrUInt32 */,\n  RotlI32 = 13 /* _BinaryenRotLInt32 */,\n  RotrI32 = 14 /* _BinaryenRotRInt32 */,\n  EqI32 = 15 /* _BinaryenEqInt32 */,\n  NeI32 = 16 /* _BinaryenNeInt32 */,\n  LtI32 = 17 /* _BinaryenLtSInt32 */,\n  LtU32 = 18 /* _BinaryenLtUInt32 */,\n  LeI32 = 19 /* _BinaryenLeSInt32 */,\n  LeU32 = 20 /* _BinaryenLeUInt32 */,\n  GtI32 = 21 /* _BinaryenGtSInt32 */,\n  GtU32 = 22 /* _BinaryenGtUInt32 */,\n  GeI32 = 23 /* _BinaryenGeSInt32 */,\n  GeU32 = 24 /* _BinaryenGeUInt32 */,\n  AddI64 = 25 /* _BinaryenAddInt64 */,\n  SubI64 = 26 /* _BinaryenSubInt64 */,\n  MulI64 = 27 /* _BinaryenMulInt64 */,\n  DivI64 = 28 /* _BinaryenDivSInt64 */,\n  DivU64 = 29 /* _BinaryenDivUInt64 */,\n  RemI64 = 30 /* _BinaryenRemSInt64 */,\n  RemU64 = 31 /* _BinaryenRemUInt64 */,\n  AndI64 = 32 /* _BinaryenAndInt64 */,\n  OrI64 = 33 /* _BinaryenOrInt64 */,\n  XorI64 = 34 /* _BinaryenXorInt64 */,\n  ShlI64 = 35 /* _BinaryenShlInt64 */,\n  ShrI64 = 36 /* _BinaryenShrSInt64 */,\n  ShrU64 = 37 /* _BinaryenShrUInt64 */,\n  RotlI64 = 38 /* _BinaryenRotLInt64 */,\n  RotrI64 = 39 /* _BinaryenRotRInt64 */,\n  EqI64 = 40 /* _BinaryenEqInt64 */,\n  NeI64 = 41 /* _BinaryenNeInt64 */,\n  LtI64 = 42 /* _BinaryenLtSInt64 */,\n  LtU64 = 43 /* _BinaryenLtUInt64 */,\n  LeI64 = 44 /* _BinaryenLeSInt64 */,\n  LeU64 = 45 /* _BinaryenLeUInt64 */,\n  GtI64 = 46 /* _BinaryenGtSInt64 */,\n  GtU64 = 47 /* _BinaryenGtUInt64 */,\n  GeI64 = 48 /* _BinaryenGeSInt64 */,\n  GeU64 = 49 /* _BinaryenGeUInt64 */,\n  AddF32 = 50 /* _BinaryenAddFloat32 */,\n  SubF32 = 51 /* _BinaryenSubFloat32 */,\n  MulF32 = 52 /* _BinaryenMulFloat32 */,\n  DivF32 = 53 /* _BinaryenDivFloat32 */,\n  CopysignF32 = 54 /* _BinaryenCopySignFloat32 */,\n  MinF32 = 55 /* _BinaryenMinFloat32 */,\n  MaxF32 = 56 /* _BinaryenMaxFloat32 */,\n  EqF32 = 57 /* _BinaryenEqFloat32 */,\n  NeF32 = 58 /* _BinaryenNeFloat32 */,\n  LtF32 = 59 /* _BinaryenLtFloat32 */,\n  LeF32 = 60 /* _BinaryenLeFloat32 */,\n  GtF32 = 61 /* _BinaryenGtFloat32 */,\n  GeF32 = 62 /* _BinaryenGeFloat32 */,\n  AddF64 = 63 /* _BinaryenAddFloat64 */,\n  SubF64 = 64 /* _BinaryenSubFloat64 */,\n  MulF64 = 65 /* _BinaryenMulFloat64 */,\n  DivF64 = 66 /* _BinaryenDivFloat64 */,\n  CopysignF64 = 67 /* _BinaryenCopySignFloat64 */,\n  MinF64 = 68 /* _BinaryenMinFloat64 */,\n  MaxF64 = 69 /* _BinaryenMaxFloat64 */,\n  EqF64 = 70 /* _BinaryenEqFloat64 */,\n  NeF64 = 71 /* _BinaryenNeFloat64 */,\n  LtF64 = 72 /* _BinaryenLtFloat64 */,\n  LeF64 = 73 /* _BinaryenLeFloat64 */,\n  GtF64 = 74 /* _BinaryenGtFloat64 */,\n  GeF64 = 75 /* _BinaryenGeFloat64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  EqI8x16 = 76 /* _BinaryenEqVecI8x16 */,\n  NeI8x16 = 77 /* _BinaryenNeVecI8x16 */,\n  LtI8x16 = 78 /* _BinaryenLtSVecI8x16 */,\n  LtU8x16 = 79 /* _BinaryenLtUVecI8x16 */,\n  GtI8x16 = 80 /* _BinaryenGtSVecI8x16 */,\n  GtU8x16 = 81 /* _BinaryenGtUVecI8x16 */,\n  LeI8x16 = 82 /* _BinaryenLeSVecI8x16 */,\n  LeU8x16 = 83 /* _BinaryenLeUVecI8x16 */,\n  GeI8x16 = 84 /* _BinaryenGeSVecI8x16 */,\n  GeU8x16 = 85 /* _BinaryenGeUVecI8x16 */,\n  EqI16x8 = 86 /* _BinaryenEqVecI16x8 */,\n  NeI16x8 = 87 /* _BinaryenNeVecI16x8 */,\n  LtI16x8 = 88 /* _BinaryenLtSVecI16x8 */,\n  LtU16x8 = 89 /* _BinaryenLtUVecI16x8 */,\n  GtI16x8 = 90 /* _BinaryenGtSVecI16x8 */,\n  GtU16x8 = 91 /* _BinaryenGtUVecI16x8 */,\n  LeI16x8 = 92 /* _BinaryenLeSVecI16x8 */,\n  LeU16x8 = 93 /* _BinaryenLeUVecI16x8 */,\n  GeI16x8 = 94 /* _BinaryenGeSVecI16x8 */,\n  GeU16x8 = 95 /* _BinaryenGeUVecI16x8 */,\n  EqI32x4 = 96 /* _BinaryenEqVecI32x4 */,\n  NeI32x4 = 97 /* _BinaryenNeVecI32x4 */,\n  LtI32x4 = 98 /* _BinaryenLtSVecI32x4 */,\n  LtU32x4 = 99 /* _BinaryenLtUVecI32x4 */,\n  GtI32x4 = 100 /* _BinaryenGtSVecI32x4 */,\n  GtU32x4 = 101 /* _BinaryenGtUVecI32x4 */,\n  LeI32x4 = 102 /* _BinaryenLeSVecI32x4 */,\n  LeU32x4 = 103 /* _BinaryenLeUVecI32x4 */,\n  GeI32x4 = 104 /* _BinaryenGeSVecI32x4 */,\n  GeU32x4 = 105 /* _BinaryenGeUVecI32x4 */,\n  EqF32x4 = 106 /* _BinaryenEqVecF32x4 */,\n  NeF32x4 = 107 /* _BinaryenNeVecF32x4 */,\n  LtF32x4 = 108 /* _BinaryenLtVecF32x4 */,\n  GtF32x4 = 109 /* _BinaryenGtVecF32x4 */,\n  LeF32x4 = 110 /* _BinaryenLeVecF32x4 */,\n  GeF32x4 = 111 /* _BinaryenGeVecF32x4 */,\n  EqF64x2 = 112 /* _BinaryenEqVecF64x2 */,\n  NeF64x2 = 113 /* _BinaryenNeVecF64x2 */,\n  LtF64x2 = 114 /* _BinaryenLtVecF64x2 */,\n  GtF64x2 = 115 /* _BinaryenGtVecF64x2 */,\n  LeF64x2 = 116 /* _BinaryenLeVecF64x2 */,\n  GeF64x2 = 117 /* _BinaryenGeVecF64x2 */,\n  AndV128 = 118 /* _BinaryenAndVec128 */,\n  OrV128 = 119 /* _BinaryenOrVec128 */,\n  XorV128 = 120 /* _BinaryenXorVec128 */,\n  AndNotV128 = 121 /* _BinaryenAndNotVec128 */,\n  AddI8x16 = 122 /* _BinaryenAddVecI8x16 */,\n  AddSatI8x16 = 123 /* _BinaryenAddSatSVecI8x16 */,\n  AddSatU8x16 = 124 /* _BinaryenAddSatUVecI8x16 */,\n  SubI8x16 = 125 /* _BinaryenSubVecI8x16 */,\n  SubSatI8x16 = 126 /* _BinaryenSubSatSVecI8x16 */,\n  SubSatU8x16 = 127 /* _BinaryenSubSatUVecI8x16 */,\n  MulI8x16 = 128 /* _BinaryenMulVecI8x16 */,\n  MinI8x16 = 129 /* _BinaryenMinSVecI8x16 */,\n  MinU8x16 = 130 /* _BinaryenMinUVecI8x16 */,\n  MaxI8x16 = 131 /* _BinaryenMaxSVecI8x16 */,\n  MaxU8x16 = 132 /* _BinaryenMaxUVecI8x16 */,\n  AvgrU8x16 = 133 /* _BinaryenAvgrUVecI8x16 */,\n  AddI16x8 = 134 /* _BinaryenAddVecI16x8 */,\n  AddSatI16x8 = 135 /* _BinaryenAddSatSVecI16x8 */,\n  AddSatU16x8 = 136 /* _BinaryenAddSatUVecI16x8 */,\n  SubI16x8 = 137 /* _BinaryenSubVecI16x8 */,\n  SubSatI16x8 = 138 /* _BinaryenSubSatSVecI16x8 */,\n  SubSatU16x8 = 139 /* _BinaryenSubSatUVecI16x8 */,\n  MulI16x8 = 140 /* _BinaryenMulVecI16x8 */,\n  MinI16x8 = 141 /* _BinaryenMinSVecI16x8 */,\n  MinU16x8 = 142 /* _BinaryenMinUVecI16x8 */,\n  MaxI16x8 = 143 /* _BinaryenMaxSVecI16x8 */,\n  MaxU16x8 = 144 /* _BinaryenMaxUVecI16x8 */,\n  AvgrU16x8 = 145 /* _BinaryenAvgrUVecI16x8 */,\n  AddI32x4 = 146 /* _BinaryenAddVecI32x4 */,\n  SubI32x4 = 147 /* _BinaryenSubVecI32x4 */,\n  MulI32x4 = 148 /* _BinaryenMulVecI32x4 */,\n  MinI32x4 = 149 /* _BinaryenMinSVecI32x4 */,\n  MinU32x4 = 150 /* _BinaryenMinUVecI32x4 */,\n  MaxI32x4 = 151 /* _BinaryenMaxSVecI32x4 */,\n  MaxU32x4 = 152 /* _BinaryenMaxUVecI32x4 */,\n  DotI16x8 = 153 /* _BinaryenDotSVecI16x8ToVecI32x4 */,\n  AddI64x2 = 154 /* _BinaryenAddVecI64x2 */,\n  SubI64x2 = 155 /* _BinaryenSubVecI64x2 */,\n\n  AddF32x4 = 157 /* _BinaryenAddVecF32x4 */,\n  SubF32x4 = 158 /* _BinaryenSubVecF32x4 */,\n  MulF32x4 = 159 /* _BinaryenMulVecF32x4 */,\n  DivF32x4 = 160 /* _BinaryenDivVecF32x4 */,\n  MinF32x4 = 161 /* _BinaryenMinVecF32x4 */,\n  MaxF32x4 = 162 /* _BinaryenMaxVecF32x4 */,\n  PminF32x4 = 163 /* _BinaryenPMinVecF32x4 */,\n  PmaxF32x4 = 164 /* _BinaryenPMaxVecF32x4 */,\n  AddF64x2 = 165 /* _BinaryenAddVecF64x2 */,\n  SubF64x2 = 166 /* _BinaryenSubVecF64x2 */,\n  MulF64x2 = 167 /* _BinaryenMulVecF64x2 */,\n  DivF64x2 = 168 /* _BinaryenDivVecF64x2 */,\n  MinF64x2 = 169 /* _BinaryenMinVecF64x2 */,\n  MaxF64x2 = 170 /* _BinaryenMaxVecF64x2 */,\n  PminF64x2 = 171 /* _BinaryenPMinVecF64x2 */,\n  PmaxF64x2 = 172 /* _BinaryenPMaxVecF64x2 */,\n  NarrowI16x8ToI8x16 = 173 /* _BinaryenNarrowSVecI16x8ToVecI8x16 */,\n  NarrowU16x8ToU8x16 = 174 /* _BinaryenNarrowUVecI16x8ToVecI8x16 */,\n  NarrowI32x4ToI16x8 = 175 /* _BinaryenNarrowSVecI32x4ToVecI16x8 */,\n  NarrowU32x4ToU16x8 = 176 /* _BinaryenNarrowUVecI32x4ToVecI16x8 */,\n  SwizzleV8x16 = 177 /* _BinaryenSwizzleVec8x16 */\n}\n\nexport enum AtomicRMWOp {\n  Add = 0 /* _BinaryenAtomicRMWAdd */,\n  Sub = 1 /* _BinaryenAtomicRMWSub */,\n  And = 2 /* _BinaryenAtomicRMWAnd */,\n  Or = 3 /* _BinaryenAtomicRMWOr */,\n  Xor = 4 /* _BinaryenAtomicRMWXor */,\n  Xchg = 5 /* _BinaryenAtomicRMWXchg */\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneI8x16 = 0 /* _BinaryenExtractLaneSVecI8x16 */,\n  ExtractLaneU8x16 = 1 /* _BinaryenExtractLaneUVecI8x16 */,\n  ExtractLaneI16x8 = 2 /* _BinaryenExtractLaneSVecI16x8 */,\n  ExtractLaneU16x8 = 3 /* _BinaryenExtractLaneUVecI16x8 */,\n  ExtractLaneI32x4 = 4 /* _BinaryenExtractLaneVecI32x4 */,\n  ExtractLaneI64x2 = 5 /* _BinaryenExtractLaneVecI64x2 */,\n  ExtractLaneF32x4 = 6 /* _BinaryenExtractLaneVecF32x4 */,\n  ExtractLaneF64x2 = 7 /* _BinaryenExtractLaneVecF64x2 */,\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneI8x16 = 0 /* _BinaryenReplaceLaneVecI8x16 */,\n  ReplaceLaneI16x8 = 1 /* _BinaryenReplaceLaneVecI16x8 */,\n  ReplaceLaneI32x4 = 2 /* _BinaryenReplaceLaneVecI32x4 */,\n  ReplaceLaneI64x2 = 3 /* _BinaryenReplaceLaneVecI64x2 */,\n  ReplaceLaneF32x4 = 4 /* _BinaryenReplaceLaneVecF32x4 */,\n  ReplaceLaneF64x2 = 5 /* _BinaryenReplaceLaneVecF64x2 */\n}\n\nexport enum SIMDShiftOp {\n  ShlI8x16 = 0 /* _BinaryenShlVecI8x16 */,\n  ShrI8x16 = 1 /* _BinaryenShrSVecI8x16 */,\n  ShrU8x16 = 2 /* _BinaryenShrUVecI8x16 */,\n  ShlI16x8 = 3 /* _BinaryenShlVecI16x8 */,\n  ShrI16x8 = 4 /* _BinaryenShrSVecI16x8 */,\n  ShrU16x8 = 5 /* _BinaryenShrUVecI16x8 */,\n  ShlI32x4 = 6 /* _BinaryenShlVecI32x4 */,\n  ShrI32x4 = 7 /* _BinaryenShrSVecI32x4 */,\n  ShrU32x4 = 8 /* _BinaryenShrUVecI32x4 */,\n  ShlI64x2 = 9 /* _BinaryenShlVecI64x2 */,\n  ShrI64x2 = 10 /* _BinaryenShrSVecI64x2 */,\n  ShrU64x2 = 11 /* _BinaryenShrUVecI64x2 */\n}\n\nexport enum SIMDTernaryOp {\n  Bitselect = 0 /* _BinaryenBitselectVec128 */,\n  QFMAF32x4 = 1 /* _BinaryenQFMAVecF32x4 */,\n  QFMSF32x4 = 2 /* _BinaryenQFMSVecF32x4 */,\n  QFMAF64x2 = 3 /* _BinaryenQFMAVecF64x2 */,\n  QFMSF64x2 = 4 /* _BinaryenQFMSVecF64x2 */\n}\n\nexport enum SIMDLoadOp {\n  LoadSplatV8x16 = 0 /* _BinaryenLoadSplatVec8x16 */,\n  LoadSplatV16x8 = 1 /* _BinaryenLoadSplatVec16x8 */,\n  LoadSplatV32x4 = 2 /* _BinaryenLoadSplatVec32x4 */,\n  LoadSplatV64x2 = 3 /* _BinaryenLoadSplatVec64x2 */,\n  LoadI8ToI16x8 = 4 /* _BinaryenLoadExtSVec8x8ToVecI16x8 */,\n  LoadU8ToU16x8 = 5 /* _BinaryenLoadExtUVec8x8ToVecI16x8 */,\n  LoadI16ToI32x4 = 6 /* _BinaryenLoadExtSVec16x4ToVecI32x4 */,\n  LoadU16ToU32x4 = 7 /* _BinaryenLoadExtUVec16x4ToVecI32x4 */,\n  LoadI32ToI64x2 = 8 /* _BinaryenLoadExtSVec32x2ToVecI64x2 */,\n  LoadU32ToU64x2 = 9 /* _BinaryenLoadExtUVec32x2ToVecI64x2 */\n}\n\nexport enum ExpressionRunnerFlags {\n  Default = 0 /* _ExpressionRunnerFlagsDefault */,\n  PreserveSideeffects = 1 /* _ExpressionRunnerFlagsPreserveSideeffects */,\n  TraverseCalls = 2 /* _ExpressionRunnerFlagsTraverseCalls */\n}\n\nexport class MemorySegment {\n  constructor(\n    /** Segment data. */\n    public buffer: Uint8Array,\n    /** Segment offset. */\n    public offset: i64\n  ) {}\n}\n\nexport class Module {\n  constructor(\n    /** Binaryen module reference. */\n    public ref: ModuleRef\n  ) {\n    this.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n  }\n\n  private lit: usize;\n\n  static create(): Module {\n    return new Module(binaryen._BinaryenModuleCreate());\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    var module = new Module(binaryen._BinaryenModuleRead(cArr, buffer.length));\n    binaryen._free(changetype<usize>(cArr));\n    return module;\n  }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat64(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) {\n      binaryen.__i32_store8(out + i, bytes[i]);\n    }\n    binaryen._BinaryenLiteralVec128(out, out);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  ref_null(type: NativeType): ExpressionRef {\n    return binaryen._BinaryenRefNull(this.ref, type);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenBinary(this.ref, op, left, right);\n  }\n\n  memory_size(): ExpressionRef {\n    return binaryen._BinaryenMemorySize(this.ref);\n  }\n\n  memory_grow(delta: ExpressionRef): ExpressionRef {\n    return binaryen._BinaryenMemoryGrow(this.ref, delta);\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) type = binaryen._BinaryenExpressionGetType(value);\n    return binaryen._BinaryenLocalTee(this.ref, index, value, type);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenLoad(this.ref, bytes, signed, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return binaryen._BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    var ret = binaryen._BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  /** Attempts to trivially flatten a series of expressions instead of emitting a block. */\n  flatten(\n    stmts: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var length = stmts.length;\n    if (length == 0) return this.nop(); // usually filtered out again\n    if (length == 1) {\n      let single = stmts[0];\n      switch (getExpressionId(single)) {\n        case ExpressionId.Return:\n        case ExpressionId.Throw:\n        case ExpressionId.Unreachable: {\n          // type does no matter, terminates anyway\n          return single;\n        }\n      }\n      let singleType = getExpressionType(single);\n      assert(singleType == NativeType.Unreachable || singleType == type);\n      return single;\n    }\n    return this.block(null, stmts, type);\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenDrop(this.ref, expression);\n  }\n\n  maybeDropCondition(condition: ExpressionRef, result: ExpressionRef): ExpressionRef {\n    // FIXME: This is necessary because Binaryen's ExpressionRunner bails early\n    // when encountering a local with an unknown value. This helper only drops\n    // the pre-evaluated condition if it has relevant side effects.\n    // see WebAssembly/binaryen#1237\n    if ((getSideEffects(condition) & ~(SideEffects.ReadsLocal | SideEffects.ReadsGlobal)) != 0) {\n      return this.block(null, [\n        this.drop(condition),\n        result\n      ], getExpressionType(result));\n    }\n    return result;\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return binaryen._BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) {\n      type = binaryen._BinaryenExpressionGetType(ifTrue);\n      assert(type == binaryen._BinaryenExpressionGetType(ifFalse));\n    }\n    return binaryen._BinaryenSelect(this.ref, condition, ifTrue, ifFalse, type);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocPtrArray(strs);\n    var cStr = this.allocStringCached(defaultName);\n    var ret = binaryen._BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCall(\n          this.ref, cStr, cArr, operands ? operands.length : 0, returnType\n        )\n      : binaryen._BinaryenCall(\n          this.ref, cStr, cArr, operands ? operands.length : 0, returnType\n        );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCallIndirect(\n          this.ref, index, cArr, operands ? operands.length : 0, params, results\n        )\n      : binaryen._BinaryenCallIndirect(\n          this.ref, index, cArr, operands ? operands.length : 0, params, results\n        );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, params, results, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return binaryen._BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  try(\n    body: ExpressionRef,\n    catchBody: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenTry(this.ref, body, catchBody);\n  }\n\n  throw(\n    eventName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(eventName);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  rethrow(\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRethrow(this.ref, exnref);\n  }\n\n  br_on_exn(\n    name: string,\n    eventName: string,\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    var cStr1 = this.allocStringCached(name);\n    var cStr2 = this.allocStringCached(eventName);\n    return binaryen._BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\n  }\n\n  // multi value (pseudo instructions)\n\n  pop(\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenPop(this.ref, type);\n  }\n\n  tuple_make(operands: ExpressionRef[]): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenTupleMake(this.ref, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  tuple_extract(tuple: ExpressionRef, index: Index): ExpressionRef {\n    return binaryen._BinaryenTupleExtract(this.ref, tuple, index);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    var ret = binaryen._BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n  }\n\n  // reference types\n\n  ref_is_null(\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRefIsNull(this.ref, expr);\n  }\n\n  ref_func(\n    name: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenRefFunc(this.ref, cStr);\n  }\n\n  // globals\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  getGlobal(\n    name: string\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetGlobal(this.ref, cStr);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  // events\n\n  addEvent(\n    name: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddEvent(this.ref, cStr, attribute, params, results);\n  }\n\n  getEvent(\n    name: string\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetEvent(this.ref, cStr);\n  }\n\n  removeEvent(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveEvent(this.ref, cStr);\n  }\n\n  // functions\n\n  addFunction(\n    name: string,\n    params: NativeType,\n    results: NativeType,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(varTypes);\n    var ret = binaryen._BinaryenAddFunction(\n      this.ref,\n      cStr,\n      params,\n      results,\n      cArr,\n      varTypes ? varTypes.length : 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(\n    result: NativeType,\n    paramTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocPtrArray(paramTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref,\n      tempName,\n      createType(paramTypes),\n      result,\n      0, 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    binaryen._BinaryenRemoveFunction(this.ref, tempName);\n  }\n\n  setStart(func: FunctionRef): void {\n    binaryen._BinaryenSetStart(this.ref, func);\n  }\n\n  // exports\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addEventExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddEventExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    binaryen._BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  // imports\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, params, results);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addEventImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddEventImport(\n      this.ref, cStr1, cStr2, cStr3, attribute, params, results\n    );\n  }\n\n  // memory\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let segment = segments[i];\n      let buffer = segment.buffer;\n      let offset = segment.offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocPtrArray(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocPtrArray(offs);\n    var cArr4 = allocU32Array(sizs);\n    binaryen._BinaryenSetMemory(\n      this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared\n    );\n    binaryen._free(cArr4);\n    binaryen._free(cArr3);\n    binaryen._free(cArr2);\n    binaryen._free(cArr1);\n    for (let i = k - 1; i >= 0; --i) {\n      binaryen._free(segs[i]);\n    }\n  }\n\n  // table\n\n  /** Unlimited table constant. */\n  static readonly UNLIMITED_TABLE: Index = <Index>-1;\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocPtrArray(names);\n    binaryen._BinaryenSetFunctionTable(\n      this.ref, initial, maximum, cArr, numNames, offset\n    );\n    binaryen._free(cArr);\n  }\n\n  // sections\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    binaryen._BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    binaryen._free(cArr);\n  }\n\n  // meta (global)\n\n  getOptimizeLevel(): i32 {\n    return binaryen._BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32): void {\n    binaryen._BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return binaryen._BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32): void {\n    binaryen._BinaryenSetShrinkLevel(level);\n  }\n\n  getDebugInfo(): boolean {\n    return binaryen._BinaryenGetDebugInfo();\n  }\n\n  setDebugInfo(on: bool): void {\n    binaryen._BinaryenSetDebugInfo(on);\n  }\n\n  getLowMemoryUnused(): bool {\n    return binaryen._BinaryenGetLowMemoryUnused();\n  }\n\n  setLowMemoryUnused(on: bool): void {\n    binaryen._BinaryenSetLowMemoryUnused(on);\n  }\n\n  getFastMath(): bool {\n    return binaryen._BinaryenGetFastMath();\n  }\n\n  setFastMath(on: bool): void {\n    binaryen._BinaryenSetFastMath(on);\n  }\n\n  getPassArgument(key: string): string | null {\n    var cStr = this.allocStringCached(key);\n    var ptr = binaryen._BinaryenGetPassArgument(cStr);\n    return ptr ? readString(ptr) : null;\n  }\n\n  setPassArgument(key: string, value: string | null): void {\n    var cStr1 = this.allocStringCached(key);\n    var cStr2 = this.allocStringCached(value);\n    binaryen._BinaryenSetPassArgument(cStr1, cStr2);\n  }\n\n  clearPassArguments(): void {\n    binaryen._BinaryenClearPassArguments();\n  }\n\n  getAlwaysInlineMaxSize(): Index {\n    return binaryen._BinaryenGetAlwaysInlineMaxSize();\n  }\n\n  setAlwaysInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetAlwaysInlineMaxSize(size);\n  }\n\n  getFlexibleInlineMaxSize(): Index {\n    return binaryen._BinaryenGetFlexibleInlineMaxSize();\n  }\n\n  setFlexibleInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetFlexibleInlineMaxSize(size);\n  }\n\n  getOneCallerInlineMaxSize(): Index {\n    return binaryen._BinaryenGetOneCallerInlineMaxSize();\n  }\n\n  setOneCallerInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetOneCallerInlineMaxSize(size);\n  }\n\n  getAllowInliningFunctionsWithLoops(): bool {\n    return binaryen._BinaryenGetAllowInliningFunctionsWithLoops();\n  }\n\n  setAllowInliningFunctionsWithLoops(enabled: bool): void {\n    binaryen._BinaryenSetAllowInliningFunctionsWithLoops(enabled);\n  }\n\n  // meta (module)\n\n  getFeatures(): FeatureFlags {\n    return binaryen._BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: FeatureFlags): void {\n    binaryen._BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  runPass(pass: string, func: FunctionRef = 0): void {\n    var cStr = allocString(pass);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cStr, 1);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cStr, 1);\n    }\n    binaryen._free(cStr);\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var cStrs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      cStrs[i] = allocString(passes[i]);\n    }\n    var cArr = allocPtrArray(cStrs);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cArr, numNames);\n    }\n    binaryen._free(cArr);\n    for (let i = numNames; i >= 0; --i) binaryen._free(cStrs[i]);\n  }\n\n  optimize(optimizeLevel: i32, shrinkLevel: i32, debugInfo: bool = false, usesARC: bool = true): void {\n    // Implicitly run costly non-LLVM optimizations on -O3 or -Oz\n    if (optimizeLevel >= 3 || shrinkLevel >= 2) optimizeLevel = 4;\n\n    this.setOptimizeLevel(optimizeLevel);\n    this.setShrinkLevel(shrinkLevel);\n    this.setDebugInfo(debugInfo);\n    this.setFastMath(true);\n    this.clearPassArguments();\n\n    // Tweak inlining limits based on optimization levels\n    if (optimizeLevel >= 2 && shrinkLevel == 0) {\n      this.setAlwaysInlineMaxSize(12);\n      this.setFlexibleInlineMaxSize(70);\n      this.setOneCallerInlineMaxSize(200);\n      this.setAllowInliningFunctionsWithLoops(optimizeLevel >= 3);\n    } else {\n      this.setAlwaysInlineMaxSize(\n        optimizeLevel <= 1 || shrinkLevel >= 2\n          ? 2\n          : 6\n      );\n      this.setFlexibleInlineMaxSize(65);\n      this.setOneCallerInlineMaxSize(80);\n      this.setAllowInliningFunctionsWithLoops(false);\n    }\n\n    // Pass order here differs substantially from Binaryen's defaults\n    // see: Binaryen/src/pass.cpp\n    if (optimizeLevel > 0 || shrinkLevel > 0) {\n      let passes = new Array<string>();\n\n      // --- PassRunner::addDefaultGlobalOptimizationPrePasses ---\n\n      passes.push(\"duplicate-function-elimination\");\n      passes.push(\"remove-unused-module-elements\"); // +\n\n      // --- PassRunner::addDefaultFunctionOptimizationPasses ---\n\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"simplify-locals-notee-nostructure\");\n        passes.push(\"rse\");\n        passes.push(\"vacuum\");\n        passes.push(\"ssa-nomerge\");\n        passes.push(\"simplify-globals-optimizing\");\n        passes.push(\"remove-unused-brs\");\n        passes.push(\"remove-unused-names\");\n        passes.push(\"merge-blocks\");\n        passes.push(\"precompute-propagate\");\n      }\n      if (optimizeLevel >= 3) {\n        passes.push(\"flatten\");\n        passes.push(\"simplify-locals-notee-nostructure\");\n        passes.push(\"merge-locals\");\n        passes.push(\"vacuum\");\n\n        passes.push(\"code-folding\");\n        passes.push(\"flatten\");\n        passes.push(\"local-cse\");\n        passes.push(\"reorder-locals\");\n      }\n      // FIXME: see issue #1288\n      // if (usesARC) {\n      //   if (optimizeLevel < 3) {\n      //     passes.push(\"flatten\");\n      //   }\n      //   passes.push(\"post-assemblyscript\");\n      // }\n      passes.push(\"optimize-instructions\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"dce\");\n      }\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"remove-unused-names\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 2) {\n        passes.push(\"inlining\");\n        passes.push(\"precompute-propagate\");\n      } else {\n        passes.push(\"precompute\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"pick-load-signs\");\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      if (optimizeLevel >= 3 && shrinkLevel <= 1) {\n        passes.push(\"licm\");\n      }\n      passes.push(\"simplify-locals-nostructure\");\n      passes.push(\"vacuum\");\n\n      passes.push(\"reorder-locals\");\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"coalesce-locals\");\n      passes.push(\"simplify-locals\");\n      passes.push(\"vacuum\");\n\n      passes.push(\"reorder-locals\");\n      passes.push(\"coalesce-locals\");\n      passes.push(\"reorder-locals\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"merge-locals\");\n      }\n      passes.push(\"vacuum\");\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      passes.push(\"merge-blocks\");\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"remove-unused-names\");\n      passes.push(\"merge-blocks\");\n      if (optimizeLevel >= 3) {\n        passes.push(\"optimize-instructions\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n        passes.push(\"vacuum\");\n      }\n\n      // --- PassRunner::addDefaultGlobalOptimizationPostPasses ---\n\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"simplify-globals-optimizing\");\n        passes.push(\"dae-optimizing\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 2) {\n        passes.push(\"inlining-optimizing\");\n      }\n      if (this.getLowMemoryUnused()) {\n        if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n          passes.push(\"optimize-added-constants-propagate\");\n        } else {\n          passes.push(\"optimize-added-constants\");\n        }\n      }\n      passes.push(\"duplicate-import-elimination\");\n      if (optimizeLevel >= 2 || shrinkLevel >= 2) {\n        passes.push(\"simplify-globals-optimizing\");\n      } else {\n        passes.push(\"simplify-globals\");\n        passes.push(\"vacuum\");\n      }\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"code-folding\");\n      }\n      // precompute works best after global optimizations\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"precompute-propagate\");\n      } else {\n        passes.push(\"precompute\");\n      }\n      passes.push(\"directize\"); // replace indirect with direct calls\n      passes.push(\"dae-optimizing\"); // reduce arity\n      passes.push(\"inlining-optimizing\"); // and inline if possible\n      if (usesARC) {\n        // works best after inlining to cover most retains/releases\n        passes.push(\"post-assemblyscript-finalize\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n        // move code on early return (after CFG cleanup)\n        passes.push(\"code-pushing\");\n        if (optimizeLevel >= 3) {\n          // very expensive, so O3 only\n          passes.push(\"simplify-globals\");\n          passes.push(\"vacuum\");\n\n          passes.push(\"precompute-propagate\");\n\n          // replace indirect with direct calls again and inline\n          passes.push(\"inlining-optimizing\");\n          passes.push(\"directize\");\n          passes.push(\"dae-optimizing\");\n\n          passes.push(\"merge-locals\");\n          passes.push(\"coalesce-locals\");\n          passes.push(\"simplify-locals\");\n          passes.push(\"vacuum\");\n\n          passes.push(\"inlining\");\n          passes.push(\"precompute-propagate\");\n          passes.push(\"vacuum\");\n\n          passes.push(\"coalesce-locals\");\n        }\n        passes.push(\"remove-unused-brs\");\n        passes.push(\"remove-unused-names\");\n        passes.push(\"vacuum\");\n\n        passes.push(\"optimize-instructions\");\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      // clean up\n      passes.push(\"duplicate-function-elimination\");\n      passes.push(\"remove-unused-nonfunction-module-elements\");\n      passes.push(\"memory-packing\");\n      passes.push(\"remove-unused-module-elements\");\n\n      this.runPasses(passes);\n    }\n  }\n\n  validate(): bool {\n    return binaryen._BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    binaryen._BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null = null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(binaryen._BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    binaryen._BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n    binaryPtr = assert(binaryen.__i32_load(out));\n    var binaryLen = binaryen.__i32_load(out + 4);\n    sourceMapPtr = binaryen.__i32_load(out + 8); // may be NULL\n    var binary = new BinaryModule(readBuffer(binaryPtr, binaryLen), readString(sourceMapPtr));\n    if (cStr) binaryen._free(cStr);\n    binaryen._free(binaryPtr);\n    if (sourceMapPtr) binaryen._free(sourceMapPtr);\n    return binary;\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str === null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    // TODO: for (let ptr of this.cachedStrings.values()) {\n    for (let _values = Map_values(this.cachedStrings), i = 0, k = _values.length; i < k; ++i) {\n      let ptr = unchecked(_values[i]);\n      binaryen._free(ptr);\n    }\n    this.cachedStrings = new Map();\n    binaryen._free(this.lit);\n    binaryen._BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (binaryen._BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (<u32>binaryen._BinaryenExpressionGetType(expr)) {\n          case <u32>NativeType.I32: {\n            return this.i32(binaryen._BinaryenConstGetValueI32(expr));\n          }\n          case <u32>NativeType.I64: {\n            return this.i64(\n              binaryen._BinaryenConstGetValueI64Low(expr),\n              binaryen._BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case <u32>NativeType.F32: {\n            return this.f32(binaryen._BinaryenConstGetValueF32(expr));\n          }\n          case <u32>NativeType.F64: {\n            return this.f64(binaryen._BinaryenConstGetValueF64(expr));\n          }\n          case <u32>NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          // Not possible to clone an externref as it is opaque\n          case <u32>NativeType.Externref: {\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return binaryen._BinaryenLocalGet(this.ref,\n          binaryen._BinaryenLocalGetGetIndex(expr),\n          binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = binaryen._BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return binaryen._BinaryenGlobalGet(\n          this.ref, globalName, binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(\n          binaryen._BinaryenLoadGetPtr(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        return (\n          binaryen._BinaryenLoadIsAtomic(expr)\n            ? binaryen._BinaryenAtomicLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : binaryen._BinaryenLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadIsSigned(expr),\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenLoadGetAlign(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(\n          binaryen._BinaryenUnaryGetValue(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        return binaryen._BinaryenUnary(\n          this.ref, binaryen._BinaryenUnaryGetOp(expr), nested1\n        );\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(\n          binaryen._BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(\n          binaryen._BinaryenBinaryGetRight(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        return binaryen._BinaryenBinary(\n          this.ref, binaryen._BinaryenBinaryGetOp(expr), nested1, nested2\n        );\n      }\n    }\n    return 0;\n  }\n\n  copyExpression(expr: ExpressionRef): ExpressionRef {\n    return binaryen._BinaryenExpressionCopy(expr, this.ref);\n  }\n\n  runExpression(\n    expr: ExpressionRef,\n    flags: ExpressionRunnerFlags,\n    maxDepth: i32 = 50,\n    maxLoopIterations: i32 = 1\n  ): ExpressionRef {\n    var runner = binaryen._ExpressionRunnerCreate(this.ref, flags, maxDepth, maxLoopIterations);\n    var precomp =  binaryen._ExpressionRunnerRunAndDispose(runner, expr);\n    if (precomp) {\n      assert(getExpressionId(precomp) == ExpressionId.Const);\n      assert(getExpressionType(precomp) == getExpressionType(expr));\n    }\n    return precomp;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    var ret = binaryen._BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    binaryen._free(cStr);\n    return ret;\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(binaryen._BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    binaryen._BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// types\n\nexport function createType(types: NativeType[] | null): NativeType {\n  if (!types) return NativeType.None;\n  switch (types.length) {\n    case 0: return NativeType.None;\n    case 1: return types[0];\n  }\n  var cArr = allocPtrArray(types);\n  var ret = binaryen._BinaryenTypeCreate(cArr, types.length);\n  binaryen._free(cArr);\n  return ret;\n}\n\nexport function expandType(type: NativeType): NativeType[] {\n  var arity = binaryen._BinaryenTypeArity(type);\n  var cArr = binaryen._malloc(<usize>arity << 2);\n  binaryen._BinaryenTypeExpand(type, cArr);\n  var types = new Array<NativeType>(arity);\n  for (let i: u32 = 0; i < arity; ++i) {\n    types[i] = binaryen.__i32_load(cArr + (<usize>i << 2));\n  }\n  binaryen._free(cArr);\n  return types;\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return binaryen._BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return binaryen._BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f64 {\n  return binaryen._BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return binaryen._BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return binaryen._BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChildAt(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenBlockGetChildAt(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperandAt(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenCallGetOperandAt(expr, index);\n}\n\nexport function getMemoryGrowDelta(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenMemoryGrowGetDelta(expr);\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return binaryen._BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(binaryen._BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParams(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetParams(func);\n}\n\nexport function getFunctionResults(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetResults(func);\n}\n\nexport function getFunctionVars(func: FunctionRef): NativeType[] {\n  var count = binaryen._BinaryenFunctionGetNumVars(func);\n  var types = new Array<NativeType>(count);\n  for (let i: Index = 0; i < count; ++i) {\n    types[i] = binaryen._BinaryenFunctionGetVar(func, i);\n  }\n  return types;\n}\n\n// globals\n\nexport function getGlobalName(global: GlobalRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetName(global));\n}\n\nexport function getGlobalType(global: GlobalRef): NativeType {\n  return binaryen._BinaryenGlobalGetType(global);\n}\n\nexport function isGlobalMutable(global: GlobalRef): bool {\n  return binaryen._BinaryenGlobalIsMutable(global);\n}\n\nexport function getGlobalInit(global: GlobalRef): ExpressionRef {\n  return binaryen._BinaryenGlobalGetInitExpr(global);\n}\n\n// events\n\nexport function getEventName(event: EventRef): string | null {\n  return readString(binaryen._BinaryenEventGetName(event));\n}\n\nexport function getEventAttribute(event: EventRef): u32 {\n  return binaryen._BinaryenEventGetAttribute(event);\n}\n\nexport function getEventParams(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetParams(event);\n}\n\nexport function getEventResults(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetResults(event);\n}\n\nexport class Relooper {\n  constructor(\n    /** Module this relooper belongs to. */\n    public module: Module,\n    /** Binaryen relooper reference. */\n    public ref: RelooperRef\n  ) {}\n\n  static create(module: Module): Relooper {\n    return new Relooper(module, binaryen._RelooperCreate(module.ref));\n  }\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    binaryen._RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    binaryen._RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    binaryen._free(cArr);\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return binaryen._RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n/** Builds a switch using a sequence of `br_if`s. */\nexport class SwitchBuilder {\n  // This is useful because Binaryen understands sequences of `br_if`s and\n  // knows how to make a `br_table` from such a sequence if switched over\n  // values are considered dense enough, respectively a size-efficient sequence\n  // of `if`s if not, depending on optimization levels.\n\n  private module: Module;\n  private condition: ExpressionRef;\n  private values: i32[] = new Array();\n  private indexes: i32[] = new Array();\n  private cases: ExpressionRef[][] = new Array();\n  private defaultIndex: i32 = -1;\n\n  /** Creates a new builder using the specified i32 condition. */\n  constructor(module: Module, condition: ExpressionRef) {\n    this.module = module;\n    this.condition = condition;\n  }\n\n  /** Links a case to the specified branch. */\n  addCase(value: i32, code: ExpressionRef[]): void {\n    var cases = this.cases;\n    var index = cases.indexOf(code);\n    if (index < 0) {\n      index = cases.length;\n      cases.push(code);\n    }\n    this.values.push(value);\n    this.indexes.push(index);\n  }\n\n  /** Links the default branch. */\n  addDefault(code: ExpressionRef[]): void {\n    assert(this.defaultIndex == -1);\n    var cases = this.cases;\n    this.defaultIndex = cases.length;\n    cases.push(code);\n  }\n\n  /** Renders the switch to a block. */\n  render(localIndex: i32, labelPostfix: string = \"\"): ExpressionRef {\n    var module = this.module;\n    var cases = this.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return module.drop(this.condition);\n    }\n    var values = this.values;\n    var numValues = values.length;\n    var indexes = this.indexes;\n    var entry = new Array<ExpressionRef>(1 + numValues + 1);\n    var labels = new Array<string>(numCases);\n    for (let i = 0; i < numCases; ++i) {\n      labels[i] = \"case\" + i.toString() + labelPostfix;\n    }\n    entry[0] = module.local_set(localIndex, this.condition);\n    for (let i = 0; i < numValues; ++i) {\n      let index = indexes[i];\n      entry[1 + i] = module.br(labels[index],\n        module.binary(BinaryOp.EqI32,\n          module.local_get(localIndex, NativeType.I32),\n          module.i32(values[i])\n        )\n      );\n    }\n    var defaultIndex = this.defaultIndex;\n    var defaultLabel = \"default\" + labelPostfix;\n    entry[1 + numValues] = module.br(\n      ~defaultIndex\n        ? labels[defaultIndex]\n        : defaultLabel\n    );\n    var current = module.block(labels[0], entry);\n    for (let i = 1; i < numCases; ++i) {\n      let block = cases[i - 1];\n      block.unshift(current);\n      current = module.block(labels[i], block);\n    }\n    var lastCase = cases[numCases - 1];\n    lastCase.unshift(current);\n    return module.block(\n      ~defaultIndex\n        ? null\n        : defaultLabel,\n      lastCase\n    );\n  }\n}\n\nexport enum SideEffects {\n  None = 0 /* _BinaryenSideEffectNone */,\n  Branches = 1 /* _BinaryenSideEffectBranches */,\n  Calls = 2 /* _BinaryenSideEffectCalls */,\n  ReadsLocal = 4 /* _BinaryenSideEffectReadsLocal */,\n  WritesLocal = 8 /* _BinaryenSideEffectWritesLocal */,\n  ReadsGlobal = 16 /* _BinaryenSideEffectReadsGlobal */,\n  WritesGlobal = 32 /* _BinaryenSideEffectWritesGlobal */,\n  ReadsMemory = 64 /* _BinaryenSideEffectReadsMemory */,\n  WritesMemory = 128 /* _BinaryenSideEffectWritesMemory */,\n  ImplicitTrap = 256 /* _BinaryenSideEffectImplicitTrap */,\n  IsAtomic = 512 /* _BinaryenSideEffectIsAtomic */,\n  Throws = 1024 /* _BinaryenSideEffectThrows */,\n  DanglingPop = 2048 /* _BinaryenSideEffectDanglingPop */,\n  Any = 4095 /* _BinaryenSideEffectAny */\n}\n\nexport function getSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): SideEffects {\n  return binaryen._BinaryenExpressionGetSideEffects(expr, features);\n}\n\nexport function hasSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): bool {\n  return getSideEffects(expr, features) != SideEffects.None;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var len = u8s.length;\n  var ptr = binaryen._malloc(len);\n  for (let i = 0; i < len; ++i) {\n    binaryen.__i32_store8(ptr + i, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var len = i32s.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0; i < len; ++i) {\n    let val = i32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocU32Array(u32s: u32[] | null): usize {\n  if (!u32s) return 0;\n  var len = u32s.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0; i < len; ++i) {\n    let val = u32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  if (!ptrs) return 0;\n  // TODO: WASM64\n  assert(ASC_TARGET != Target.WASM64);\n  var len = ptrs.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0, k = len; i < k; ++i) {\n    let val = ptrs[i];\n    binaryen.__i32_store(idx, <i32>val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      len += 1;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else {\n      len += 4;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str === null) return 0;\n  var ptr = binaryen._malloc(stringLengthUTF8(str) + 1) >>> 0;\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      binaryen.__i32_store8(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      binaryen.__i32_store8(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      binaryen.__i32_store8(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      assert(u < 0x200000, \"Invalid Unicode code point during allocString\");\n      binaryen.__i32_store8(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  binaryen.__i32_store8(idx, 0);\n  return ptr;\n}\n\nfunction readBuffer(ptr: usize, len: i32): Uint8Array {\n  var ret = new Uint8Array(len);\n  for (let i = 0; i < len; ++i) {\n    ret[i] = binaryen.__i32_load8_u(ptr + <usize>i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32;\n  while (cp = binaryen.__i32_load8_u(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = binaryen.__i32_load8_u(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        assert(false, \"Invalid UTF8 sequence during readString\");\n      }\n    }\n    if (cp < 0x10000) {\n      arr.push(cp);\n    } else {\n      let ch = cp - 0x10000;\n      arr.push(0xD800 | (ch >>> 10));\n      arr.push(0xDC00 | (ch & 0x3FF));\n    }\n  }\n  return String.fromCharCodes(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  constructor(\n    /** WebAssembly binary. */\n    public output: Uint8Array,\n    /** Source map, if generated. */\n    public sourceMap: string | null\n  ) {}\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (binaryen._BinaryenExpressionGetType(expr) != NativeType.Unreachable) {\n    return false;\n  }\n\n  switch (binaryen._BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: {\n      return binaryen._BinaryenBreakGetCondition(expr) != 0;\n    }\n    case ExpressionId.Block: {\n      if (!binaryen._BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = binaryen._BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return (\n          numChildren > 0 &&\n          needsExplicitUnreachable(binaryen._BinaryenBlockGetChildAt(expr, numChildren - 1))\n        );\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(\n  expr:  ExpressionRef,\n  data:  T,\n  visit: (expr: ExpressionRef, data: T) => void\n): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i: Index = 0, n = binaryen._BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(binaryen._BinaryenBlockGetChildAt(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(binaryen._BinaryenIfGetCondition(expr), data);\n      visit(binaryen._BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = binaryen._BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(binaryen._BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = binaryen._BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(binaryen._BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i: Index = 0, n = binaryen._BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallGetOperandAt(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i: Index = 0, n = binaryen._BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallIndirectGetOperandAt(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(binaryen._BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(binaryen._BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(binaryen._BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(binaryen._BinaryenStoreGetPtr(expr), data);\n      visit(binaryen._BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(binaryen._BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(binaryen._BinaryenBinaryGetLeft(expr), data);\n      visit(binaryen._BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(binaryen._BinaryenSelectGetIfTrue(expr), data);\n      visit(binaryen._BinaryenSelectGetIfFalse(expr), data);\n      visit(binaryen._BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(binaryen._BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(binaryen._BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.MemorySize:\n      break;\n    case ExpressionId.MemoryGrow:\n      visit(binaryen._BinaryenMemoryGrowGetDelta(expr), data);\n      break;\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(binaryen._BinaryenAtomicRMWGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(binaryen._BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(binaryen._BinaryenAtomicWaitGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(binaryen._BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(binaryen._BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(binaryen._BinaryenSIMDReplaceGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(binaryen._BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(binaryen._BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      visit(binaryen._BinaryenSIMDTernaryGetA(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetB(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetC(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(binaryen._BinaryenSIMDShiftGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      visit(binaryen._BinaryenSIMDLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(binaryen._BinaryenMemoryInitGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetOffset(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(binaryen._BinaryenMemoryCopyGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSource(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(binaryen._BinaryenMemoryFillGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetValue(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.RefNull: {\n      break;\n    }\n    case ExpressionId.RefIsNull: {\n      visit(binaryen._BinaryenRefIsNullGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.RefFunc: {\n      break;\n    }\n    case ExpressionId.Try: {\n      visit(binaryen._BinaryenTryGetBody(expr), data);\n      visit(binaryen._BinaryenTryGetCatchBody(expr), data);\n      break;\n    }\n    case ExpressionId.Throw: {\n      for (let i: Index = 0, n = binaryen._BinaryenThrowGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenThrowGetOperandAt(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      visit(binaryen._BinaryenRethrowGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.BrOnExn: {\n      visit(binaryen._BinaryenBrOnExnGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.TupleMake: {\n      for (let i: Index = 0, n = binaryen._BinaryenTupleMakeGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenTupleMakeGetOperandAt(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.TupleExtract: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * @fileoverview Mappings from AssemblyScript types to WebAssembly types.\n * @license Apache-2.0\n */\n\nimport {\n  Class,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  createType\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** Function reference. */\n  FUNCREF,\n  /** External reference. */\n  EXTERNREF,\n  /** Exception reference. */\n  EXNREF,\n  /** Any reference. */\n  ANYREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a varying (in size) type. */\n  VARYING = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10,\n  /** Is an external type. */\n  EXTERNAL = 1 << 11,\n  /** Is a class. */\n  CLASS = 1 << 12,\n  /** Is a function. */\n  FUNCTION = 1 << 13\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: i32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  private _nonNullableType: Type | null = null;\n  /** Respective nullable type, if non-nullable. */\n  private _nullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    if (!(flags & TypeFlags.NULLABLE)) {\n      this._nonNullableType = this;\n    } else {\n      this._nullableType = this;\n    }\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    if (this == Type.auto) return this; // keep auto as a hint\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this type represents a basic value. */\n  get isValue(): bool {\n    return this.is(TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents an integer value. */\n  get isIntegerValue(): bool {\n    return this.is(TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a small (< 32 bits) integer value. */\n  get isShortIntegerValue(): bool {\n    return this.is(TypeFlags.SHORT | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a long (> 32 bits) integer value. */\n  get isLongIntegerValue(): bool {\n    return this.is(TypeFlags.LONG | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a signed integer value. */\n  get isSignedIntegerValue(): bool {\n    return this.is(TypeFlags.SIGNED | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents an unsigned integer value. */\n  get isUnsignedIntegerValue(): bool {\n    return this.is(TypeFlags.UNSIGNED | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a varying (in size) integer value. */\n  get isVaryingIntegerValue(): bool {\n    return this.is(TypeFlags.VARYING | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents an integer, including references.  */\n  get isIntegerInclReference(): bool {\n    return this.is(TypeFlags.INTEGER);\n  }\n\n  /** Tests if this type represents a floating point value. */\n  get isFloatValue(): bool {\n    return this.is(TypeFlags.FLOAT | TypeFlags.VALUE);\n  }\n  \n  /** Tests if this type represents a numeric (integer or floating point) value. */\n  get isNumericValue(): bool {\n    return this.isIntegerValue || this.isFloatValue;\n  }\n\n  /** Tests if this type represents a boolean value. */\n  get isBooleanValue(): bool {\n    return this == Type.bool;\n  }\n\n  /** Tests if this type represents a vector value. */\n  get isVectorValue(): bool {\n    return this.is(TypeFlags.VECTOR | TypeFlags.VALUE);\n  }\n  \n  /** Tests if this type represents an internal or external reference. */\n  get isReference(): bool {\n    return this.is(TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents a nullable internal or external reference. */\n  get isNullableReference(): bool {\n    return this.is(TypeFlags.NULLABLE | TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents an internal object. */\n  get isInternalReference(): bool {\n    return this.is(TypeFlags.INTEGER | TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents an external object. */\n  get isExternalReference(): bool {\n    return this.is(TypeFlags.EXTERNAL | TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents a class. */\n  get isClass(): bool {\n    return this.isInternalReference\n      ? this.classReference !== null\n      : false;\n  }\n\n  /** Gets the underlying class of this type, if any. */\n  getClass(): Class | null {\n    return this.isInternalReference\n      ? this.classReference\n      : null;\n  }\n\n  /** Gets the underlying class or wrapper class of this type, if any. */\n  getClassOrWrapper(program: Program): Class | null {\n    let classReference = this.getClass();\n    if (classReference) {\n      // typical class\n      return classReference;\n    } else {\n      let signatureReference = this.getSignature();\n      if (signatureReference) {\n        // function wrapper\n        let type = signatureReference.type;\n        let wrapper = assert(program.resolver.resolveClass(program.functionPrototype, [ type ]));\n        wrapper.wrappedType = type;\n        return wrapper;\n      } else {\n        let wrapperClasses = program.wrapperClasses;\n        if (wrapperClasses.has(this)) {\n          // value wrapper\n          return assert(wrapperClasses.get(this));\n        }\n      }\n    }\n    return null;\n  }\n\n  /** Tests if this type represents a function. */\n  get isFunction(): bool {\n    return this.isInternalReference\n      ? this.signatureReference !== null\n      : false;\n  }\n\n  /** Gets the underlying function signature of this type, if any. */\n  getSignature(): Signature | null {\n    return this.isInternalReference\n      ? this.signatureReference\n      : null;\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    if (this.isInternalReference) {\n      let classReference = this.classReference;\n      if (classReference) return !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n      return this.signatureReference !== null; // function references are managed\n    }\n    return false;\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Gets the corresponding non-nullable type. */\n  get nonNullableType(): Type {\n    if (this.isExternalReference) {\n      return this; // TODO\n    }\n    return assert(this._nonNullableType); // set either in ctor or asNullable\n  }\n\n  /** Gets the corresponding nullable type, if applicable. */\n  get nullableType(): Type | null {\n    return this._nullableType; // set either in ctor or asNullable\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): i32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): i32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.isInternalReference);\n    var nullableType = this._nullableType;\n    if (!nullableType) {\n      assert(!this.isNullableReference);\n      this._nullableType = nullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      nullableType.classReference = this.classReference;         // either a class reference\n      nullableType.signatureReference = this.signatureReference; // or a function reference\n      nullableType._nonNullableType = this;\n    }\n    return nullableType;\n  }\n\n  /** Tests if this type equals the specified. */\n  equals(other: Type): bool {\n    if (this.kind != other.kind) return false;\n    if (this.isReference) {\n      return (\n        this.classReference == other.classReference &&\n        this.signatureReference == other.signatureReference &&\n        this.isNullableReference == other.isNullableReference\n      );\n    }\n    return true;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.isReference) {\n      if (target.isReference) {\n        if (!this.isNullableReference || target.isNullableReference) {\n          if (currentClass = this.getClass()) {\n            if (targetClass = target.getClass()) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.getSignature()) {\n            if (targetFunction = target.getSignature()) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.isExternalReference && (this.kind == target.kind || target.kind == TypeKind.ANYREF)) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.isReference) {\n      if (this.isIntegerValue) {\n        if (target.isIntegerValue) {\n          if (\n            !signednessIsRelevant ||\n            this.isBooleanValue || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.isSignedIntegerValue == target.isSignedIntegerValue\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.isFloatValue) {\n        if (target.isFloatValue) {\n          return this.size <= target.size;\n        }\n      } else if (this.isVectorValue) {\n        if (target.isVectorValue) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.isReference) return this.isAssignableTo(target);\n    else if (target.isReference) return false;\n    // not dealing with references from here on\n    if (this.isIntegerValue) {\n      return target.isIntegerValue && target.size == this.size && (\n        !signednessIsRelevant ||\n        this.isSignedIntegerValue == target.isSignedIntegerValue\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    // special in that it allows integer references as well\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(validWat: bool = false): string {\n    const nullablePostfix = validWat\n      ? \"|null\"\n      : \" | null\";\n    if (this.isReference) {\n      let classReference = this.getClass();\n      if (classReference) {\n        return this.isNullableReference\n          ? classReference.internalName + nullablePostfix\n          : classReference.internalName;\n      } else {\n        let signatureReference = this.getSignature();\n        if (signatureReference) {\n          return this.isNullableReference\n            ? \"(\" + signatureReference.toString(validWat) + \")\" + nullablePostfix\n            : signatureReference.toString(validWat);\n        }\n      }\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.FUNCREF: return \"funcref\";\n      case TypeKind.EXTERNREF: return \"externref\";\n      case TypeKind.EXNREF: return \"exnref\";\n      case TypeKind.ANYREF: return \"anyref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return NativeType.I32;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.FUNCREF: return NativeType.Funcref;\n      case TypeKind.EXTERNREF: return NativeType.Externref;\n      case TypeKind.EXNREF: return NativeType.Exnref;\n      case TypeKind.ANYREF: return NativeType.Anyref;\n      case TypeKind.VOID: return NativeType.None;\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** Function reference. */\n  static readonly funcref: Type = new Type(TypeKind.FUNCREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** External reference. */\n  static readonly externref: Type = new Type(TypeKind.EXTERNREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** Exception reference. */\n  static readonly exnref: Type = new Type(TypeKind.EXNREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** Any reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString(true);\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** Unique id representing this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    var usizeType = program.options.usizeType;\n    var type = new Type(usizeType.kind, usizeType.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, usizeType.size);\n    this.type = type;\n    type.signatureReference = this;\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    this.id = program.nextSignatureId++;\n    program.uniqueSignatures.push(this);\n  }\n\n  get nativeParams(): NativeType {\n    var thisType = this.thisType;\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    if (!numParameterTypes) {\n      if (!thisType) return NativeType.None;\n      return thisType.toNativeType();\n    }\n    if (thisType) {\n      let nativeTypes = new Array<NativeType>(1 + numParameterTypes);\n      nativeTypes[0] = thisType.toNativeType();\n      for (let i = 0; i < numParameterTypes; ++i) {\n        nativeTypes[i + 1] = parameterTypes[i].toNativeType();\n      }\n      return createType(nativeTypes);\n    }\n    return createType(typesToNativeTypes(parameterTypes));\n  }\n\n  get nativeResults(): NativeType {\n    return this.returnType.toNativeType();\n  }\n\n  /** Tests if this signature equals the specified. */\n  equals(other: Signature): bool {\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var otherThisType = other.thisType;\n    if (thisThisType !== null) {\n      if (otherThisType === null || !thisThisType.equals(otherThisType)) return false;\n    } else if (otherThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != other.hasRest) return false;\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var otherParameterTypes = other.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != otherParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      if (!thisParameterTypes[i].equals(otherParameterTypes[i])) return false;\n    }\n\n    // check return type\n    return this.returnType.equals(other.returnType);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature, requireSameSize: bool = false): bool {\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType !== null) {\n      if (targetThisType === null || !thisThisType.isAssignableTo(targetThisType)) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false; // TODO\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(validWat: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(validWat ? \"%28\" : \"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(validWat ? \"this:\" : \"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString(validWat));\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(validWat ? \"%2C\" : \", \");\n        if (i == restIndex) sb.push(\"...\");\n        sb.push(parameters[i].toString(validWat));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?\");\n      }\n    }\n    sb.push(validWat ? \"%29=>\" : \") => \");\n    sb.push(this.returnType.toString(validWat));\n    return sb.join(\"\");\n  }\n\n  /** Creates a clone of this signature that is safe to modify. */\n  clone(): Signature {\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    var cloneParameterTypes = new Array<Type>(numParameterTypes);\n    for (let i = 0; i < numParameterTypes; ++i) {\n      cloneParameterTypes[i] = parameterTypes[i];\n    }\n    return new Signature(this.program, cloneParameterTypes, this.returnType, this.thisType);\n  }\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * @fileoverview Resolve infrastructure to obtain types and elements.\n *\n * Similar to the compiler making instructions of expressions, the resolver\n * obtains metadata of expressions. As such, for each `compileX` method in\n * the compiler there is one `lookupX` method in the resolver returning the\n * respective IR element, respectively one `resolveX` method returning the\n * respective type of an expression. It is also able to make new elements,\n * like instances of classes given its concrete type arguments.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Interface,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  IndexSignature,\n  isTypedElement,\n  InterfacePrototype,\n  DeclaredElement\n} from \"./program\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonNames\n} from \"./common\";\n\nimport {\n  uniqueMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = assert(ctxTypes.get(simpleName));\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.isInternalReference) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    var shadowType = element.shadowType;\n    if (shadowType) {\n      element = shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes and interfaces\n      if (\n        element.kind == ElementKind.CLASS_PROTOTYPE ||\n        element.kind == ElementKind.INTERFACE_PROTOTYPE\n      ) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          uniqueMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n      let typeDefinition = <TypeDefinition>element;\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = typeDefinition.type;\n        if (node.isNullable) {\n          if (type.isInternalReference) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        let text = nameNode.identifier.text;\n        if (text == CommonNames.native) return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.indexof) return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.valueof) return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.returnof) return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n      }\n\n      // Resolve normally\n      let typeParameterNodes = typeDefinition.typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = uniqueMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        typeDefinition.typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (type.isInternalReference) return type.asNullable();\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_cannot_be_nullable,\n            nameNode.range, nameNode.identifier.text\n          );\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      let numTypeArguments = 0;\n      if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.getClassOrWrapper(this.program);\n    if (classReference) {\n      let overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n      if (overload) return overload.signature.returnType;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.getSignature();\n    if (signatureReference) return signatureReference.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_has_no_call_signatures,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = uniqueMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          argumentCount\n            ? Range.join(\n                typeArgumentNodes![0].range,\n                typeArgumentNodes![argumentCount - 1].range\n              )\n            : alternativeReportNode!.range,\n          (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(),\n          argumentCount.toString()\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            typeArgumentNodes![i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        typeArguments,\n        ctxFlow.actualFunction,\n        uniqueMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = uniqueMap<string,Type>(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.args;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n        if (!argumentExpression) { // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(), numArguments.toString()\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = assert(contextualTypeArguments.get(name));\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        uniqueMap<string,Type>(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, uniqueMap<string,Type>(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>node;\n      let typeArgumentNodes = namedTypeNode.typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName(namedTypeNode.name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = namedTypeNode.name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = assert(ctxTypes.get(name));\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let functionTypeNode = <FunctionTypeNode>node;\n      let parameterNodes = functionTypeNode.parameters;\n      if (parameterNodes !== null && parameterNodes.length > 0) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !functionTypeNode.explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes(functionTypeNode.returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes(functionTypeNode.explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      assert(type != Type.void);\n      let classReference = type.getClassOrWrapper(this.program);\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    let classReference = type.getClassOrWrapper(this.program);\n    if (classReference) return classReference;\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.getClass();\n        if (classReference) {\n          return classReference.type.asNullable();\n        } else {\n          let signatureReference = ctxType.getSignature();\n          if (signatureReference) {\n            return signatureReference.type.asNullable();\n          } else if (ctxType.isExternalReference) {\n            return ctxType; // TODO: nullable?\n          }\n        }\n        return this.program.options.usizeType;\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, uniqueMap<string,Type>(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let variableLikeElement = <VariableLikeElement>target;\n        let type = variableLikeElement.type;\n        assert(type != Type.void);\n        let classReference = type.getClassOrWrapper(this.program);\n        if (!classReference) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              node.property.range, propertyName, variableLikeElement.type.toString()\n            );\n          }\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let propertyInstance = this.resolveProperty(<PropertyPrototype>target, reportMode);\n        if (!propertyInstance) return null;\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (!classReference) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              node.property.range, propertyName, type.toString()\n            );\n          }\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let elementExpression = assert(this.currentElementExpression);\n        let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.getClassOrWrapper(this.program);\n        if (!classReference) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              node.property.range, propertyName, returnType.toString()\n            );\n          }\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        // Function with shadow type, i.e. function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        } else if (!target.is(CommonFlags.GENERIC)) {\n          // Inherit from 'Function' if not overridden, i.e. fn.call\n          let members = target.members;\n          if (!members || !members.has(propertyName)) {\n            let functionInstance = this.resolveFunction(<FunctionPrototype>target, null, uniqueMap<string,Type>(), ReportMode.SWALLOW);\n            if (functionInstance) {\n              let wrapper = functionInstance.type.getClassOrWrapper(this.program);\n              if (wrapper) target = wrapper;\n            }\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.INTERFACE_PROTOTYPE:\n      case ElementKind.CLASS:\n      case ElementKind.INTERFACE: {\n        do {\n          let members = target.members;\n          if (members !== null && members.has(propertyName)) {\n            let member = assert(members.get(propertyName));\n            if (member.kind == ElementKind.PROPERTY_PROTOTYPE) {\n              let propertyInstance = this.resolveProperty(<PropertyPrototype>member, reportMode);\n              if (!propertyInstance) return null;\n              member = propertyInstance;\n              if (propertyInstance.is(CommonFlags.STATIC)) {\n                this.currentThisExpression = null;\n              } else {\n                this.currentThisExpression = targetNode;\n              }\n            } else {\n              this.currentThisExpression = targetNode;\n            }\n            this.currentElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE, PROPERTY...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (\n            target.kind == ElementKind.CLASS_PROTOTYPE ||\n            target.kind == ElementKind.INTERFACE_PROTOTYPE\n          ) {\n            let classPrototype = <ClassPrototype>target;\n            let basePrototype = classPrototype.basePrototype;\n            if (basePrototype) {\n              target = basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (\n            target.kind == ElementKind.CLASS ||\n            target.kind == ElementKind.INTERFACE\n          ) {\n            let classInstance = <Class>target;\n            let baseInstance = classInstance.base;\n            if (baseInstance) {\n              target = baseInstance;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members !== null && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return assert(members.get(propertyName)); // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    let classReference = targetType.getClassOrWrapper(this.program);\n    if (classReference) {\n      do {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n        classReference = classReference.base;\n      } while(classReference);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: i64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (ctxType.isValue) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        let type = this.resolveType(\n          assert(node.toType), // must be set if not NONNULL\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n        if (!type) return null;\n        let element = this.getElementOfType(type);\n        if (element) return element;\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_illegal_in_this_context,\n            node.range, type.toString()\n          );\n        }\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return null;\n      }\n      case AssertionKind.NONNULL: {\n        return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let element = this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n        // if (!element) return null;\n        // if (element.kind == ElementKind.CLASS && (<Class>element).extends(this.program.arrayPrototype)) {\n        //   let elementType = assert((<Class>element).getTypeArgumentsTo(this.program.arrayPrototype))[0];\n        //   return this.resolveClass(this.program.readonlyArrayPrototype, [ elementType ]);\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          node.range,\n          \"Const assertion\"\n        );\n        return null;\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        return this.resolveType(\n          assert(node.toType),\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n      }\n      case AssertionKind.NONNULL: {\n        let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n        return type ? type.nonNullableType : null;\n      }\n      case AssertionKind.CONST: {\n        let element = this.lookupExpression(node, ctxFlow, ctxType, reportMode);\n        if (!element) return null;\n        let type = this.getTypeOfElement(element);\n        if (!type) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n              node.range\n            );\n          }\n        }\n        return type;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.isLiteralKind(LiteralKind.INTEGER)) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!type.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.NOT);\n          if (overload) return overload.signature.returnType;\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n          if (overload) return overload.signature.returnType;\n        }\n        if (!type.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!type.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!leftType.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is common type of LHS and RHS, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!leftType.isIntegerValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.isIntegerValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let thisLocal = ctxFlow.lookupLocal(CommonNames.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let superLocal = ctxFlow.lookupLocal(CommonNames.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent !== null && parent.kind == ElementKind.CLASS) {\n      let base = (<Class>parent).base;\n      if (base) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return base;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    this.currentThisExpression = node;\n    this.currentElementExpression = null;\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        return assert(intType.getClassOrWrapper(this.program));\n      }\n      case LiteralKind.FLOAT: {\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        return assert(fltType.getClassOrWrapper(this.program));\n      }\n      case LiteralKind.STRING: {\n        return this.program.stringInstance;\n      }\n      case LiteralKind.ARRAY: {\n        let classReference = ctxType.getClass();\n        if (classReference !== null && classReference.prototype == this.program.arrayPrototype) {\n          return this.getElementOfType(ctxType);\n        }\n        // otherwise infer, ignoring ctxType\n        let expressions = (<ArrayLiteralExpression>node).elementExpressions;\n        let length = expressions.length;\n        let elementType = Type.auto;\n        let numNullLiterals = 0;\n        for (let i = 0, k = length; i < k; ++i) {\n          let expression = expressions[i];\n          if (expression) {\n            if (expression.kind == NodeKind.NULL && length > 1) {\n              ++numNullLiterals;\n            } else {\n              let currentType = this.resolveExpression(expression, ctxFlow, elementType);\n              if (!currentType) return null;\n              if (elementType == Type.auto) elementType = currentType;\n              else if (currentType != elementType) {\n                let commonType = Type.commonDenominator(elementType, currentType, false);\n                if (commonType) elementType = commonType;\n                // otherwise triggers error on compilation\n              }\n            }\n          }\n        }\n        if (elementType /* still */ == Type.auto) {\n          if (numNullLiterals == length) { // all nulls infers as usize\n            elementType = this.program.options.usizeType;\n          } else {\n            this.error(\n              DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n              node.range, \"T\"\n            );\n            return null;\n          }\n        }\n        if (\n          numNullLiterals > 0 &&\n          elementType.isInternalReference\n        ) {\n          elementType = elementType.asNullable();\n        }\n        return assert(this.resolveClass(this.program.arrayPrototype, [ elementType ]));\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        // `unchecked` behaves like parenthesized\n        if (\n          functionPrototype.internalName == BuiltinNames.unchecked &&\n          node.args.length > 0\n        ) {\n          return this.resolveExpression(node.args[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, functionPrototype, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let varType = (<VariableLikeElement>target).type;\n        let varElement = this.getElementOfType(varType);\n        if (!varElement || varElement.kind != ElementKind.CLASS) {\n          break;\n        }\n        target = varElement;\n        // fall-through\n      }\n      case ElementKind.CLASS: {\n        let typeArguments = (<Class>target).getTypeArgumentsTo(this.program.functionPrototype);\n        if (typeArguments !== null && typeArguments.length > 0) {\n          let ftype = typeArguments[0];\n          let signatureReference = assert(ftype.signatureReference);\n          return signatureReference.returnType;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    return assert(Type.bool.getClassOrWrapper(this.program));\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.resolveTypeName(node.typeName, ctxFlow.actualFunction, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        uniqueMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = uniqueMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS || actualParent.kind == ElementKind.INTERFACE);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments !== null && (numFunctionTypeArguments = typeArguments.length) > 0) {\n      assert(typeParameterNodes !== null && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonNames.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonNames.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      if (parameterType == Type.void) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      parameterTypes[i] = parameterType;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = classInstance!.type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classInstance = <Class>actualParent;\n        let classTypeArguments = classInstance.typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert(classInstance.prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Currently resolving classes. */\n  private resolveClassPending: Set<Class> = new Set();\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = uniqueMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Do not attempt to resolve the same class twice. This can return a class\n    // that isn't fully resolved yet, but only on deeper levels of recursion.\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Otherwise create\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    if (prototype.kind == ElementKind.INTERFACE_PROTOTYPE) {\n      instance = new Interface(nameInclTypeParamters, <InterfacePrototype>prototype, typeArguments);\n    } else {\n      instance = new Class(nameInclTypeParamters, prototype, typeArguments);\n    }\n    prototype.setResolvedInstance(instanceKey, instance);\n    var pendingClasses = this.resolveClassPending;\n    pendingClasses.add(instance);\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes !== null && typeParameterNodes.length > 0));\n    }\n    instance.contextualTypeArguments = ctxTypes;\n\n    var anyPending = false;\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    if (basePrototype) {\n      let current: ClassPrototype | null = basePrototype;\n      do {\n        if (current == prototype) {\n          this.error(\n            DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n            prototype.identifierNode.range,\n            prototype.internalName\n          );\n          return null;\n        }\n        current = current.basePrototype;\n      } while (current);\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      let base = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        uniqueMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!base) return null;\n      instance.setBase(base);\n\n      // If the base class is still pending, yield here and instead resolve any\n      // derived classes once the base class's `finishResolveClass` is done.\n      // This is guaranteed to never happen at the entry of the recursion, i.e.\n      // where `resolveClass` is called from other code.\n      if (pendingClasses.has(base)) anyPending = true;\n    }\n\n    // Resolve interfaces if applicable\n    var interfacePrototypes = prototype.interfacePrototypes;\n    if (interfacePrototypes) {\n      for (let i = 0, k = interfacePrototypes.length; i < k; ++i) {\n        let interfacePrototype = interfacePrototypes[i];\n        let current: ClassPrototype | null = interfacePrototype;\n        do {\n          if (current == prototype) {\n            this.error(\n              DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n              prototype.identifierNode.range,\n              prototype.internalName\n            );\n            return null;\n          }\n          current = current.basePrototype;\n        } while (current);\n        let implementsNode = assert(prototype.implementsNodes![i]);\n        let iface = this.resolveClassInclTypeArguments(\n          interfacePrototype,\n          implementsNode.typeArguments,\n          prototype.parent,\n          uniqueMap(ctxTypes),\n          implementsNode,\n          reportMode\n        );\n        if (!iface) return null;\n        assert(iface.kind == ElementKind.INTERFACE);\n        instance.addInterface(<Interface>iface);\n\n        // Like above, if any implemented interface is still pending, yield\n        if (pendingClasses.has(iface)) anyPending = true;\n      }\n    }\n    if (anyPending) return instance;\n\n    // We only get here if the base class has been fully resolved already.\n    this.finishResolveClass(instance, reportMode);\n    return instance;\n  }\n\n  /** Finishes resolving the specified class. */\n  private finishResolveClass(\n    /** Class to finish resolving. */\n    instance: Class,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode\n  ): void {\n    var members = instance.members;\n    if (!members) instance.members = members = new Map();\n\n    var pendingClasses = this.resolveClassPending;\n    var unimplemented = new Map<string,DeclaredElement>();\n\n    // Alias interface members\n    var interfaces = instance.interfaces;\n    if (interfaces) {\n      for (let _values = Set_values(interfaces), i = 0, k = _values.length; i < k; ++i) {\n        let iface = _values[i];\n        assert(!pendingClasses.has(iface));\n        let ifaceMembers = iface.members;\n        if (ifaceMembers) {\n          for (let _keys = Map_keys(ifaceMembers), i = 0, k = _keys.length; i < k; ++i) {\n            let memberName = unchecked(_keys[i]);\n            let member = assert(ifaceMembers.get(memberName));\n            if (members.has(memberName)) {\n              let existing = assert(members.get(memberName));\n              if (!member.isCompatibleOverride(existing)) {\n                this.errorRelated(\n                  DiagnosticCode.This_overload_signature_is_not_compatible_with_its_implementation_signature,\n                  member.identifierAndSignatureRange, existing.identifierAndSignatureRange\n                );\n                continue;\n              }\n            }\n            members.set(memberName, member);\n            unimplemented.set(memberName, member);\n          }\n        }\n      }\n    }\n\n    // Alias base members\n    var memoryOffset: u32 = 0;\n    var base = instance.base;\n    if (base) {\n      assert(!pendingClasses.has(base));\n      let baseMembers = base.members;\n      if (baseMembers) {\n        // TODO: for (let [baseMemberName, baseMember] of baseMembers) {\n        for (let _keys = Map_keys(baseMembers), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(baseMembers.get(memberName));\n          if (members.has(memberName)) {\n            let existing = assert(members.get(memberName));\n            if (!member.isCompatibleOverride(existing)) {\n              this.errorRelated(\n                DiagnosticCode.This_overload_signature_is_not_compatible_with_its_implementation_signature,\n                member.identifierAndSignatureRange, existing.identifierAndSignatureRange\n              );\n              continue;\n            }\n          }\n          members.set(memberName, member);\n          if (member.is(CommonFlags.ABSTRACT)) {\n            unimplemented.set(memberName, member);\n          } else {\n            unimplemented.delete(memberName);\n          }\n        }\n      }\n      memoryOffset = base.nextMemoryOffset;\n    }\n\n    // Resolve instance members\n    var prototype = instance.prototype;\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    var properties = new Array<Property>();\n    if (instanceMemberPrototypes) {\n      // TODO: for (let member of instanceMemberPrototypes.values()) {\n      for (let _values = Map_values(instanceMemberPrototypes), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        let memberName = member.name;\n        switch (member.kind) {\n\n          case ElementKind.FIELD_PROTOTYPE: {\n            let fieldPrototype = <FieldPrototype>member;\n            let fieldTypeNode = fieldPrototype.typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (base) {\n                let baseMembers = base.members;\n                if (baseMembers !== null && baseMembers.has(fieldPrototype.name)) {\n                  let baseField = assert(baseMembers.get(fieldPrototype.name));\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldPrototype.identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n              if (fieldType == Type.void) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldTypeNode.range\n                  );\n                }\n                break;\n              }\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(fieldPrototype, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(memberName, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let boundPrototype = (<PropertyPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          default: assert(false);\n        }\n        if (!member.is(CommonFlags.ABSTRACT)) {\n          unimplemented.delete(memberName);\n        }\n      }\n    }\n\n    // Check that property getters and setters match\n    for (let i = 0, k = properties.length; i < k; ++i) {\n      let property = properties[i];\n      let propertyGetter = property.getterInstance;\n      if (!propertyGetter) {\n        this.error(\n          DiagnosticCode.Property_0_only_has_a_setter_and_is_missing_a_getter,\n          property.identifierNode.range, property.name\n        );\n      } else {\n        let propertySetter = property.setterInstance;\n        if (propertySetter !== null && !propertyGetter.visibilityEquals(propertySetter)) {\n          this.errorRelated(\n            DiagnosticCode.Getter_and_setter_accessors_do_not_agree_in_visibility,\n            propertyGetter.identifierNode.range, propertySetter.identifierNode.range\n          );\n        }\n      }\n    }\n\n    if (instance.kind != ElementKind.INTERFACE) {\n\n      // Check that all required members are implemented\n      if (!instance.is(CommonFlags.ABSTRACT) && unimplemented.size > 0) {\n        for (let _keys = Map_keys(unimplemented), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = _keys[i];\n          let member = assert(unimplemented.get(memberName));\n          this.errorRelated(\n            DiagnosticCode.Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2,\n            instance.identifierNode.range, member.identifierNode.range,\n            instance.internalName, memberName, member.parent.internalName\n          );\n        }\n      }\n\n      // Finalize memory offset\n      instance.nextMemoryOffset = memoryOffset;\n\n      // Link _own_ constructor if present\n      {\n        let ctorPrototype = instance.lookupInSelf(CommonNames.constructor);\n        if (ctorPrototype !== null && ctorPrototype.parent === instance) {\n          assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          let ctorInstance = this.resolveFunction(\n            <FunctionPrototype>ctorPrototype,\n            null,\n            assert(instance.contextualTypeArguments),\n            reportMode\n          );\n          if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n        }\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    var overloadPrototypes = prototype.overloadPrototypes;\n    // TODO: for (let [overloadKind, overloadPrototype] of overloadPrototypes) {\n    for (let _keys = Map_keys(overloadPrototypes), i = 0, k = _keys.length; i < k; ++i) {\n      let overloadKind = unchecked(_keys[i]);\n      let overloadPrototype = assert(overloadPrototypes.get(overloadKind));\n      assert(overloadKind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          uniqueMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          uniqueMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (overloadKind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(overloadKind)) {\n        overloads.set(overloadKind, operatorInstance);\n        if (overloadKind == OperatorKind.INDEXED_GET || overloadKind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (overloadKind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n\n    // Remove this class from pending\n    assert(pendingClasses.has(instance)); // must be pending\n    pendingClasses.delete(instance);\n\n    // Finish derived classes that we postponed in `resolveClass` due to the\n    // base class still being pending, again triggering `finishResolveClass`\n    // of any classes derived from those classes, ultimately leading to all\n    // pending classes being resolved.\n    for (let _values = Set_values(pendingClasses), i = 0, k = _values.length; i < k; ++i) {\n      let pending = _values[i];\n      let dependsOnInstance = pending.base === instance;\n      let interfaces = pending.interfaces;\n      if (interfaces) {\n        let anyPending = false;\n        for (let _values2 = Set_values(interfaces), j = 0, l = _values2.length; j < l; ++j) {\n          let iface = _values2[j];\n          if (iface === instance) dependsOnInstance = true;\n          else if (pendingClasses.has(iface)) anyPending = true;\n        }\n        if (anyPending) continue;\n      }\n      if (dependsOnInstance) this.finishResolveClass(pending, reportMode);\n    }\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Resolves a property prototype. */\n  resolveProperty(\n    /** The prototype of the property. */\n    prototype: PropertyPrototype,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Property | null {\n    var instance = prototype.instance;\n    if (instance) return instance;\n    prototype.instance = instance = new Property(prototype, prototype);\n    var getterPrototype = prototype.getterPrototype;\n    if (getterPrototype) {\n      let getterInstance = this.resolveFunction(\n        getterPrototype,\n        null,\n        uniqueMap<string,Type>(),\n        reportMode\n      );\n      if (getterInstance) {\n        instance.getterInstance = getterInstance;\n        instance.setType(getterInstance.signature.returnType);\n      }\n    }\n    var setterPrototype = prototype.setterPrototype;\n    if (setterPrototype) {\n      let setterInstance = this.resolveFunction(\n        setterPrototype,\n        null,\n        uniqueMap<string,Type>(),\n        reportMode\n      );\n      if (setterInstance) {\n        instance.setterInstance = setterInstance;\n        if (!instance.is(CommonFlags.RESOLVED)) {\n          assert(setterInstance.signature.parameterTypes.length == 1);\n          instance.setType(setterInstance.signature.parameterTypes[0]);\n        }\n      }\n    }\n    return instance;\n  }\n}\n","/**\n * @fileoverview A concurrent code flow analyzer.\n *\n * Flows keep track of compilation state and can be queried for various\n * conditions, like whether the current branch always terminates, whether\n * a local is known to be non-null or whether an expression has possibly\n * overflown its value range.\n *\n * To accomplish this, compilation of each function begins with a clean\n * flow populated with initial local states etc. While compilation\n * progresses, statements and expressions update flow state while control\n * constructs fork, potentially add scoped locals and later merge these\n * forked branches as necessary.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global,\n  Field,\n  Class\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChildAt,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperandAt,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\nimport {\n  uniqueMap\n} from \"./util\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow always returns. */\n  RETURNS = 1 << 0,\n  /** This flow always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow always returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow always throws. */\n  THROWS = 1 << 3,\n  /** This flow always breaks. */\n  BREAKS = 1 << 4,\n  /** This flow always continues. */\n  CONTINUES = 1 << 5,\n  /** This flow always accesses `this`. Constructors only. */\n  ACCESSES_THIS = 1 << 6,\n  /** This flow always calls `super`. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow always terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8, // Note that this doesn't cover BREAKS, which is separate\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 11,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 12,\n  /** This flow conditionally accesses `this` in a child flow. Constructors only. */\n  CONDITIONALLY_ACCESSES_THIS = 1 << 13,\n  /** This flow may return a non-this value. Constructors only. */\n  MAY_RETURN_NONTHIS = 1 << 14,\n\n  // other\n\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 15,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ACCESSES_THIS\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ACCESSES_THIS\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is initialized. */\n  INITIALIZED = 1 << 3,\n  /** Local is retained. */\n  RETAINED = 1 << 4,\n\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 5,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  NONE = 0,\n  INITIALIZED = 1 << 0\n}\n\n/** Condition kinds. */\nexport const enum ConditionKind {\n  /** Outcome of the condition is unknown */\n  UNKNOWN,\n  /** Condition is always true. */\n  TRUE,\n  /** Condition is always false. */\n  FALSE\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Creates the parent flow of the specified function. */\n  static createParent(parentFunction: Function): Flow {\n    var flow = new Flow(parentFunction);\n    if (parentFunction.is(CommonFlags.CONSTRUCTOR)) {\n      flow.initThisFieldFlags();\n    }\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = new Flow(parentFunction);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString();\n    if (inlineFunction.is(CommonFlags.CONSTRUCTOR)) {\n      flow.initThisFieldFlags();\n    }\n    return flow;\n  }\n\n  private constructor(\n    /** Function this flow belongs to. */\n    public parentFunction: Function\n  ) {\n    /* nop */\n  }\n\n  /** Parent flow. */\n  parent: Flow | null = null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags = FlowFlags.NONE;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null = null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null = null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[] = [];\n  /** Field flags on `this`. Constructors only. */\n  thisFieldFlags: Map<Field,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null = null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null = null;\n\n  /** Tests if this is an inline flow. */\n  get isInline(): bool {\n    return this.inlineFunction !== null;\n  }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    var inlineFunction = this.inlineFunction;\n    if (inlineFunction) return inlineFunction;\n    return this.parentFunction;\n  }\n\n  /** Gets the current return type. */\n  get returnType(): Type {\n    return this.actualFunction.signature.returnType;\n  }\n\n  /** Gets the current contextual type arguments. */\n  get contextualTypeArguments(): Map<string,Type> | null {\n    return this.actualFunction.contextualTypeArguments;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(resetBreakContext: bool = false): Flow {\n    var branch = new Flow(this.parentFunction);\n    branch.parent = this;\n    if (resetBreakContext) {\n      branch.flags = this.flags & ~(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS |\n        FlowFlags.CONTINUES |\n        FlowFlags.CONDITIONALLY_CONTINUES\n      );\n    } else {\n      branch.flags = this.flags;\n      branch.continueLabel = this.continueLabel;\n      branch.breakLabel = this.breakLabel;\n    }\n    branch.localFlags = this.localFlags.slice();\n    if (this.actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n      let thisFieldFlags = assert(this.thisFieldFlags);\n      branch.thisFieldFlags = uniqueMap<Field,FieldFlags>(thisFieldFlags);\n    } else {\n      assert(!this.thisFieldFlags);\n    }\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (<u32>type.toNativeType()) {\n      case <u32>NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case <u32>NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case <u32>NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case <u32>NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case <u32>NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      case <u32>NativeType.Funcref: { temps = parentFunction.tempFuncrefs; break; }\n      case <u32>NativeType.Externref: { temps = parentFunction.tempExternrefs; break; }\n      case <u32>NativeType.Exnref: { temps = parentFunction.tempExnrefs; break; }\n      case <u32>NativeType.Anyref: { temps = parentFunction.tempAnyrefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps !== null && temps.length > 0) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps !== null && temps.length > 0) {\n        local = assert(temps.pop());\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++).toString(), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    local.resetTemporaryName();\n    switch (<u32>local.type.toNativeType()) {\n      case <u32>NativeType.I32: {\n        let tempI32s = parentFunction.tempI32s;\n        if (tempI32s) temps = tempI32s;\n        else parentFunction.tempI32s = temps = [];\n        break;\n      }\n      case <u32>NativeType.I64: {\n        let tempI64s = parentFunction.tempI64s;\n        if (tempI64s) temps = tempI64s;\n        else parentFunction.tempI64s = temps = [];\n        break;\n      }\n      case <u32>NativeType.F32: {\n        let tempF32s = parentFunction.tempF32s;\n        if (tempF32s) temps = tempF32s;\n        else parentFunction.tempF32s = temps = [];\n        break;\n      }\n      case <u32>NativeType.F64: {\n        let tempF64s = parentFunction.tempF64s;\n        if (tempF64s) temps = tempF64s;\n        else parentFunction.tempF64s = temps = [];\n        break;\n      }\n      case <u32>NativeType.V128: {\n        let tempV128s = parentFunction.tempV128s;\n        if (tempV128s) temps = tempV128s;\n        else parentFunction.tempV128s = temps = [];\n        break;\n      }\n      case <u32>NativeType.Funcref: {\n        let tempFuncrefs = parentFunction.tempFuncrefs;\n        if (tempFuncrefs) temps = tempFuncrefs;\n        else parentFunction.tempFuncrefs = temps = [];\n        break;\n      }\n      case <u32>NativeType.Externref: {\n        let tempExternrefs = parentFunction.tempExternrefs;\n        if (tempExternrefs) temps = tempExternrefs;\n        else parentFunction.tempExternrefs = temps = [];\n        break;\n      }\n      case <u32>NativeType.Exnref: {\n        let tempExnrefs = parentFunction.tempExnrefs;\n        if (tempExnrefs) temps = tempExnrefs;\n        else parentFunction.tempExnrefs = temps = [];\n        break;\n      }\n      case <u32>NativeType.Anyref: {\n        let tempAnyrefs = parentFunction.tempAnyrefs;\n        if (tempAnyrefs) temps = tempAnyrefs;\n        else parentFunction.tempAnyrefs = temps = [];\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals !== null && scopedLocals.has(name)) return assert(scopedLocals.get(name));\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    scopedLocal.setTemporaryName(name);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped dummy local of the specified name. */\n  addScopedDummyLocal(name: string, type: Type): Local {\n    var scopedDummy = new Local(name, -1, type, this.parentFunction);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedDummy.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedDummy);\n    return scopedDummy;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else {\n      let existingLocal = scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          if (!existingLocal.declaration.range.source.isNative) {\n            this.parentFunction.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range,\n              existingLocal.declaration.name.range,\n              name\n            );\n          } else {\n            this.parentFunction.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range, name\n            );\n          }\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees a single scoped local by its name. */\n  freeScopedDummyLocal(name: string): void {\n    var scopedLocals = assert(this.scopedLocals);\n    assert(scopedLocals.has(name));\n    let local = assert(scopedLocals.get(name));\n    assert(local.index == -1);\n    scopedLocals.delete(name);\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(local);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    do {\n      let scope = current.scopedLocals;\n      if (scope !== null && scope.has(name)) return assert(scope.get(name));\n      current = current.parent;\n    } while (current);\n    var localsByName = this.parentFunction.localsByName;\n    if (localsByName.has(name)) return assert(localsByName.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags & ~flag;\n  }\n\n  /** Initializes `this` field flags. */\n  initThisFieldFlags(): void {\n    var actualFunction = this.actualFunction;\n    assert(actualFunction.is(CommonFlags.CONSTRUCTOR));\n    var actualParent = actualFunction.parent;\n    assert(actualParent.kind == ElementKind.CLASS);\n    var actualClass = <Class>actualParent;\n    this.thisFieldFlags = new Map();\n    var members = actualClass.members;\n    if (members) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = _values[i];\n        if (member.kind == ElementKind.FIELD) {\n          let field = <Field>member;\n          if (\n            // guaranteed by super\n            field.parent != actualClass ||\n            // has field initializer\n            field.initializerNode !== null ||\n            // is initialized as a ctor parameter\n            field.prototype.parameterIndex != -1 ||\n            // is safe to initialize with zero\n            field.type.isAny(TypeFlags.VALUE | TypeFlags.NULLABLE)\n          ) {\n            this.setThisFieldFlag(field, FieldFlags.INITIALIZED);\n          }\n        }\n      }\n    }\n  }\n\n  /** Tests if the specified `this` field has the specified flag or flags. */\n  isThisFieldFlag(field: Field, flag: FieldFlags): bool {\n    var fieldFlags = this.thisFieldFlags;\n    if (fieldFlags) {\n      return (changetype<FieldFlags>(fieldFlags.get(field)) & flag) == flag;\n    }\n    return false;\n  }\n\n  /** Sets the specified flag or flags on the given `this` field. */\n  setThisFieldFlag(field: Field, flag: FieldFlags): void {\n    var fieldFlags = this.thisFieldFlags;\n    if (fieldFlags) {\n      assert(this.actualFunction.is(CommonFlags.CONSTRUCTOR));\n      if (fieldFlags.has(field)) {\n        let flags = changetype<FieldFlags>(fieldFlags.get(field));\n        fieldFlags.set(field, flags | flag);\n      } else {\n        fieldFlags.set(field, flag);\n      }\n    } else {\n      assert(!this.actualFunction.is(CommonFlags.CONSTRUCTOR));\n    }\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    var label = id.toString();\n    parentFunction.breakLabel = label;\n    return label;\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString();\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags of another flow into this one, i.e. a finished inner block. */\n  inherit(other: Flow): void {\n    assert(other.parentFunction == this.parentFunction);\n    assert(other.parent == this); // currently the case, but might change\n    var otherFlags = other.flags;\n\n    // respective inner flags are irrelevant if contexts differ\n    if (this.breakLabel != other.breakLabel) {\n      if (otherFlags & (FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        otherFlags &= ~FlowFlags.TERMINATES;\n      }\n      otherFlags &= ~(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (this.continueLabel != other.continueLabel) {\n      otherFlags &= ~(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n\n    this.flags = this.flags | otherFlags; // what happens before is still true\n    this.localFlags = other.localFlags;\n    this.thisFieldFlags = other.thisFieldFlags;\n  }\n\n  /** Inherits flags of a conditional branch joining again with this one, i.e. then without else. */\n  inheritBranch(other: Flow, conditionKind: ConditionKind = ConditionKind.UNKNOWN): void {\n    assert(other.parentFunction == this.parentFunction);\n    switch (conditionKind) {\n      case ConditionKind.TRUE: this.inherit(other); // always executes\n      case ConditionKind.FALSE: return;             // never executes\n    }\n\n    // Note that flags in `this` flow have already happened. For instance,\n    // a return cannot be undone no matter what'd happen in subsequent branches,\n    // but an allocation, which doesn't terminate, can become conditional. Not\n    // all flags have a corresponding conditional flag that's tracked.\n\n    var thisFlags = this.flags;\n    var otherFlags = other.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (thisFlags & FlowFlags.RETURNS) { // nothing can change that\n      newFlags |= FlowFlags.RETURNS;\n    } else if (otherFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_WRAPPED;\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_NONNULL;\n\n    if (thisFlags & FlowFlags.THROWS) { // nothing can change that\n      newFlags |= FlowFlags.THROWS;\n    } else if (otherFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (thisFlags & FlowFlags.BREAKS) { // nothing can change that\n      newFlags |= FlowFlags.BREAKS;\n    } else if (other.breakLabel == this.breakLabel) {\n      if (otherFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (thisFlags & FlowFlags.CONTINUES) { // nothing can change that\n      newFlags |= FlowFlags.CONTINUES;\n    } else if (other.continueLabel === this.continueLabel) {\n      if (otherFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (thisFlags & FlowFlags.ACCESSES_THIS) { // can become conditional\n      if (otherFlags & FlowFlags.ACCESSES_THIS) {\n        newFlags |= FlowFlags.ACCESSES_THIS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n      }\n    } else if (otherFlags & FlowFlags.ACCESSES_THIS) {\n      newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    }\n\n    // may be the case in any\n    newFlags |= (thisFlags | otherFlags) & FlowFlags.MAY_RETURN_NONTHIS;\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.CALLS_SUPER;\n\n    if (thisFlags & FlowFlags.TERMINATES) { // nothing can change that\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (thisFlags & FlowFlags.UNCHECKED_CONTEXT);\n\n    // local flags\n    var thisLocalFlags = this.localFlags;\n    var numThisLocalFlags = thisLocalFlags.length;\n    var otherLocalFlags = other.localFlags;\n    var numOtherLocalFlags = otherLocalFlags.length;\n    var maxLocalFlags = max(numThisLocalFlags, numOtherLocalFlags);\n    for (let i = 0; i < maxLocalFlags; ++i) {\n      let thisFlags = i < numThisLocalFlags ? thisLocalFlags[i] : 0;\n      let otherFlags = i < numOtherLocalFlags ? otherLocalFlags[i] : 0;\n      let newFlags = thisFlags & otherFlags & (\n        LocalFlags.CONSTANT  |\n        LocalFlags.WRAPPED   |\n        LocalFlags.NONNULL   |\n        LocalFlags.INITIALIZED\n      );\n      if (thisFlags & LocalFlags.RETAINED) {\n        if (otherFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.RETAINED;\n        } else {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        }\n      } else if (otherFlags & LocalFlags.RETAINED) {\n        newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n      }\n      thisLocalFlags[i] = newFlags;\n    }\n\n    // field flags do not matter here since there's only INITIALIZED, which can\n    // only be set if it has been observed prior to entering the branch.\n  }\n\n  /** Inherits mutual flags of two alternate branches becoming this one, i.e. then with else. */\n  inheritMutual(left: Flow, right: Flow): void {\n    assert(left.parentFunction == right.parentFunction);\n    assert(left.parentFunction == this.parentFunction);\n    // This differs from the previous method in that no flags are guaranteed\n    // to happen unless it is the case in both flows.\n\n    var leftFlags = left.flags;\n    var rightFlags = right.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (leftFlags & FlowFlags.RETURNS) {\n      if (rightFlags & FlowFlags.RETURNS) {\n        newFlags |= FlowFlags.RETURNS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n      }\n    } else if (rightFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_WRAPPED) && (rightFlags & FlowFlags.RETURNS_WRAPPED)) {\n      newFlags |= FlowFlags.RETURNS_WRAPPED;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_NONNULL) && (rightFlags & FlowFlags.RETURNS_NONNULL)) {\n      newFlags |= FlowFlags.RETURNS_NONNULL;\n    }\n\n    if (leftFlags & FlowFlags.THROWS) {\n      if (rightFlags & FlowFlags.THROWS) {\n        newFlags |= FlowFlags.THROWS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n      }\n    } else if (rightFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (leftFlags & FlowFlags.BREAKS) {\n      if (rightFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.BREAKS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else if (rightFlags & FlowFlags.BREAKS) {\n      newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (leftFlags & FlowFlags.CONTINUES) {\n      if (rightFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONTINUES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else if (rightFlags & FlowFlags.CONTINUES) {\n      newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (leftFlags & FlowFlags.ACCESSES_THIS) {\n      if (rightFlags & FlowFlags.ACCESSES_THIS) {\n        newFlags |= FlowFlags.ACCESSES_THIS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n      }\n    } else if (rightFlags & FlowFlags.ACCESSES_THIS) {\n      newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    }\n\n    newFlags |= (leftFlags | rightFlags) & FlowFlags.MAY_RETURN_NONTHIS;\n\n    if ((leftFlags & FlowFlags.CALLS_SUPER) && (rightFlags & FlowFlags.CALLS_SUPER)) {\n      newFlags |= FlowFlags.CALLS_SUPER;\n    }\n\n    if ((leftFlags & FlowFlags.TERMINATES) && (rightFlags & FlowFlags.TERMINATES)) {\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (this.flags & FlowFlags.UNCHECKED_CONTEXT);\n\n    // local flags\n    var thisLocalFlags = this.localFlags;\n    if (leftFlags & FlowFlags.TERMINATES) {\n      if (!(rightFlags & FlowFlags.TERMINATES)) {\n        let rightLocalFlags = right.localFlags;\n        for (let i = 0, k = rightLocalFlags.length; i < k; ++i) {\n          thisLocalFlags[i] = rightLocalFlags[i];\n        }\n      }\n    } else if (rightFlags & FlowFlags.TERMINATES) {\n      let leftLocalFlags = left.localFlags;\n      for (let i = 0, k = leftLocalFlags.length; i < k; ++i) {\n        thisLocalFlags[i] = leftLocalFlags[i];\n      }\n    } else {\n      let leftLocalFlags = left.localFlags;\n      let numLeftLocalFlags = leftLocalFlags.length;\n      let rightLocalFlags = right.localFlags;\n      let numRightLocalFlags = rightLocalFlags.length;\n      let maxLocalFlags = max(numLeftLocalFlags, numRightLocalFlags);\n      for (let i = 0; i < maxLocalFlags; ++i) {\n        let leftFlags = i < numLeftLocalFlags ? leftLocalFlags[i] : 0;\n        let rightFlags = i < numRightLocalFlags ? rightLocalFlags[i] : 0;\n        let newFlags = leftFlags & rightFlags & (\n          LocalFlags.CONSTANT  |\n          LocalFlags.WRAPPED   |\n          LocalFlags.NONNULL   |\n          LocalFlags.INITIALIZED\n        );\n        if (leftFlags & LocalFlags.RETAINED) {\n          if (rightFlags & LocalFlags.RETAINED) {\n            newFlags |= LocalFlags.RETAINED;\n          } else {\n            newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n          }\n        } else if (rightFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        } else {\n          newFlags |= (leftFlags | rightFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n        }\n        thisLocalFlags[i] = newFlags;\n      }\n    }\n\n    // field flags (currently only INITIALIZED, so can simplify)\n    var leftFieldFlags = left.thisFieldFlags;\n    if (leftFieldFlags) {\n      let newFieldFlags = new Map<Field,FieldFlags>();\n      let rightFieldFlags = assert(right.thisFieldFlags);\n      for (let _keys = Map_keys(leftFieldFlags), i = 0, k = _keys.length; i < k; ++i) {\n        let key = _keys[i];\n        let leftFlags = changetype<FieldFlags>(leftFieldFlags.get(key));\n        if (\n          (leftFlags & FieldFlags.INITIALIZED) != 0 && rightFieldFlags.has(key) && \n          (changetype<FieldFlags>(rightFieldFlags.get(key)) & FieldFlags.INITIALIZED)\n        ) {\n          newFieldFlags.set(key, FieldFlags.INITIALIZED);\n        }\n      }\n      this.thisFieldFlags = newFieldFlags;\n    } else {\n      assert(!right.thisFieldFlags);\n    }\n  }\n\n  /** Tests if the specified flows have differing local states. */\n  static hasIncompatibleLocalStates(before: Flow, after: Flow): bool {\n    var numThisLocalFlags = before.localFlags.length;\n    var numOtherLocalFlags = after.localFlags.length;\n    var parentFunction = before.parentFunction;\n    assert(parentFunction === after.parentFunction);\n    var localsByIndex = parentFunction.localsByIndex;\n    assert(localsByIndex === after.parentFunction.localsByIndex);\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      let local = localsByIndex[i];\n      let type = local.type;\n      if (type.isShortIntegerValue) {\n        if (before.isLocalFlag(i, LocalFlags.WRAPPED) && !after.isLocalFlag(i, LocalFlags.WRAPPED)) {\n          return true;\n        }\n      }\n      if (type.isNullableReference) {\n        if (before.isLocalFlag(i, LocalFlags.NONNULL) && !after.isLocalFlag(i, LocalFlags.NONNULL)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n      assert(\n        // having different retain states would be a problem because the compiler\n        // either can't release a retained local or would release a non-retained local\n        this.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED) == other.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED)\n      );\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.isNullableReference) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.isNullableReference || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.isNullableReference || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(\n    /** Expression being true. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n\n    // The iff argument is useful in situations like\n    //\n    //  if (!ref) {\n    //    ref = new Ref();\n    //  }\n    //  // inheritNonnullIfFalse(`!ref`, thenFlow) -> ref != null\n    //\n\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        this.inheritNonnullIfTrue(getLocalSetValue(expr), iff); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr), iff);\n            this.inheritNonnullIfTrue(getIfTrue(expr), iff);\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr), iff); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        if (name == program.retainInstance.internalName) {\n          // __retain just passes through the argument\n          this.inheritNonnullIfTrue(getCallOperandAt(expr, 0), iff);\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(\n    /** Expression being false. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr), iff); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          let exprType = getExpressionType(ifTrue);\n          if (\n            (exprType == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (exprType == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr), iff);\n            this.inheritNonnullIfFalse(getIfFalse(expr), iff);\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.isShortIntegerValue) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow((<Global>global).type, type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.isSignedIntegerValue\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) &&\n                !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (<u32>getExpressionType(expr)) {\n          case <u32>NativeType.I32: { value = getConstValueI32(expr); break; }\n          case <u32>NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case <u32>NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case <u32>NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < <i32>i8.MIN_VALUE || value > <i32>i8.MAX_VALUE;\n          case TypeKind.I16: return value < <i32>i16.MIN_VALUE || value > <i32>i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > <i32>u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > <i32>u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChildAt(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = assert(instancesByName.get(instanceName));\n          assert(instance.kind == ElementKind.FUNCTION);\n          let functionInstance = <Function>instance;\n          let returnType = functionInstance.signature.returnType;\n          return !functionInstance.flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    var sb = new Array<string>();\n    if (this.is(FlowFlags.RETURNS)) sb.push(\"RETURNS\");\n    if (this.is(FlowFlags.RETURNS_WRAPPED)) sb.push(\"RETURNS_WRAPPED\");\n    if (this.is(FlowFlags.RETURNS_NONNULL)) sb.push(\"RETURNS_NONNULL\");\n    if (this.is(FlowFlags.THROWS)) sb.push(\"THROWS\");\n    if (this.is(FlowFlags.BREAKS)) sb.push(\"BREAKS\");\n    if (this.is(FlowFlags.CONTINUES)) sb.push(\"CONTINUES\");\n    if (this.is(FlowFlags.ACCESSES_THIS)) sb.push(\"ACCESSES_THIS\");\n    if (this.is(FlowFlags.CALLS_SUPER)) sb.push(\"CALLS_SUPER\");\n    if (this.is(FlowFlags.TERMINATES)) sb.push(\"TERMINATES\");\n    if (this.is(FlowFlags.CONDITIONALLY_RETURNS)) sb.push(\"CONDITIONALLY_RETURNS\");\n    if (this.is(FlowFlags.CONDITIONALLY_THROWS)) sb.push(\"CONDITIONALLY_THROWS\");\n    if (this.is(FlowFlags.CONDITIONALLY_BREAKS)) sb.push(\"CONDITIONALLY_BREAKS\");\n    if (this.is(FlowFlags.CONDITIONALLY_CONTINUES)) sb.push(\"CONDITIONALLY_CONTINUES\");\n    if (this.is(FlowFlags.CONDITIONALLY_ACCESSES_THIS)) sb.push(\"CONDITIONALLY_ACCESSES_THIS\");\n    if (this.is(FlowFlags.MAY_RETURN_NONTHIS)) sb.push(\"MAY_RETURN_NONTHIS\");\n    return \"Flow(\" + this.actualFunction.toString() + \")[\" + levels.toString() + \"] \" + sb.join(\" \");\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return toType.isShortIntegerValue && (\n    !fromType.isIntegerValue ||                                    // i.e. float to small int\n    fromType.size > toType.size ||                                 // larger int to small int\n    fromType.isSignedIntegerValue != toType.isSignedIntegerValue   // signedness mismatch\n  );\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set<i32>()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * @fileoverview Built-in elements providing core WebAssembly functionality.\n *\n * Each builtin is linked to its definition in std/assembly/builtins.ts.\n * When its prototype is called, the compiler recognizes the `@builtin`\n * decorator, looks up the respective handler in the global builtins map\n * and executes it, with the handler directly emitting WebAssembly code\n * according to context.\n *\n * Builtins can be categorized into core builtins that typically are generic\n * and emit code directly and aliases calling core builtins with overridden\n * contexts. The latter is used by inline assembler aliases of WebAssembly\n * instructions, like `i64.load8_u` deferring to `<i64>load<u8>`.\n *\n * The `contextIsExact` modifier is used to force a specific instruction\n * family. A `i32.store8` deferring to `<i32>store<i8>` for example is\n * ambiguous in that the input can still be an i32 or an i64, leading to\n * either an `i32.store8` or an `i64.store8`, so `i32` is forced there.\n * This behavior is indicated by `from i32/i64` in the comments below.\n *\n * @license Apache-2.0\n */\n\n// TODO: Add builtins for `i32.add` etc. that do not have a core builtin.\n\nimport {\n  Compiler,\n  Constraints,\n  RuntimeFeatures\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticCategory\n} from \"./diagnostics\";\n\nimport {\n  Expression,\n  LiteralKind,\n  StringLiteralExpression,\n  CallExpression,\n  NodeKind,\n  LiteralExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef,\n  SIMDLoadOp,\n  getLocalGetIndex,\n  createType,\n  ExpressionRunnerFlags\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element,\n  ClassPrototype,\n  Class\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Internal names of various compiler built-ins. */\nexport namespace BuiltinNames {\n\n  // compiler-generated\n  export const start = \"~start\";\n  export const started = \"~started\";\n  export const argumentsLength = \"~argumentsLength\";\n  export const setArgumentsLength = \"~setArgumentsLength\";\n\n  // std/builtins.ts\n  export const abort = \"~lib/builtins/abort\";\n  export const trace = \"~lib/builtins/trace\";\n  export const seed = \"~lib/builtins/seed\";\n\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const add = \"~lib/builtins/add\";\n  export const sub = \"~lib/builtins/sub\";\n  export const mul = \"~lib/builtins/mul\";\n  export const div = \"~lib/builtins/div\";\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_add = \"~lib/builtins/i32.add\";\n  export const i64_add = \"~lib/builtins/i64.add\";\n  export const f32_add = \"~lib/builtins/f32.add\";\n  export const f64_add = \"~lib/builtins/f64.add\";\n  export const i32_sub = \"~lib/builtins/i32.sub\";\n  export const i64_sub = \"~lib/builtins/i64.sub\";\n  export const f32_sub = \"~lib/builtins/f32.sub\";\n  export const f64_sub = \"~lib/builtins/f64.sub\";\n  export const i32_mul = \"~lib/builtins/i32.mul\";\n  export const i64_mul = \"~lib/builtins/i64.mul\";\n  export const f32_mul = \"~lib/builtins/f32.mul\";\n  export const f64_mul = \"~lib/builtins/f64.mul\";\n  export const i32_div_s = \"~lib/builtins/i32.div_s\";\n  export const i32_div_u = \"~lib/builtins/i32.div_u\";\n  export const i64_div_s = \"~lib/builtins/i64.div_s\";\n  export const i64_div_u = \"~lib/builtins/i64.div_u\";\n  export const f32_div = \"~lib/builtins/f32.div\";\n  export const f64_div = \"~lib/builtins/f64.div\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_bitmask = \"~lib/builtins/v128.bitmask\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_pmin = \"~lib/builtins/v128.pmin\";\n  export const v128_pmax = \"~lib/builtins/v128.pmax\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_avgr = \"~lib/builtins/v128.avgr\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_ceil = \"~lib/builtins/v128.ceil\";\n  export const v128_floor = \"~lib/builtins/v128.floor\";\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\n  export const v128_nearest = \"~lib/builtins/v128.nearest\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_widen_low = \"~lib/builtins/v128.widen_low\";\n  export const v128_widen_high = \"~lib/builtins/v128.widen_high\";\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_avgr_u = \"~lib/builtins/i8x16.avgr_u\";\n  export const i8x16_abs = \"~lib/builtins/i8x16.abs\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_bitmask = \"~lib/builtins/i8x16.bitmask\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_avgr_u = \"~lib/builtins/i16x8.avgr_u\";\n  export const i16x8_abs = \"~lib/builtins/i16x8.abs\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_bitmask = \"~lib/builtins/i16x8.bitmask\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\n  export const i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\n  export const i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\n  export const i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\n  export const i16x8_load8x8_s = \"~lib/builtins/i16x8.load8x8_s\";\n  export const i16x8_load8x8_u = \"~lib/builtins/i16x8.load8x8_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_abs = \"~lib/builtins/i32x4.abs\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_bitmask = \"~lib/builtins/i32x4.bitmask\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\n  export const i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\n  export const i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\n  export const i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\n  export const i32x4_load16x4_s = \"~lib/builtins/i32x4.load16x4_s\";\n  export const i32x4_load16x4_u = \"~lib/builtins/i32x4.load16x4_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\n  export const i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\n  export const i64x2_load32x2_s = \"~lib/builtins/i64x2.load32x2_s\";\n  export const i64x2_load32x2_u = \"~lib/builtins/i64x2.load32x2_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_pmin = \"~lib/builtins/f32x4.pmin\";\n  export const f32x4_pmax = \"~lib/builtins/f32x4.pmax\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_ceil = \"~lib/builtins/f32x4.ceil\";\n  export const f32x4_floor = \"~lib/builtins/f32x4.floor\";\n  export const f32x4_trunc = \"~lib/builtins/f32x4.trunc\";\n  export const f32x4_nearest = \"~lib/builtins/f32x4.nearest\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_pmin = \"~lib/builtins/f64x2.pmin\";\n  export const f64x2_pmax = \"~lib/builtins/f64x2.pmax\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_ceil = \"~lib/builtins/f64x2.ceil\";\n  export const f64x2_floor = \"~lib/builtins/f64x2.floor\";\n  export const f64x2_trunc = \"~lib/builtins/f64x2.trunc\";\n  export const f64x2_nearest = \"~lib/builtins/f64x2.nearest\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\n  export const f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n  export const v8x16_swizzle = \"~lib/builtins/v8x16.swizzle\";\n  export const v8x16_load_splat = \"~lib/builtins/v8x16.load_splat\";\n  export const v16x8_load_splat = \"~lib/builtins/v16x8.load_splat\";\n  export const v32x4_load_splat = \"~lib/builtins/v32x4.load_splat\";\n  export const v64x2_load_splat = \"~lib/builtins/v64x2.load_splat\";\n\n  // internals\n  export const heap_base = \"~lib/memory/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/function.ts\n  export const Function = \"~lib/function/Function\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_data = \"~lib/memory/memory.data\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // std/bindings/wasi.ts\n  export const wasiAbort = \"~lib/wasi/index/abort\";\n  export const wasiTrace = \"~lib/wasi/index/trace\";\n  export const wasiSeed = \"~lib/wasi/index/seed\";\n}\n\n/** Builtin compilation context. */\nexport class BuiltinContext {\n  constructor(\n    /** Compiler reference. */\n    public compiler: Compiler,\n    /** Prototype being called. */\n    public prototype: FunctionPrototype,\n    /** Provided type arguments. */\n    public typeArguments: Type[] | null,\n    /** Provided operands. */\n    public operands: Expression[],\n    /** Provided this operand, if any. */\n    public thisOperand: Expression | null,\n    /** Contextual type. */\n    public contextualType: Type,\n    /** Respective call expression. */\n    public reportNode: CallExpression,\n    /** Whether originating from inline assembly. */\n    public contextIsExact: bool\n  ) {}\n}\n\n/** Global builtins map. */\nexport const builtins = new Map<string,(ctx: BuiltinContext) => ExpressionRef>();\n\n/** Function builtins map. */\nexport const function_builtins = new Map<string,(ctx: BuiltinContext) => ExpressionRef>();\n\n// === Static type evaluation =================================================================\n\n// isInteger<T!>() / isInteger<T?>(value: T) -> bool\nfunction builtin_isInteger(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isIntegerValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isInteger, builtin_isInteger);\n\n// isFloat<T!>() / isFloat<T?>(value: T) -> bool\nfunction builtin_isFloat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isFloatValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFloat, builtin_isFloat);\n\n// isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\nfunction builtin_isBoolean(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isBooleanValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isBoolean, builtin_isBoolean);\n\n// isSigned<T!>() / isSigned<T?>(value: T) -> bool\nfunction builtin_isSigned(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isSignedIntegerValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isSigned, builtin_isSigned);\n\n// isReference<T!>() / isReference<T?>(value: T) -> bool\nfunction builtin_isReference(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isReference ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isReference, builtin_isReference);\n\n// isString<T!>() / isString<T?>(value: T) -> bool\nfunction builtin_isString(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  var classReference = type.getClass();\n  return module.i32(\n    classReference !== null && classReference.isAssignableTo(compiler.program.stringInstance)\n      ? 1\n      : 0\n  );\n}\nbuiltins.set(BuiltinNames.isString, builtin_isString);\n\n// isArray<T!>() / isArray<T?>(value: T) -> bool\nfunction builtin_isArray(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  var classReference = type.getClass();\n  return module.i32(\n    classReference !== null && classReference.extends(compiler.program.arrayPrototype)\n      ? 1\n      : 0\n  );\n}\nbuiltins.set(BuiltinNames.isArray, builtin_isArray);\n\n// isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\nfunction builtin_isArrayLike(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  var classReference = type.getClass();\n  return module.i32(\n    classReference !== null && classReference.isArrayLike\n      ? 1\n      : 0\n  );\n}\nbuiltins.set(BuiltinNames.isArrayLike, builtin_isArrayLike);\n\n// isFunction<T!> / isFunction<T?>(value: T) -> bool\nfunction builtin_isFunction(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isFunction ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFunction, builtin_isFunction);\n\n// isNullable<T!> / isNullable<T?>(value: T) -> bool\nfunction builtin_isNullable(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isNullableReference ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isNullable, builtin_isNullable);\n\n// isDefined(expression) -> bool\nfunction builtin_isDefined(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var element = compiler.resolver.lookupExpression(\n    ctx.operands[0],\n    compiler.currentFlow,\n    Type.auto,\n    ReportMode.SWALLOW\n  );\n  return module.i32(element !== null ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isDefined, builtin_isDefined);\n\n// isConstant(expression) -> bool\nfunction builtin_isConstant(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var expr = compiler.compileExpression(ctx.operands[0], Type.auto);\n  compiler.currentType = Type.bool;\n  return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isConstant, builtin_isConstant);\n\n// isManaged<T!>() -> bool\nfunction builtin_isManaged(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isManaged ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isManaged, builtin_isManaged);\n\n// isVoid<T!>() -> bool\nfunction builtin_isVoid(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isVoid, builtin_isVoid);\n\n// lengthof<T!>() -> i32\nfunction builtin_lengthof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.i32;\n  if (!type) return module.unreachable();\n  var signatureReference = type.signatureReference;\n  if (!signatureReference) {\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_call_signatures,\n      ctx.reportNode.range, type.toString()\n    );\n    return module.unreachable();\n  }\n  return module.i32(signatureReference.parameterTypes.length);\n}\nbuiltins.set(BuiltinNames.lengthof, builtin_lengthof);\n\n// sizeof<T!>() -> usize*\nfunction builtin_sizeof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!byteSize) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(byteSize), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.sizeof, builtin_sizeof);\n\n// alignof<T!>() -> usize*\nfunction builtin_alignof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!isPowerOf2(byteSize)) { // implies == 0\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"alignof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(ctz<i32>(byteSize)), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.alignof, builtin_alignof);\n\n// offsetof<T!>(fieldName?: string) -> usize*\nfunction builtin_offsetof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 0, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var type = ctx.typeArguments![0];\n  var classReference = type.getClassOrWrapper(compiler.program);\n  if (!classReference) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n    );\n    if (compiler.options.isWasm64) {\n      if (contextualType.isIntegerValue && contextualType.size <= 32) {\n        compiler.currentType = Type.u32;\n      }\n    } else {\n      if (contextualType.isIntegerValue && contextualType.size == 64) {\n        compiler.currentType = Type.u64;\n      }\n    }\n    return module.unreachable();\n  }\n  if (operands.length) {\n    let firstOperand = operands[0];\n    if (!firstOperand.isLiteralKind(LiteralKind.STRING)) {\n      compiler.error(\n        DiagnosticCode.String_literal_expected,\n        operands[0].range\n      );\n      return module.unreachable();\n    }\n    let fieldName = (<StringLiteralExpression>firstOperand).value;\n    let classMembers = classReference.members;\n    if (classMembers !== null && classMembers.has(fieldName)) {\n      let member = assert(classMembers.get(fieldName));\n      if (member.kind == ElementKind.FIELD) {\n        return contextualUsize(compiler, i64_new((<Field>member).memoryOffset), contextualType);\n      }\n    }\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_property_1,\n      firstOperand.range, classReference.internalName, fieldName\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(classReference.nextMemoryOffset), contextualType);\n}\nbuiltins.set(BuiltinNames.offsetof, builtin_offsetof);\n\n// nameof<T> -> string\nfunction builtin_nameof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var resultType = evaluateConstantType(ctx);\n  if (!resultType) {\n    compiler.currentType = compiler.program.stringInstance.type;\n    return module.unreachable();\n  }\n  var value: string;\n  if (resultType.isInternalReference) {\n    let classReference = resultType.getClass();\n    if (classReference) {\n      value = classReference.name;\n    } else {\n      assert(resultType.getSignature());\n      value = \"Function\";\n    }\n  } else {\n    value = resultType.toString();\n  }\n  return compiler.ensureStaticString(value);\n}\nbuiltins.set(BuiltinNames.nameof, builtin_nameof);\n\n// idof<T> -> u32\nfunction builtin_idof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.u32;\n  if (!type) return module.unreachable();\n  let signatureReference = type.getSignature();\n  if (signatureReference) {\n    return module.i32(signatureReference.id);\n  }\n  let classReference = type.getClassOrWrapper(compiler.program);\n  if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n    return module.i32(classReference.id);\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"idof\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.idof, builtin_idof);\n\n// === Math ===================================================================================\n\n// clz<T?>(value: T) -> T\nfunction builtin_clz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(ctx.operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(ctx.operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ClzI64\n            : UnaryOp.ClzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"clz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.clz, builtin_clz);\n\n// ctz<T?>(value: T) -> T\nfunction builtin_ctz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.CtzI64\n            : UnaryOp.CtzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ctz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ctz, builtin_ctz);\n\n// popcnt<T?>(value: T) -> T\nfunction builtin_popcnt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (compiler.currentType.kind) {\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.I8: // not wrapped\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.PopcntI64\n            : UnaryOp.PopcntI32,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.popcnt, builtin_popcnt);\n\n// rotl<T?>(value: T, shift: T) -> T\nfunction builtin_rotl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // (value << (shift & mask)) | (value >>> ((0 - shift) & mask))\n        let flow = compiler.currentFlow;\n        let temp1 = flow.getTempLocal(type);\n        flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n        let temp2 = flow.getTempLocal(type);\n        flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n\n        let ret = module.binary(BinaryOp.OrI32,\n          module.binary(\n            BinaryOp.ShlI32,\n            module.local_tee(temp1.index, arg0),\n            module.binary(\n              BinaryOp.AndI32,\n              module.local_tee(temp2.index, arg1),\n              module.i32(type.size - 1)\n            )\n          ),\n          module.binary(\n            BinaryOp.ShrU32,\n            module.local_get(temp1.index, NativeType.I32),\n            module.binary(\n              BinaryOp.AndI32,\n              module.binary(\n                BinaryOp.SubI32,\n                module.i32(0),\n                module.local_get(temp2.index, NativeType.I32)\n              ),\n              module.i32(type.size - 1)\n            )\n          )\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n\n        return ret;\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotlI64\n            : BinaryOp.RotlI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotl, builtin_rotl);\n\n// rotr<T?>(value: T, shift: T) -> T\nfunction builtin_rotr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // (value >>> (shift & mask)) | (value << ((0 - shift) & mask))\n        let flow = compiler.currentFlow;\n        let temp1 = flow.getTempLocal(type);\n        flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n        let temp2 = flow.getTempLocal(type);\n        flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n\n        let ret = module.binary(BinaryOp.OrI32,\n          module.binary(\n            BinaryOp.ShrU32,\n            module.local_tee(temp1.index, arg0),\n            module.binary(\n              BinaryOp.AndI32,\n              module.local_tee(temp2.index, arg1),\n              module.i32(type.size - 1)\n            )\n          ),\n          module.binary(\n            BinaryOp.ShlI32,\n            module.local_get(temp1.index, NativeType.I32),\n            module.binary(\n              BinaryOp.AndI32,\n              module.binary(\n                BinaryOp.SubI32,\n                module.i32(0),\n                module.local_get(temp2.index, NativeType.I32)\n              ),\n              module.i32(type.size - 1)\n            )\n          )\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n\n        return ret;\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotrI64\n            : BinaryOp.RotrI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotr, builtin_rotr);\n\n// abs<T?>(value: T) -> T\nfunction builtin_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: {\n        let flow = compiler.currentFlow;\n\n        // possibly overflows, e.g. abs<i8>(-128) == 128\n        let temp1 = flow.getTempLocal(Type.i32);\n        let temp2 = flow.getTempLocal(Type.i32);\n        // (x + (x >> 31)) ^ (x >> 31)\n        let ret = module.binary(BinaryOp.XorI32,\n          module.binary(BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0),\n                module.i32(31)\n              )\n            ),\n            module.local_get(temp1.index, NativeType.I32)\n          ),\n          module.local_get(temp2.index, NativeType.I32)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.ISIZE: {\n        let options = compiler.options;\n        let flow = compiler.currentFlow;\n        let isWasm64 = options.isWasm64;\n\n        let temp1 = flow.getTempLocal(options.usizeType);\n        let temp2 = flow.getTempLocal(options.usizeType);\n        let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n          module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0),\n                isWasm64 ? module.i64(63) : module.i32(31)\n              )\n            ),\n            module.local_get(temp1.index, options.nativeSizeType)\n          ),\n          module.local_get(temp2.index, options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.I64: {\n        let flow = compiler.currentFlow;\n\n        let temp1 = flow.getTempLocal(Type.i64);\n        let temp2 = flow.getTempLocal(Type.i64);\n        // (x + (x >> 63)) ^ (x >> 63)\n        let ret = module.binary(BinaryOp.XorI64,\n          module.binary(BinaryOp.AddI64,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI64,\n                module.local_tee(temp1.index, arg0),\n                module.i64(63)\n              )\n            ),\n            module.local_get(temp1.index, NativeType.I64)\n          ),\n          module.local_get(temp2.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.USIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.abs, builtin_abs);\n\n// max<T?>(left: T, right: T) -> T\nfunction builtin_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n      case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n      case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtI64\n          : BinaryOp.GtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtU64\n          : BinaryOp.GtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0),\n        module.local_tee(temp2.index, arg1),\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.max, builtin_max);\n\n// min<T?>(left: T, right: T) -> T\nfunction builtin_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n      case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n      case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtI64\n          : BinaryOp.LtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtU64\n          : BinaryOp.LtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0),\n        module.local_tee(temp2.index, arg1),\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.min, builtin_min);\n\n// ceil<T?>(value: T) -> T\nfunction builtin_ceil(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ceil\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ceil, builtin_ceil);\n\n// floor<T?>(value: T) -> T\nfunction builtin_floor(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"floor\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.floor, builtin_floor);\n\n// copysign<T?>(left: T, right: T) -> T\nfunction builtin_copysign(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      // TODO: does an integer version make sense?\n      case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"copysign\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.copysign, builtin_copysign);\n\n// nearest<T?>(value: T) -> T\nfunction builtin_nearest(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"nearest\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.nearest, builtin_nearest);\n\n// reinterpret<T!>(value: *) -> T\nfunction builtin_reinterpret(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF32, arg0);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF64, arg0);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let arg0 = compiler.compileExpression(operands[0],\n          compiler.options.isWasm64\n            ? Type.f64\n            : Type.f32,\n          Constraints.CONV_IMPLICIT\n        );\n        compiler.currentType = type;\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ReinterpretF64\n            : UnaryOp.ReinterpretF32,\n          arg0\n        );\n      }\n      case TypeKind.F32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f32;\n        return module.unary(UnaryOp.ReinterpretI32, arg0);\n      }\n      case TypeKind.F64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f64;\n        return module.unary(UnaryOp.ReinterpretI64, arg0);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.reinterpret, builtin_reinterpret);\n\n// sqrt<T?>(value: T) -> T\nfunction builtin_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      // TODO: integer versions (that return f64 or convert)?\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.sqrt, builtin_sqrt);\n\n// trunc<T?>(value: T) -> T\nfunction builtin_trunc(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered truncated\n      case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"trunc\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.trunc, builtin_trunc);\n\n// isNaN<T?>(value: T) -> bool\nfunction builtin_isNaN(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      // never NaN\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return module.maybeDropCondition(arg0, module.i32(0));\n      }\n      // (t = arg0) != t\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF32,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.NeF32,\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF64,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.NeF64,\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isNaN, builtin_isNaN);\n\n// isFinite<T?>(value: T) -> bool\nfunction builtin_isFinite(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      // always finite\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return module.maybeDropCondition(arg0, module.i32(1));\n      }\n      // (t = arg0) - t == 0\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF32,\n            module.binary(BinaryOp.SubF32,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n            ),\n            module.f32(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.EqF32,\n          module.binary(BinaryOp.SubF32,\n            module.local_tee(temp.index, arg0),\n            module.local_get(temp.index, NativeType.F32)\n          ),\n          module.f32(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF64,\n            module.binary(BinaryOp.SubF64,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n            ),\n            module.f64(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.EqF64,\n          module.binary(BinaryOp.SubF64,\n            module.local_tee(temp.index, arg0),\n            module.local_get(temp.index, NativeType.F64)\n          ),\n          module.f64(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isFinite, builtin_isFinite);\n\n// === Memory access ==========================================================================\n\n// load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\nfunction builtin_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    contextualType != Type.auto &&\n    type.isIntegerValue &&\n    contextualType.isIntegerValue &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = outType;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = outType;\n  return module.load(\n    type.byteSize,\n    type.isSignedIntegerValue,\n    arg0,\n    outType.toNativeType(),\n    immOffset,\n    immAlign\n  );\n}\nbuiltins.set(BuiltinNames.load, builtin_load);\n\n// store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\nfunction builtin_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue || // float to int\n      inType.size < type.size   // int to larger int (clear garbage bits)\n    )\n  ) {\n    // either conversion or memory operation clears garbage bits\n    arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n    inType = type;\n  }\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 3) {\n    immOffset = evaluateImmediateOffset(operands[2], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.void;\n      return module.unreachable();\n    }\n    if (numOperands == 4) {\n      immAlign = evaluateImmediateAlign(operands[3], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.void;\n  return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n}\nbuiltins.set(BuiltinNames.store, builtin_store);\n\n// add<T?>(left: T, right: T) -> T\nfunction builtin_add(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      return compiler.makeAdd(arg0, arg1, type);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"add\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.add, builtin_add);\n\n// sub<T?>(left: T, right: T) -> T\nfunction builtin_sub(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      return compiler.makeSub(arg0, arg1, type);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"sub\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.sub, builtin_sub);\n\n// mul<T?>(left: T, right: T) -> T\nfunction builtin_mul(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      return compiler.makeMul(arg0, arg1, type);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"mul\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.mul, builtin_mul);\n\n// div<T?>(left: T, right: T) -> T\nfunction builtin_div(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      return compiler.makeDiv(arg0, arg1, type);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"div\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.div, builtin_div);\n\n// === Atomics ================================================================================\n\n// atomic.load<T!>(offset: usize, immOffset?: usize) -> T*\nfunction builtin_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    type.isIntegerValue &&\n    contextualType.isIntegerValue &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  if (!type.isIntegerValue) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n    );\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  compiler.currentType = outType;\n  return module.atomic_load(\n    type.byteSize,\n    arg0,\n    outType.toNativeType(),\n    immOffset\n  );\n}\nbuiltins.set(BuiltinNames.atomic_load, builtin_atomic_load);\n\n// atomic.store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\nfunction builtin_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.isIntegerValue) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n    );\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(\n        operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue|| // float to int\n      inType.size < type.size  // int to larger int (clear garbage bits)\n    )\n  ) {\n    // either conversion or memory operation clears garbage bits\n    arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  compiler.currentType = Type.void;\n  return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n}\nbuiltins.set(BuiltinNames.atomic_store, builtin_atomic_store);\n\n// any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_binary(ctx: BuiltinContext, op: AtomicRMWOp, opName: string): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.isIntegerValue || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, opName, type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue || // float to int\n      inType.size < type.size   // int to larger int (clear garbage bits)\n    )\n  ) {\n    // either conversion or memory operation clears garbage bits\n    arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n}\n\n// atomic.add<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_add(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Add, \"atomic.add\");\n}\nbuiltins.set(BuiltinNames.atomic_add, builtin_atomic_add);\n\n// atomic.sub<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_sub(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Sub, \"atomic.sub\");\n}\nbuiltins.set(BuiltinNames.atomic_sub, builtin_atomic_sub);\n\n// atomic.and<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.And, \"atomic.and\");\n}\nbuiltins.set(BuiltinNames.atomic_and, builtin_atomic_and);\n\n// atomic.or<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Or, \"atomic.or\");\n}\nbuiltins.set(BuiltinNames.atomic_or, builtin_atomic_or);\n\n// atomic.xor<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xor, \"atomic.xor\");\n}\nbuiltins.set(BuiltinNames.atomic_xor, builtin_atomic_xor);\n\n// atomic.xchg<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xchg(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xchg, \"atomic.xchg\");\n}\nbuiltins.set(BuiltinNames.atomic_xchg, builtin_atomic_xchg);\n\n// atomic.cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\nfunction builtin_atomic_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 3, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.isIntegerValue || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  var arg2 = compiler.compileExpression(operands[2],\n    inType,\n    Constraints.CONV_IMPLICIT\n  );\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue || // float to int\n      inType.size < type.size   // int to larger int (clear garbage bits)\n    )\n  ) {\n    // either conversion or memory operation clears garbage bits\n    arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n    arg2 = compiler.convertExpression(arg2, inType, type, false, operands[2]);\n    inType = type;\n  }\n  var immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n}\nbuiltins.set(BuiltinNames.atomic_cmpxchg, builtin_atomic_cmpxchg);\n\n// atomic.wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\nfunction builtin_atomic_wait(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  switch (type.kind) {\n    case TypeKind.I32:\n    case TypeKind.I64:\n    case TypeKind.ISIZE:\n    case TypeKind.U32:\n    case TypeKind.U64:\n    case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.atomic_wait, builtin_atomic_wait);\n\n// atomic.notify(ptr: usize, count: i32) -> i32\nfunction builtin_atomic_notify(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  return module.atomic_notify(arg0, arg1);\n}\nbuiltins.set(BuiltinNames.atomic_notify, builtin_atomic_notify);\n\n// atomic.fence() -> void\nfunction builtin_atomic_fence(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.atomic_fence();\n}\nbuiltins.set(BuiltinNames.atomic_fence, builtin_atomic_fence);\n\n// === Control flow ===========================================================================\n\n// select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\nfunction builtin_select(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"select\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.makeIsTrueish(\n    compiler.compileExpression(operands[2], Type.bool),\n    compiler.currentType, // ^\n    operands[2]\n  );\n  compiler.currentType = type;\n  return module.select(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.select, builtin_select);\n\n// unreachable() -> *\nfunction builtin_unreachable(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  checkArgsRequired(ctx, 0);\n  return ctx.compiler.module.unreachable();\n}\nbuiltins.set(BuiltinNames.unreachable, builtin_unreachable);\n\n// === Memory =================================================================================\n\n// memory.size() -> i32\nfunction builtin_memory_size(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.memory_size();\n}\nbuiltins.set(BuiltinNames.memory_size, builtin_memory_size);\n\n// memory.grow(pages: i32) -> i32\nfunction builtin_memory_grow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  return module.memory_grow(compiler.compileExpression(ctx.operands[0], Type.i32, Constraints.CONV_IMPLICIT));\n}\nbuiltins.set(BuiltinNames.memory_grow, builtin_memory_grow);\n\n// memory.copy(dest: usize, src: usize: n: usize) -> void\nfunction builtin_memory_copy(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_copy(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_copy, builtin_memory_copy);\n\n// memory.fill(dest: usize, value: u8, n: usize) -> void\nfunction builtin_memory_fill(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_fill(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_fill, builtin_memory_fill);\n\n// memory.data(size[, align]) -> usize\n// memory.data<T>(values[, align]) -> usize\nfunction builtin_memory_data(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  var usizeType = compiler.options.usizeType;\n  var offset: i64;\n  if (typeArguments !== null && typeArguments.length > 0) { // data<T>(values[, align])\n    let elementType = typeArguments[0];\n    if (!elementType.isValue) {\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        ctx.reportNode.typeArgumentsRange, \"memory.data\", elementType.toString()\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let valuesOperand = operands[0];\n    if (valuesOperand.kind != NodeKind.LITERAL || (<LiteralExpression>valuesOperand).literalKind != LiteralKind.ARRAY) {\n      compiler.error(\n        DiagnosticCode.Array_literal_expected,\n        operands[0].range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let expressions = (<ArrayLiteralExpression>valuesOperand).elementExpressions;\n    let numElements = expressions.length;\n    let exprs = new Array<ExpressionRef>(numElements);\n    let isStatic = true;\n    for (let i = 0; i < numElements; ++i) {\n      let elementExpression = expressions[i];\n      if (elementExpression.kind != NodeKind.OMITTED) {\n        let expr = compiler.compileExpression(elementExpression, elementType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        exprs[i] = expr;\n      } else {\n        exprs[i] = compiler.makeZero(elementType, elementExpression);\n      }\n    }\n    if (!isStatic) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        valuesOperand.range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let align = elementType.byteSize;\n    if (numOperands == 2) {\n      align = evaluateImmediateAlign(operands[1], align, compiler); // reports\n      if (align < 0) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n    }\n    let buf = new Uint8Array(numElements * elementType.byteSize);\n    assert(compiler.writeStaticBuffer(buf, 0, elementType, exprs) == buf.byteLength);\n    offset = compiler.addAlignedMemorySegment(buf, align).offset;\n  } else { // data(size[, align])\n    let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(arg0, ExpressionRunnerFlags.PreserveSideeffects);\n    if (!precomp) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[0].range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let size = getConstValueI32(precomp);\n    if (size < 1) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[0].range, \"1\", i32.MAX_VALUE.toString()\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let align = 16;\n    if (numOperands == 2) {\n      align = evaluateImmediateAlign(operands[1], align, compiler); // reports\n      if (align < 0) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n    }\n    offset = compiler.addAlignedMemorySegment(new Uint8Array(size), align).offset;\n  }\n  // FIXME: what if recompiles happen? recompiles are bad.\n  compiler.currentType = usizeType;\n  if (usizeType == Type.usize32) {\n    assert(!i64_high(offset));\n    return module.i32(i64_low(offset));\n  } else {\n    return module.i64(i64_low(offset), i64_high(offset));\n  }\n}\nbuiltins.set(BuiltinNames.memory_data, builtin_memory_data);\n\n// === Helpers ================================================================================\n\n// changetype<T!>(value: *) -> T\nfunction builtin_changetype(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var toType = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.auto);\n  var fromType = compiler.currentType;\n  compiler.currentType = toType;\n  if (!fromType.isChangeableTo(toType)) {\n    compiler.error(\n      DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n      ctx.reportNode.range, fromType.toString(), toType.toString()\n    );\n    return module.unreachable();\n  }\n  return arg0;\n}\nbuiltins.set(BuiltinNames.changetype, builtin_changetype);\n\n// assert<T?>(isTrueish: T, message?: string) -> T{!= null}\nfunction builtin_assert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var typeArguments = ctx.typeArguments;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) {\n    if (typeArguments) {\n      assert(typeArguments.length); // otherwise invalid, should not been set at all\n      compiler.currentType = typeArguments[0].nonNullableType;\n    }\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  compiler.currentType = type.nonNullableType;\n\n  // omit if assertions are disabled\n  if (compiler.options.noAssert) {\n    return arg0;\n  }\n\n  // omit if the assertion can be proven statically\n  var evaled = module.runExpression(arg0, ExpressionRunnerFlags.Default);\n  if (evaled) {\n    switch (<u32>getExpressionType(evaled)) {\n      case <u32>NativeType.I32: {\n        if (getConstValueI32(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.I64: {\n        if (getConstValueI64Low(evaled) | getConstValueI64High(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.F32: {\n        if (getConstValueF32(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.F64: {\n        if (getConstValueF64(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n    }\n  }\n\n  // otherwise call abort if the assertion is false-ish\n  var abort = compiler.makeAbort(operands.length == 2 ? operands[1] : null, ctx.reportNode);\n  compiler.currentType = type.nonNullableType;\n  if (contextualType == Type.void) { // simplify if dropped anyway\n    compiler.currentType = Type.void;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            arg0\n          ),\n          abort\n        );\n      }\n      // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n      case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n      case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.EXNREF:\n      case TypeKind.ANYREF: return module.if(module.ref_is_null(arg0), abort);\n\n    }\n  } else {\n    compiler.currentType = type.nonNullableType;\n    let flow = compiler.currentFlow;\n    switch (compiler.currentType.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: {\n        let temp = flow.getTempLocal(type);\n        flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n        let ret = module.if(\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.I32),\n          abort\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let temp = flow.getTempLocal(Type.i64);\n        let ret = module.if(\n          module.unary(UnaryOp.EqzI64,\n            module.local_tee(temp.index, arg0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let temp = flow.getTempLocal(compiler.options.usizeType);\n        let ret = module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            module.local_tee(temp.index, arg0)\n          ),\n          abort,\n          module.local_get(temp.index, compiler.options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F32: {\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF32,\n            module.local_tee(temp.index, arg0),\n            module.f32(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF64,\n            module.local_tee(temp.index, arg0),\n            module.f64(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.EXNREF:\n      case TypeKind.ANYREF: {\n        let temp = flow.getTempLocal(type);\n        let ret = module.if(\n          module.ref_is_null(\n            module.local_tee(temp.index, arg0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"assert\", compiler.currentType.toString()\n  );\n  return abort;\n}\nbuiltins.set(BuiltinNames.assert, builtin_assert);\n\n// unchecked(expr: *) -> *\nfunction builtin_unchecked(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var flow = compiler.currentFlow;\n  var alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n  flow.set(FlowFlags.UNCHECKED_CONTEXT);\n  // eliminate unnecessary tees by preferring contextualType(=void)\n  var expr = compiler.compileExpression(ctx.operands[0], ctx.contextualType);\n  if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n  return expr;\n}\nbuiltins.set(BuiltinNames.unchecked, builtin_unchecked);\n\n// call_indirect<T?>(index: u32, ...args: *[]) -> T\nfunction builtin_call_indirect(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsOptional(ctx, 1, i32.MAX_VALUE)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var returnType: Type;\n  if (typeArguments) {\n    assert(typeArguments.length);\n    returnType = typeArguments[0];\n  } else {\n    returnType = ctx.contextualType;\n  }\n  var indexArg = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length - 1;\n  var operandExprs = new Array<ExpressionRef>(numOperands);\n  var nativeParamTypes = new Array<NativeType>(numOperands);\n  for (let i = 0; i < numOperands; ++i) {\n    operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.auto);\n    nativeParamTypes[i] = compiler.currentType.toNativeType();\n  }\n  compiler.currentType = returnType;\n  return module.call_indirect(indexArg, operandExprs, createType(nativeParamTypes), returnType.toNativeType());\n}\nbuiltins.set(BuiltinNames.call_indirect, builtin_call_indirect);\n\n// instantiate<T!>(...args: *[]) -> T\nfunction builtin_instantiate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var typeArgument = typeArguments[0];\n  var classInstance = typeArgument.getClass();\n  if (!classInstance) {\n    compiler.error(\n      DiagnosticCode.This_expression_is_not_constructable,\n      ctx.reportNode.expression.range\n    );\n    return module.unreachable();\n  }\n  compiler.currentType = classInstance.type;\n  var ctor = compiler.ensureConstructor(classInstance, ctx.reportNode);\n  compiler.checkFieldInitialization(classInstance, ctx.reportNode);\n  return compiler.compileInstantiate(ctor, operands, Constraints.NONE, ctx.reportNode);\n}\nbuiltins.set(BuiltinNames.instantiate, builtin_instantiate);\n\n// === User-defined diagnostics ===============================================================\n\nfunction builtin_diagnostic(ctx: BuiltinContext, category: DiagnosticCategory): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  checkTypeAbsent(ctx);\n  var operands = ctx.operands;\n  var reportNode = ctx.reportNode;\n  compiler.emitDiagnostic(\n    DiagnosticCode.User_defined_0,\n    category,\n    reportNode.range,\n    null,\n    operands.length\n      ? operands[0].range.toString()\n      : reportNode.range.toString()\n  );\n  return category == DiagnosticCategory.ERROR\n    ? module.unreachable()\n    : module.nop();\n}\n\n// ERROR(message?)\nfunction builtin_error(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.ERROR);\n}\nbuiltins.set(BuiltinNames.ERROR, builtin_error);\n\n// WARNING(message?)\nfunction builtin_warning(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.WARNING);\n}\nbuiltins.set(BuiltinNames.WARNING, builtin_warning);\n\n// INFO(message?)\nfunction builtin_info(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.INFO);\n}\nbuiltins.set(BuiltinNames.INFO, builtin_info);\n\n// === Function builtins ======================================================================\n\n// Function<T>#call(thisArg: thisof<T> | null, ...args: *[]) -> returnof<T>\nfunction builtin_function_call(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var parent = ctx.prototype.parent;\n  assert(parent.kind == ElementKind.CLASS);\n  var classInstance = <Class>parent;\n  assert(classInstance.prototype == compiler.program.functionPrototype);\n  var typeArguments = assert(classInstance.typeArguments);\n  assert(typeArguments.length == 1);\n  var ftype = typeArguments[0];\n  var signature = assert(ftype.getSignature());\n  var returnType = signature.returnType;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsOptional(ctx, 1 + signature.requiredParameters, 1 + signature.parameterTypes.length)\n  ) {\n    compiler.currentType = returnType;\n    return compiler.module.unreachable();\n  }\n  var indexArg = compiler.compileExpression(assert(ctx.thisOperand), ftype, Constraints.CONV_IMPLICIT);\n  var thisOperand = assert(ctx.operands.shift());\n  var thisType = signature.thisType;\n  var thisArg: usize = 0;\n  if (thisType) {\n    thisArg = compiler.compileExpression(thisOperand, thisType, Constraints.CONV_IMPLICIT);\n  } else if (thisOperand.kind != NodeKind.NULL) {\n    compiler.error(\n      DiagnosticCode._this_cannot_be_referenced_in_current_location,\n      thisOperand.range\n    );\n    return compiler.module.unreachable();\n  }\n  return compiler.compileCallIndirect(signature, indexArg, ctx.operands, ctx.reportNode, thisArg, ctx.contextualType == Type.void);\n}\nfunction_builtins.set(\"call\", builtin_function_call);\n\n// === Portable type conversions ==============================================================\n\nfunction builtin_conversion(ctx: BuiltinContext, toType: Type): ExpressionRef {\n  var compiler = ctx.compiler;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = toType;\n    return compiler.module.unreachable();\n  }\n  return compiler.compileExpression(ctx.operands[0], toType, Constraints.CONV_EXPLICIT);\n}\n\n// i8(*) -> i8\nfunction builtin_i8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i8);\n}\nbuiltins.set(BuiltinNames.i8, builtin_i8);\n\n// i16(*) -> i16\nfunction builtin_i16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i16);\n}\nbuiltins.set(BuiltinNames.i16, builtin_i16);\n\n// i32(*) -> i32\nfunction builtin_i32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i32);\n}\nbuiltins.set(BuiltinNames.i32, builtin_i32);\n\n// i64(*) -> i64\nfunction builtin_i64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i64);\n}\nbuiltins.set(BuiltinNames.i64, builtin_i64);\n\n// isize(*) -> isize\nfunction builtin_isize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.isizeType);\n}\nbuiltins.set(BuiltinNames.isize, builtin_isize);\n\n// u8(*) -> u8\nfunction builtin_u8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u8);\n}\nbuiltins.set(BuiltinNames.u8, builtin_u8);\n\n// u16(*) -> u16\nfunction builtin_u16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u16);\n}\nbuiltins.set(BuiltinNames.u16, builtin_u16);\n\n// u32(*) -> u32\nfunction builtin_u32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u32);\n}\nbuiltins.set(BuiltinNames.u32, builtin_u32);\n\n// u64(*) -> u64\nfunction builtin_u64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u64);\n}\nbuiltins.set(BuiltinNames.u64, builtin_u64);\n\n// usize(*) -> usize\nfunction builtin_usize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.usizeType);\n}\nbuiltins.set(BuiltinNames.usize, builtin_usize);\n\n// bool(*) -> bool\nfunction builtin_bool(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.bool);\n}\nbuiltins.set(BuiltinNames.bool, builtin_bool);\n\n// f32(*) -> f32\nfunction builtin_f32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f32);\n}\nbuiltins.set(BuiltinNames.f32, builtin_f32);\n\n// f64(*) -> f64\nfunction builtin_f64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f64);\n}\nbuiltins.set(BuiltinNames.f64, builtin_f64);\n\n// TODO: alias for now, splat input integer perhaps?\nfunction builtin_v128(ctx: BuiltinContext): ExpressionRef {\n  return builtin_i8x16(ctx);\n}\nbuiltins.set(BuiltinNames.v128, builtin_v128);\n\n// === SIMD ===================================================================================\n\n// i8x16(...values: i8[16]) -> v128\nfunction builtin_i8x16(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 16)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 16; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i8, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI8(getConstValueI32(precomp), bytes, i);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i8x16, builtin_i8x16);\n\n// i16x8(...values: i16[8]) -> v128\nfunction builtin_i16x8(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 8)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 8; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i16, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI16(getConstValueI32(precomp), bytes, i << 1);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i16x8, builtin_i16x8);\n\n// i32x4(...values: i32[4]) -> v128\nfunction builtin_i32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI32(getConstValueI32(precomp), bytes, i << 2);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i32x4, builtin_i32x4);\n\n// i64x2(...values: i64[2]) -> v128\nfunction builtin_i64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      let off = i << 3;\n      writeI32(getConstValueI64Low(precomp), bytes, off);\n      writeI32(getConstValueI64High(precomp), bytes, off + 4);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i64x2, builtin_i64x2);\n\n// f32x4(...values: f32[4]) -> v128\nfunction builtin_f32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.f32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeF32(getConstValueF32(precomp), bytes, i << 2);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f32x4, builtin_f32x4);\n\n// f64x2(...values: f64[2]) -> v128\nfunction builtin_f64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.f64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeF64(getConstValueF64(precomp), bytes, i << 3);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f64x2, builtin_f64x2);\n\n// v128.splat<T!>(x: T) -> v128\nfunction builtin_v128_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.SplatI64x2\n            : UnaryOp.SplatI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_splat, builtin_v128_splat);\n\n// v128.extract_lane<T!>(x: v128, idx: u8) -> T\nfunction builtin_v128_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  compiler.currentType = type;\n  var idx = 0;\n  var precomp = module.runExpression(arg1, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (type.isValue) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, <u8>idx);\n      case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, <u8>idx);\n      case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, <u8>idx);\n      case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, <u8>idx);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, <u8>idx);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, <u8>idx);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_extract(\n          compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneI64x2\n            : SIMDExtractOp.ExtractLaneI32x4,\n          arg0, <u8>idx\n        );\n      }\n      case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, <u8>idx);\n      case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, <u8>idx);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extract_lane, builtin_v128_extract_lane);\n\n// v128.replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\nfunction builtin_v128_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  var idx = 0;\n  var precomp = module.runExpression(arg1, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (type.isValue) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, <u8>idx, arg2);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, <u8>idx, arg2);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, <u8>idx, arg2);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, <u8>idx, arg2);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_replace(\n          compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneI64x2\n            : SIMDReplaceOp.ReplaceLaneI32x4,\n          arg0, <u8>idx, arg2\n        );\n      }\n      case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, <u8>idx, arg2);\n      case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, <u8>idx, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_replace_lane, builtin_v128_replace_lane);\n\n// v128.shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\nfunction builtin_v128_shuffle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  if (type.isValue) {\n    let laneWidth = type.byteSize;\n    let laneCount = 16 / laneWidth;\n    assert(isInteger(laneCount) && isPowerOf2(laneCount));\n    if (\n      checkArgsRequired(ctx, 2 + laneCount)\n    ) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n    let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.F32:\n      case TypeKind.F64: {\n        let mask = new Uint8Array(16);\n        let maxIdx = (laneCount << 1) - 1;\n        for (let i = 0; i < laneCount; ++i) {\n          let operand = operands[2 + i];\n          let argN = compiler.compileExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n          let precomp = module.runExpression(argN, ExpressionRunnerFlags.PreserveSideeffects);\n          let idx = 0;\n          if (precomp) {\n            idx = getConstValueI32(precomp);\n            if (idx < 0 || idx > maxIdx) {\n              compiler.error(\n                DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n                operand.range, \"Lane index\", \"0\", maxIdx.toString()\n              );\n              idx = 0;\n            }\n          } else {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              operand.range\n            );\n          }\n          switch (laneWidth) {\n            case 1: {\n              writeI8(idx, mask, i);\n              break;\n            }\n            case 2: {\n              let off8 = i << 1;\n              let idx8 = idx << 1;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              break;\n            }\n            case 4: {\n              let off8 = i << 2;\n              let idx8 = idx << 2;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              break;\n            }\n            case 8: {\n              let off8 = i << 3;\n              let idx8 = idx << 3;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              writeI8(idx8 + 4, mask, off8 + 4);\n              writeI8(idx8 + 5, mask, off8 + 5);\n              writeI8(idx8 + 6, mask, off8 + 6);\n              writeI8(idx8 + 7, mask, off8 + 7);\n              break;\n            }\n            default: assert(false);\n          }\n        }\n        compiler.currentType = Type.v128;\n        return module.simd_shuffle(arg0, arg1, mask);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n  );\n  compiler.currentType = Type.v128;\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shuffle, builtin_v128_shuffle);\n\n// v128.swizzle(a: v128, b: v128) -> v128\nfunction builtin_v128_swizzle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(BinaryOp.SwizzleV8x16, arg0, arg1);\n}\nbuiltins.set(BuiltinNames.v128_swizzle, builtin_v128_swizzle);\n\n// v128.load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV8x16, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I16:\n      case TypeKind.U16: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV16x8, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.F32: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64:\n      case TypeKind.F64: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV64x2, arg0, immOffset, immAlign);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_splat, builtin_v128_load_splat);\n\n// v128.load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_ext(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_load(SIMDLoadOp.LoadI8ToI16x8, arg0, immOffset, immAlign);\n      case TypeKind.U8: return module.simd_load(SIMDLoadOp.LoadU8ToU16x8, arg0, immOffset, immAlign);\n      case TypeKind.I16: return module.simd_load(SIMDLoadOp.LoadI16ToI32x4, arg0, immOffset, immAlign);\n      case TypeKind.U16: return module.simd_load(SIMDLoadOp.LoadU16ToU32x4, arg0, immOffset, immAlign);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.simd_load(SIMDLoadOp.LoadI32ToI64x2, arg0, immOffset, immAlign);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.simd_load(SIMDLoadOp.LoadU32ToU64x2, arg0, immOffset, immAlign);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_ext, builtin_v128_load_ext);\n\n// v128.add<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.AddI64x2\n            : BinaryOp.AddI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add, builtin_v128_add);\n\n// v128.sub<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.SubI64x2\n            : BinaryOp.SubI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub, builtin_v128_sub);\n\n// v128.mul<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_mul(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.MulI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_mul, builtin_v128_mul);\n\n// v128.div<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_div(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_div, builtin_v128_div);\n\n// v128.add_saturate<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add_saturate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add_saturate\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add_saturate, builtin_v128_add_saturate);\n\n// v128.sub_saturate<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub_saturate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub_saturate\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub_saturate, builtin_v128_sub_saturate);\n\n// v128.min<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_min, builtin_v128_min);\n\n// v128.max<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_max, builtin_v128_max);\n\n// v128.pmin<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_pmin(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.PminF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.PminF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.pmin\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_pmin, builtin_v128_pmin);\n\n// v128.pmax<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_pmax(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.PmaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.PmaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.pmax\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_pmax, builtin_v128_pmax);\n\n// v128.dot<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_dot(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_dot, builtin_v128_dot);\n\n// v128.avgr<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_avgr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.U8:  return module.binary(BinaryOp.AvgrU8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AvgrU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.avgr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_avgr, builtin_v128_avgr);\n\n// v128.eq<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_eq(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_eq, builtin_v128_eq);\n\n// v128.ne<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ne(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ne, builtin_v128_ne);\n\n// v128.lt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_lt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_lt, builtin_v128_lt);\n\n// v128.le<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_le(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_le, builtin_v128_le);\n\n// v128.gt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_gt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_gt, builtin_v128_gt);\n\n// v128.ge<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ge(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ge, builtin_v128_ge);\n\n// v128.narrow<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_narrow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_narrow, builtin_v128_narrow);\n\n// v128.neg<T!>(a: v128) -> v128\nfunction builtin_v128_neg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.NegI64x2\n            : UnaryOp.NegI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_neg, builtin_v128_neg);\n\n// v128.abs<T!>(a: v128) -> v128\nfunction builtin_v128_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.AbsI8x16, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.AbsI16x8, arg0);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.AbsI32x4, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_abs, builtin_v128_abs);\n\n// v128.sqrt<T!>(a: v128) -> v128\nfunction builtin_v128_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sqrt, builtin_v128_sqrt);\n\n// v128.ceil<T!>(a: v128) -> v128\nfunction builtin_v128_ceil(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.CeilF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.CeilF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ceil\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ceil, builtin_v128_ceil);\n\n// v128.floor<T!>(a: v128) -> v128\nfunction builtin_v128_floor(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.FloorF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.FloorF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.floor\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_floor, builtin_v128_floor);\n\n// v128.trunc<T!>(a: v128) -> v128\nfunction builtin_v128_trunc(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.TruncF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.TruncF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc, builtin_v128_trunc);\n\n// v128.nearest<T!>(a: v128) -> v128\nfunction builtin_v128_nearest(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.NearestF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NearestF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.nearest\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_nearest, builtin_v128_nearest);\n\n// v128.convert<T!>(a: v128) -> v128\nfunction builtin_v128_convert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n      case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.ConvertI64x2ToF64x2, arg0);\n      case TypeKind.U64: return module.unary(UnaryOp.ConvertU64x2ToF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_convert, builtin_v128_convert);\n\n// v128.trunc_sat<T!>(a: v128) -> v128\nfunction builtin_v128_trunc_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n      case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.TruncSatF64x2ToI64x2, arg0);\n      case TypeKind.U64: return module.unary(UnaryOp.TruncSatF64x2ToU64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc_sat, builtin_v128_trunc_sat);\n\n// v128.widen_low<T!>(a: v128) -> v128\nfunction builtin_v128_widen_low(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.WidenLowI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.WidenLowU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.WidenLowI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.WidenLowU16x8ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.widen_low\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_widen_low, builtin_v128_widen_low);\n\n// v128.widen_high<T!>(a: v128) -> v128\nfunction builtin_v128_widen_high(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.WidenHighI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.WidenHighU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.WidenHighI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.WidenHighU16x8ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.widen_high\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_widen_high, builtin_v128_widen_high);\n\n// v128.shl<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShlI64x2\n            : SIMDShiftOp.ShlI32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shl, builtin_v128_shl);\n\n// v128.shr<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n      case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n      case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n      case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n      case TypeKind.ISIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrI64x2\n            : SIMDShiftOp.ShrI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrU64x2\n            : SIMDShiftOp.ShrU32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shr, builtin_v128_shr);\n\nfunction builtin_v128_bitwise_binary(ctx: BuiltinContext, op: BinaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(op, arg0, arg1);\n}\n\n// v128.and(a: v128, b: v128) -> v128\nfunction builtin_v128_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndV128);\n}\nbuiltins.set(BuiltinNames.v128_and, builtin_v128_and);\n\n// v128.or(a: v128, b: v128) -> v128\nfunction builtin_v128_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.OrV128);\n}\nbuiltins.set(BuiltinNames.v128_or, builtin_v128_or);\n\n// v128.xor(a: v128, b: v128) -> v128\nfunction builtin_v128_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.XorV128);\n}\nbuiltins.set(BuiltinNames.v128_xor, builtin_v128_xor);\n\n// v128.andnot(a: v128, b: v128) -> v128\nfunction builtin_v128_andnot(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndNotV128);\n}\nbuiltins.set(BuiltinNames.v128_andnot, builtin_v128_andnot);\n\nfunction builtin_v128_bitwise_unary(ctx: BuiltinContext, op: UnaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.unary(op, arg0);\n}\n\n// v128.not(a: v128) -> v128\nfunction builtin_v128_not(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_unary(ctx, UnaryOp.NotV128);\n}\nbuiltins.set(BuiltinNames.v128_not, builtin_v128_not);\n\nfunction builtin_v128_bitwise_ternary(ctx: BuiltinContext, op: SIMDTernaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.simd_ternary(op, arg0, arg1, arg2);\n}\n\n// v128.bitselect(v1: v128, v2: v128, c: v128) -> v128\nfunction builtin_v128_bitselect(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_ternary(ctx, SIMDTernaryOp.Bitselect);\n}\nbuiltins.set(BuiltinNames.v128_bitselect, builtin_v128_bitselect);\n\n// v128.any_true<T!>(a: v128) -> bool\nfunction builtin_v128_any_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AnyTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AnyTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AnyTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AnyTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.AnyTrueI64x2\n            : UnaryOp.AnyTrueI32x4,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.any_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_any_true, builtin_v128_any_true);\n\n// v128.all_true<T!>(a: v128) -> bool\nfunction builtin_v128_all_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.AllTrueI64x2\n            : UnaryOp.AllTrueI32x4,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_all_true, builtin_v128_all_true);\n\n// v128.bitmask<T!>(a: v128) -> i32\nfunction builtin_v128_bitmask(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.BitmaskI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.BitmaskI16x8, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.BitmaskI32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.bitmask\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_bitmask, builtin_v128_bitmask);\n\n// v128.qfma<T!>(a: v128, b: v128, c: v128) -> v128\nfunction builtin_v128_qfma(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMAF32x4, arg0, arg1, arg2);\n      case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMAF64x2, arg0, arg1, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.qfma\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_qfma, builtin_v128_qfma);\n\n// v128.qfms<T!>(a: v128, b: v128, c: v128) -> v128\nfunction builtin_v128_qfms(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMSF32x4, arg0, arg1, arg2);\n      case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMSF64x2, arg0, arg1, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.qfms\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_qfms, builtin_v128_qfms);\n\n// === Internal runtime =======================================================================\n\n// __visit_globals(cookie: u32) -> void\nfunction builtin_visit_globals(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1) // cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_globals, [ arg0 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_globals, builtin_visit_globals);\n\n// __visit_members(ref: usize, cookie: u32) -> void\nfunction builtin_visit_members(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2) // ref, cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_members, [ arg0, arg1 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_members, builtin_visit_members);\n\n// === Inline assembler =======================================================================\n\n// TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n//   add, sub, mul, div_s, div_u, rem_s, rem_u\n//   and, or, xor, shl, shr_u, shr_s\n//   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n// i32.clz -> clz<i32>\nfunction builtin_i32_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_clz, builtin_i32_clz);\n\n// i64.clz -> clz<i64>\nfunction builtin_i64_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_clz, builtin_i64_clz);\n\n// i32.ctz -> ctz<i32>\nfunction builtin_i32_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_ctz, builtin_i32_ctz);\n\n// i64.ctz -> ctz<i64>\nfunction builtin_i64_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_ctz, builtin_i64_ctz);\n\n// i32.popcnt -> popcnt<i32>\nfunction builtin_i32_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i32_popcnt, builtin_i32_popcnt);\n\n// i64.popcnt -> popcnt<i64>\nfunction builtin_i64_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i64_popcnt, builtin_i64_popcnt);\n\n// i32.rotl -> rotl<i32>\nfunction builtin_i32_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotl, builtin_i32_rotl);\n\n// i64.rotl -> rotl<i64>\nfunction builtin_i64_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotl, builtin_i64_rotl);\n\n// i32.rotr -> rotr<i32>\nfunction builtin_i32_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotr, builtin_i32_rotr);\n\n// i64.rotr -> rotr<i64>\nfunction builtin_i64_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotr, builtin_i64_rotr);\n\n// f32.abs -> abs<f32>\nfunction builtin_f32_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32_abs, builtin_f32_abs);\n\n// f64.abs -> abs<f64>\nfunction builtin_f64_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64_abs, builtin_f64_abs);\n\n// f32.max -> max<f32>\nfunction builtin_f32_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32_max, builtin_f32_max);\n\n// f64.max -> max<f64>\nfunction builtin_f64_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64_max, builtin_f64_max);\n\n// f32.min -> min<f32>\nfunction builtin_f32_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32_min, builtin_f32_min);\n\n// f64.min -> min<f64>\nfunction builtin_f64_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64_min, builtin_f64_min);\n\n// f32.ceil -> ceil<f32>\nfunction builtin_f32_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f32_ceil, builtin_f32_ceil);\n\n// f64.ceil -> ceil<f64>\nfunction builtin_f64_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f64_ceil, builtin_f64_ceil);\n\n// f32.floor -> floor<f32>\nfunction builtin_f32_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f32_floor, builtin_f32_floor);\n\n// f64.floor -> floor<f64>\nfunction builtin_f64_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f64_floor, builtin_f64_floor);\n\n// f32.copysign -> copysign<f32>\nfunction builtin_f32_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f32_copysign, builtin_f32_copysign);\n\n// f64.copysign -> copysign<f64>\nfunction builtin_f64_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f64_copysign, builtin_f64_copysign);\n\n// f32.nearest -> nearest<f32>\nfunction builtin_f32_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f32_nearest, builtin_f32_nearest);\n\n// f64.nearest -> nearest<f64>\nfunction builtin_f64_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f64_nearest, builtin_f64_nearest);\n\n// i32.reinterpret_f32 -> reinterpret<i32>\nfunction builtin_i32_reinterpret_f32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i32_reinterpret_f32, builtin_i32_reinterpret_f32);\n\n// i64.reinterpret_f64 -> reinterpret<i64>\nfunction builtin_i64_reinterpret_f64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i64_reinterpret_f64, builtin_i64_reinterpret_f64);\n\n// f32.reinterpret_i32 -> reinterpret<f32>\nfunction builtin_f32_reinterpret_i32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f32_reinterpret_i32, builtin_f32_reinterpret_i32);\n\n// f64.reinterpret_i64 -> reinterpret<f64>\nfunction builtin_f64_reinterpret_i64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f64_reinterpret_i64, builtin_f64_reinterpret_i64);\n\n// f32.sqrt -> sqrt<f32>\nfunction builtin_f32_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32_sqrt, builtin_f32_sqrt);\n\n// f64.sqrt -> sqrt<f64>\nfunction builtin_f64_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64_sqrt, builtin_f64_sqrt);\n\n// f32.trunc -> trunc<f32>\nfunction builtin_f32_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f32_trunc, builtin_f32_trunc);\n\n// f64.trunc -> trunc<f64>\nfunction builtin_f64_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f64_trunc, builtin_f64_trunc);\n\n// i32.add -> add<i32>\nfunction builtin_i32_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_add, builtin_i32_add);\n\n// i64.add -> add<i64>\nfunction builtin_i64_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_add, builtin_i64_add);\n\n// f32.add -> add<f32>\nfunction builtin_f32_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.f32_add, builtin_f32_add);\n\n// f64.add -> add<f64>\nfunction builtin_f64_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.f64_add, builtin_f64_add);\n\n// i32.sub -> sub<i32>\nfunction builtin_i32_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_sub, builtin_i32_sub);\n\n// i64.sub -> sub<i64>\nfunction builtin_i64_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_sub, builtin_i64_sub);\n\n// f32.sub -> sub<f32>\nfunction builtin_f32_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f32_sub, builtin_f32_sub);\n\n// f64.sub -> sub<f64>\nfunction builtin_f64_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f64_sub, builtin_f64_sub);\n\n// i32.mul -> mul<i32>\nfunction builtin_i32_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i32_mul, builtin_i32_mul);\n\n// i64.mul -> mul<i64>\nfunction builtin_i64_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i64_mul, builtin_i64_mul);\n\n// f32.mul -> mul<f32>\nfunction builtin_f32_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f32_mul, builtin_f32_mul);\n\n// f64.mul -> mul<f64>\nfunction builtin_f64_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f64_mul, builtin_f64_mul);\n\n// i32.div_s -> div<i32>\nfunction builtin_i32_div_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.i32_div_s, builtin_i32_div_s);\n\n// i32.div_u -> div<u32>\nfunction builtin_i32_div_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.u32;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.i32_div_u, builtin_i32_div_u);\n\n// i64.div_s -> div_s<i64>\nfunction builtin_i64_div_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.i64_div_s, builtin_i64_div_s);\n\n// i64.div_u -> div_u<u64>\nfunction builtin_i64_div_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.u64;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.i64_div_u, builtin_i64_div_u);\n\n// f32.div -> div<f32>\nfunction builtin_f32_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.f32_div, builtin_f32_div);\n\n// f64.div -> div<f64>\nfunction builtin_f64_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.f64_div, builtin_f64_div);\n\n// i32.load8_s -> <i32>load<i8>\nfunction builtin_i32_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_s, builtin_i32_load8_s);\n\n// i32.load8_u -> <i32>load<u8>\nfunction builtin_i32_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_u, builtin_i32_load8_u);\n\n// i32.load16_s -> <i32>load<i16>\nfunction builtin_i32_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_s, builtin_i32_load16_s);\n\n// i32.load16_u -> <i32>load<u16>\nfunction builtin_i32_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_u, builtin_i32_load16_u);\n\n// i32.load -> <i32>load<i32>\nfunction builtin_i32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load, builtin_i32_load);\n\n// i64.load8_s -> <i64>load<i8>\nfunction builtin_i64_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_s, builtin_i64_load8_s);\n\n// i64.load8_u -> <i64>load<u8>\nfunction builtin_i64_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_u, builtin_i64_load8_u);\n\n// i64.load16_s -> <i64>load<i16>\nfunction builtin_i64_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_s, builtin_i64_load16_s);\n\n// i64.load16_u -> <i64>load<u16>\nfunction builtin_i64_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_u, builtin_i64_load16_u);\n\n// i64.load32_s -> <i64>load<i32>\nfunction builtin_i64_load32_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_s, builtin_i64_load32_s);\n\n// i64.load32_u -> <i64>load<u32>\nfunction builtin_i64_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_u, builtin_i64_load32_u);\n\n// i64.load -> <i64>load<i64>\nfunction builtin_i64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load, builtin_i64_load);\n\n// f32.load -> <f32>load<f32>\nfunction builtin_f32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f32_load, builtin_f32_load);\n\n// f64.load -> <f64>load<f64>\nfunction builtin_f64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f64_load, builtin_f64_load);\n\n// i32.store8 -> store<i8 from i32>\nfunction builtin_i32_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store8, builtin_i32_store8);\n\n// i32.store16 -> store<i16 from i32>\nfunction builtin_i32_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store16, builtin_i32_store16);\n\n// i32.store -> store<i32 from i32>\nfunction builtin_i32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store, builtin_i32_store);\n\n// i64.store8 -> store<i8 from i64>\nfunction builtin_i64_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store8, builtin_i64_store8);\n\n// i64.store16 -> store<i16 from i64>\nfunction builtin_i64_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store16, builtin_i64_store16);\n\n// i64.store32 -> store<i32 from i64>\nfunction builtin_i64_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store32, builtin_i64_store32);\n\n// i64.store -> store<i64 from i64>\nfunction builtin_i64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store, builtin_i64_store);\n\n// f32.store -> store<f32 from f64>\nfunction builtin_f32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f32_store, builtin_f32_store);\n\n// f64.store -> store<f64 from f64>\nfunction builtin_f64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f64_store, builtin_f64_store);\n\n// i32.atomic.load8_u -> <i32>atomic.load<u8>\nfunction builtin_i32_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load8_u, builtin_i32_atomic_load8_u);\n\n// i32.atomic.load16_u -> <i32>atomic.load<u16>\nfunction builtin_i32_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load16_u, builtin_i32_atomic_load16_u);\n\n// i32.atomic.load -> <i32>atomic.load<i32>\nfunction builtin_i32_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load, builtin_i32_atomic_load);\n\n// i64.atomic.load8_u -> <i64>atomic.load<u8>\nfunction builtin_i64_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load8_u, builtin_i64_atomic_load8_u);\n\n// i64.atomic.load16_u -> <i64>atomic.load<u16>\nfunction builtin_i64_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load16_u, builtin_i64_atomic_load16_u);\n\n// i64.atomic.load32_u -> <i64>atomic.load<u32>\nfunction builtin_i64_atomic_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load32_u, builtin_i64_atomic_load32_u);\n\n// i64.atomic.load -> <i64>atomic.load<i64>\nfunction builtin_i64_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load, builtin_i64_atomic_load);\n\n// i32.atomic.store8 -> atomic.store<i8 from i32>\nfunction builtin_i32_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store8, builtin_i32_atomic_store8);\n\n// i32.atomic.store16 -> atomic.store<i16 from i32>\nfunction builtin_i32_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store16, builtin_i32_atomic_store16);\n\n// i32.atomic.store -> atomic.store<i32 from i32>\nfunction builtin_i32_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store, builtin_i32_atomic_store);\n\n// i64.atomic.store8 -> atomic.store<i8 from i64>\nfunction builtin_i64_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store8, builtin_i64_atomic_store8);\n\n// i64.atomic.store16 -> atomic.store<i16 from i64>\nfunction builtin_i64_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store16, builtin_i64_atomic_store16);\n\n// i64.atomic.store32 -> atomic.store<i32 from i64>\nfunction builtin_i64_atomic_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store32, builtin_i64_atomic_store32);\n\n// i64.atomic.store -> atomic.store<i64 from i64>\nfunction builtin_i64_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store, builtin_i64_atomic_store);\n\n// i32.atomic.rmw8.add_u -> <i32>atomic.add<u8 from i32>\nfunction builtin_i32_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_add_u, builtin_i32_atomic_rmw8_add_u);\n\n// i32.atomic.rmw16.add_u -> <i32>atomic.add<u16 from i32>\nfunction builtin_i32_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_add_u, builtin_i32_atomic_rmw16_add_u);\n\n// i32.atomic.rmw.add -> <i32>atomic.add<i32 from i32>\nfunction builtin_i32_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_add, builtin_i32_atomic_rmw_add);\n\n// i64.atomic.rmw8.add_u -> <i64>atomic.add<u8 from i64>\nfunction builtin_i64_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_add_u, builtin_i64_atomic_rmw8_add_u);\n\n// i64.atomic.rmw16.add_u -> <i64>atomic.add<u16 from i64>\nfunction builtin_i64_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_add_u, builtin_i64_atomic_rmw16_add_u);\n\n// i64.atomic.rmw32.add_u -> <i64>atomic.add<u32 from i64>\nfunction builtin_i64_atomic_rmw32_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_add_u, builtin_i64_atomic_rmw32_add_u);\n\n// i64.atomic.rmw.add -> <i64>atomic.add<i64 from i64>\nfunction builtin_i64_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_add, builtin_i64_atomic_rmw_add);\n\n// i32.atomic.rmw8.sub_u -> <i32>atomic.sub<u8 from i32>\nfunction builtin_i32_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_sub_u, builtin_i32_atomic_rmw8_sub_u);\n\n// i32.atomic.rmw16.sub_u -> <i32>atomic.sub<u16 from i32>\nfunction builtin_i32_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_sub_u, builtin_i32_atomic_rmw16_sub_u);\n\n// i32.atomic.rmw.sub -> <i32>atomic.sub<i32 from i32>\nfunction builtin_i32_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_sub, builtin_i32_atomic_rmw_sub);\n\n// i64.atomic.rmw8.sub_u -> <i64>atomic.sub<u8 from i64>\nfunction builtin_i64_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_sub_u, builtin_i64_atomic_rmw8_sub_u);\n\n// i64.atomic.rmw16.sub_u -> <i64>atomic.sub<u16 from i64>\nfunction builtin_i64_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_sub_u, builtin_i64_atomic_rmw16_sub_u);\n\n// i64.atomic.rmw32.sub_u -> <i64>atomic.sub<u32 from i64>\nfunction builtin_i64_atomic_rmw32_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_sub_u, builtin_i64_atomic_rmw32_sub_u);\n\n// i64.atomic.rmw.sub -> <i64>atomic.sub<i64 from i64>\nfunction builtin_i64_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_sub, builtin_i64_atomic_rmw_sub);\n\n// i32.atomic.rmw8.and_u -> <i32>atomic.and<u8 from i32>\nfunction builtin_i32_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_and_u, builtin_i32_atomic_rmw8_and_u);\n\n// i32.atomic.rmw16.and_u -> <i32>atomic.and<u16 from i32>\nfunction builtin_i32_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_and_u, builtin_i32_atomic_rmw16_and_u);\n\n// i32.atomic.rmw.and -> <i32>atomic.and<i32 from i32>\nfunction builtin_i32_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_and, builtin_i32_atomic_rmw_and);\n\n// i64.atomic.rmw8.and_u -> <i64>atomic.and<u8 from i64>\nfunction builtin_i64_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_and_u, builtin_i64_atomic_rmw8_and_u);\n\n// i64.atomic.rmw16.and_u -> <i64>atomic.and<u16 from i64>\nfunction builtin_i64_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_and_u, builtin_i64_atomic_rmw16_and_u);\n\n// i64.atomic.rmw32.and_u -> <i64>atomic.and<u32 from i64>\nfunction builtin_i64_atomic_rmw32_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_and_u, builtin_i64_atomic_rmw32_and_u);\n\n// i64.atomic.rmw.and -> <i64>atomic.and<i64 from i64>\nfunction builtin_i64_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_and, builtin_i64_atomic_rmw_and);\n\n// i32.atomic.rmw8.or_u -> <i32>atomic.or<u8 from i32>\nfunction builtin_i32_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_or_u, builtin_i32_atomic_rmw8_or_u);\n\n// i32.atomic.rmw16.or_u -> <i32atomic.or<u16 from i32>\nfunction builtin_i32_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_or_u, builtin_i32_atomic_rmw16_or_u);\n\n// i32.atomic.rmw.or -> <i32>atomic.or<i32 from i32>\nfunction builtin_i32_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_or, builtin_i32_atomic_rmw_or);\n\n// i64.atomic.rmw8.or_u -> <i64>atomic.or<u8 from i64>\nfunction builtin_i64_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_or_u, builtin_i64_atomic_rmw8_or_u);\n\n// i64.atomic.rmw16.or_u -> <i64>atomic.or<u16 from i64>\nfunction builtin_i64_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_or_u, builtin_i64_atomic_rmw16_or_u);\n\n// i64.atomic.rmw32.or_u -> <i64>atomic.or<u32 from i64>\nfunction builtin_i64_atomic_rmw32_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_or_u, builtin_i64_atomic_rmw32_or_u);\n\n// i64.atomic.rmw.or -> <i64>atomic.or<i64 from i64>\nfunction builtin_i64_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_or, builtin_i64_atomic_rmw_or);\n\n// i32.atomic.rmw8.xor_u -> <i32>atomic.xor<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xor_u, builtin_i32_atomic_rmw8_xor_u);\n\n// i32.atomic.rmw16.xor_u -> <i32>atomic.xor<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xor_u, builtin_i32_atomic_rmw16_xor_u);\n\n// i32.atomic.rmw.xor -> <i32>atomic.xor<i32 from i32>\nfunction builtin_i32_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xor, builtin_i32_atomic_rmw_xor);\n\n// i64.atomic.rmw8.xor_u -> <i64>atomic.xor<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xor_u, builtin_i64_atomic_rmw8_xor_u);\n\n// i64.atomic.rmw16.xor_u -> <i64>atomic.xor<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xor_u, builtin_i64_atomic_rmw16_xor_u);\n\n// i64.atomic.rmw32.xor_u -> <i64>atomic.xor<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xor_u, builtin_i64_atomic_rmw32_xor_u);\n\n// i64.atomic.rmw.xor -> <i64>atomic.xor<i64 from i64>\nfunction builtin_i64_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xor, builtin_i64_atomic_rmw_xor);\n\n// i32.atomic.rmw8.xchg_u -> <i32>atomic.xchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xchg_u, builtin_i32_atomic_rmw8_xchg_u);\n\n// i32.atomic.rmw16.xchg_u -> <i32>atomic.xchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xchg_u, builtin_i32_atomic_rmw16_xchg_u);\n\n// i32.atomic.rmw.xchg -> <i32>atomic.xchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xchg, builtin_i32_atomic_rmw_xchg);\n\n// i64.atomic.rmw8.xchg_u -> <i64>atomic.xchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xchg_u, builtin_i64_atomic_rmw8_xchg_u);\n\n// i64.atomic.rmw16.xchg_u -> <i64>atomic.xchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xchg_u, builtin_i64_atomic_rmw16_xchg_u);\n\n// i64.atomic.rmw32.xchg_u -> <i64>atomic.xchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xchg_u, builtin_i64_atomic_rmw32_xchg_u);\n\n// i64.atomic.rmw.xchg -> <i64>atomic.xchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xchg, builtin_i64_atomic_rmw_xchg);\n\n// i32.atomic.rmw8.cmpxchg_u -> <i32>atomic.cmpxchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_cmpxchg_u, builtin_i32_atomic_rmw8_cmpxchg_u);\n\n// i32.atomic.rmw16.cmpxchg_u -> <i32>atomic.cmpxchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_cmpxchg_u, builtin_i32_atomic_rmw16_cmpxchg_u);\n\n// i32.atomic.rmw.cmpxchg -> <i32>atomic.cmpxchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_cmpxchg, builtin_i32_atomic_rmw_cmpxchg);\n\n// i64.atomic.rmw8.cmpxchg_u -> <i64>atomic.cmpxchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_cmpxchg_u, builtin_i64_atomic_rmw8_cmpxchg_u);\n\n// i64.atomic.rmw16.cmpxchg_u -> <i64>atomic.cmpxchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_cmpxchg_u, builtin_i64_atomic_rmw16_cmpxchg_u);\n\n// i64.atomic.rmw32.cmpxchg_u -> <i64>atomic.cmpxchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_cmpxchg_u, builtin_i64_atomic_rmw32_cmpxchg_u);\n\n// i64.atomic.rmw.cmpxchg -> <i64>atomic.cmpxchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_cmpxchg, builtin_i64_atomic_rmw_cmpxchg);\n\n// i32.wait -> atomic.wait<i32>\nfunction builtin_i32_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i32_wait, builtin_i32_wait);\n\n// i64.wait -> atomic.wait<i64>\nfunction builtin_i64_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i64_wait, builtin_i64_wait);\n\n// v128.load -> load<v128>\nfunction builtin_v128_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load, builtin_v128_load);\n\n// v128.store -> store<v128 from v128>\nfunction builtin_v128_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store, builtin_v128_store);\n\n// i8x16_splat -> v128.splat<i8>\nfunction builtin_i8x16_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_splat, builtin_i8x16_splat);\n\n// i8x16.extract_lane_s -> <i32>v128.extract_lane<i8>\nfunction builtin_i8x16_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_s, builtin_i8x16_extract_lane_s);\n\n// i8x16.extract_lane_u -> <i32>v128.extract_lane<u8>\nfunction builtin_i8x16_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_u, builtin_i8x16_extract_lane_u);\n\n// i8x16.replace_lane -> v128.replace_lane<i8>\nfunction builtin_i8x16_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_replace_lane, builtin_i8x16_replace_lane);\n\n// i8x16.add -> v128.add<i8>\nfunction builtin_i8x16_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add, builtin_i8x16_add);\n\n// i8x16.sub -> v128.sub<i8>\nfunction builtin_i8x16_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub, builtin_i8x16_sub);\n\n// i8x16.mul -> v128.mul<i8>\nfunction builtin_i8x16_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_mul, builtin_i8x16_mul);\n\n// i8x16.min_s -> v128.min<i8>\nfunction builtin_i8x16_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_s, builtin_i8x16_min_s);\n\n// i8x16.min_u -> v128.min<u8>\nfunction builtin_i8x16_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_u, builtin_i8x16_min_u);\n\n// i8x16.max_s -> v128.max<i8>\nfunction builtin_i8x16_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_s, builtin_i8x16_max_s);\n\n// i8x16.max_u -> v128.max<u8>\nfunction builtin_i8x16_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_u, builtin_i8x16_max_u);\n\n// i8x16.avgr_u -> v128.avgr<u8>\nfunction builtin_i8x16_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_avgr_u, builtin_i8x16_avgr_u);\n\n// i8x16.abs -> v128.abs<i8>\nfunction builtin_i8x16_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_abs, builtin_i8x16_abs);\n\n// i8x16.neg -> v128.neg<i8>\nfunction builtin_i8x16_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_neg, builtin_i8x16_neg);\n\n// i8x16.add_saturate_s -> v128.add_saturate<i8>\nfunction builtin_i8x16_add_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_saturate_s, builtin_i8x16_add_saturate_s);\n\n// i8x16.add_saturate_u -> v128.add_saturate<u8>\nfunction builtin_i8x16_add_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_saturate_u, builtin_i8x16_add_saturate_u);\n\n// i8x16.sub_saturate_s -> v128.sub_saturate<i8>\nfunction builtin_i8x16_sub_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_saturate_s, builtin_i8x16_sub_saturate_s);\n\n// i8x16.sub_saturate_u -> v128.sub_saturate<u8>\nfunction builtin_i8x16_sub_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_saturate_u, builtin_i8x16_sub_saturate_u);\n\n// i8x16.shl -> v128.shl<i8>\nfunction builtin_i8x16_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shl, builtin_i8x16_shl);\n\n// i8x16.shr_s -> v128.shr<i8>\nfunction builtin_i8x16_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_s, builtin_i8x16_shr_s);\n\n// i8x16.shr_u -> v128.shr<u8>\nfunction builtin_i8x16_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_u, builtin_i8x16_shr_u);\n\n// i8x16.any_true -> v128.any_true<i8>\nfunction builtin_i8x16_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_any_true, builtin_i8x16_any_true);\n\n// i8x16.all_true -> v128.all_true<i8>\nfunction builtin_i8x16_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_all_true, builtin_i8x16_all_true);\n\n// i8x16.bitmask -> v128.bitmask<i8>\nfunction builtin_i8x16_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_bitmask, builtin_i8x16_bitmask);\n\n// i8x16.eq -> v128.eq<i8>\nfunction builtin_i8x16_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_eq, builtin_i8x16_eq);\n\n// i8x16.ne -> v128.ne<i8>\nfunction builtin_i8x16_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ne, builtin_i8x16_ne);\n\n// i8x16.lt_s -> v128.lt<i8>\nfunction builtin_i8x16_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_s, builtin_i8x16_lt_s);\n\n// i8x16.lt_u -> v128.lt<u8>\nfunction builtin_i8x16_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_u, builtin_i8x16_lt_u);\n\n// i8x16.le_s -> v128.le<i8>\nfunction builtin_i8x16_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_s, builtin_i8x16_le_s);\n\n// i8x16.le_u -> v128.le<u8>\nfunction builtin_i8x16_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_u, builtin_i8x16_le_u);\n\n// i8x16.gt_s -> v128.gt<i8>\nfunction builtin_i8x16_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_s, builtin_i8x16_gt_s);\n\n// i8x16.gt_u -> v128.gt<u8>\nfunction builtin_i8x16_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_u, builtin_i8x16_gt_u);\n\n// i8x16.ge_s -> v128.ge<i8>\nfunction builtin_i8x16_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_s, builtin_i8x16_ge_s);\n\n// i8x16.ge_u -> v128.ge<u8>\nfunction builtin_i8x16_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_u, builtin_i8x16_ge_u);\n\n// i8x16.narrow_i16x8_s -> v128.narrow<i16>\nfunction builtin_i8x16_narrow_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_s, builtin_i8x16_narrow_i16x8_s);\n\n// i8x16.narrow_i16x8_u -> v128.narrow<u16>\nfunction builtin_i8x16_narrow_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_u, builtin_i8x16_narrow_i16x8_u);\n\n// i16x8.splat -> v128.splat<i16>\nfunction builtin_i16x8_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_splat, builtin_i16x8_splat);\n\n// i16x8.extract_lane_s -> v128.extract_lane<i16>\nfunction builtin_i16x8_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_s, builtin_i16x8_extract_lane_s);\n\n// i16x8..extract_lane_u -> v128.extract_lane<u16>\nfunction builtin_i16x8_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_u, builtin_i16x8_extract_lane_u);\n\n// i16x8.replace_lane -> v128.replace_lane<i16>\nfunction builtin_i16x8_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_replace_lane, builtin_i16x8_replace_lane);\n\n// i16x8.add -> v128.add<i16>\nfunction builtin_i16x8_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add, builtin_i16x8_add);\n\n// i16x8.sub -> v128.sub<i16>\nfunction builtin_i16x8_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub, builtin_i16x8_sub);\n\n// i16x8.mul -> v128.mul<i16>\nfunction builtin_i16x8_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_mul, builtin_i16x8_mul);\n\n// i16x8.min_s -> v128.min<i16>\nfunction builtin_i16x8_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_s, builtin_i16x8_min_s);\n\n// i16x8.min_u -> v128.min<u16>\nfunction builtin_i16x8_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_u, builtin_i16x8_min_u);\n\n// i16x8.max_s -> v128.max<i16>\nfunction builtin_i16x8_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_s, builtin_i16x8_max_s);\n\n// i16x8.max_u -> v128.max<u16>\nfunction builtin_i16x8_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_u, builtin_i16x8_max_u);\n\n// i16x8.avgr_u -> v128.avgr<u16>\nfunction builtin_i16x8_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_avgr_u, builtin_i16x8_avgr_u);\n\n// i16x8.abs -> v128.abs<i16>\nfunction builtin_i16x8_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_abs, builtin_i16x8_abs);\n\n// i16x8.neg -> v128.neg<i16>\nfunction builtin_i16x8_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_neg, builtin_i16x8_neg);\n\n// i16x8.add_saturate_s -> v128.add_saturate<i16>\nfunction builtin_i16x8_add_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_saturate_s, builtin_i16x8_add_saturate_s);\n\n// i16x8.add_saturate_u -> v128.add_saturate<u16>\nfunction builtin_i16x8_add_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_saturate_u, builtin_i16x8_add_saturate_u);\n\n// i16x8.sub_saturate_s -> v128.sub_saturate<i16>\nfunction builtin_i16x8_sub_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_saturate_s, builtin_i16x8_sub_saturate_s);\n\n// i16x8.sub_saturate_u -> v128.sub_saturate<u16>\nfunction builtin_i16x8_sub_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_saturate_u, builtin_i16x8_sub_saturate_u);\n\n// i16x8.shl -> v128.shl<i16>\nfunction builtin_i16x8_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shl, builtin_i16x8_shl);\n\n// i16x8.shr_s -> v128.shr<i16>\nfunction builtin_i16x8_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_s, builtin_i16x8_shr_s);\n\n// i16x8.shr_u -> v128.shr<u16>\nfunction builtin_i16x8_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_u, builtin_i16x8_shr_u);\n\n// i16x8.any_true -> v128.any_true<i16>\nfunction builtin_i16x8_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_any_true, builtin_i16x8_any_true);\n\n// i16x8.all_true -> v128.all_true<i16>\nfunction builtin_i16x8_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_all_true, builtin_i16x8_all_true);\n\n// i16x8.bitmask -> v128.bitmask<i16>\nfunction builtin_i16x8_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_bitmask, builtin_i16x8_bitmask);\n\n// i16x8.eq -> v128.eq<i16>\nfunction builtin_i16x8_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_eq, builtin_i16x8_eq);\n\n// i16x8.ne -> v128.ne<i16>\nfunction builtin_i16x8_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ne, builtin_i16x8_ne);\n\n// i16x8.lt_s -> v128.lt<i16>\nfunction builtin_i16x8_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_s, builtin_i16x8_lt_s);\n\n// i16x8.lt_u -> v128.lt<u16>\nfunction builtin_i16x8_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_u, builtin_i16x8_lt_u);\n\n// i16x8.le_s -> v128.le<i16>\nfunction builtin_i16x8_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_s, builtin_i16x8_le_s);\n\n// i16x8.le_u -> v128.le<u16>\nfunction builtin_i16x8_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_u, builtin_i16x8_le_u);\n\n// i16x8.gt_s -> v128.gt<i16>\nfunction builtin_i16x8_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_s, builtin_i16x8_gt_s);\n\n// i16x8.gt_u -> v128.gt<u16>\nfunction builtin_i16x8_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_u, builtin_i16x8_gt_u);\n\n// i16x8.ge_s -> v128.ge<i16>\nfunction builtin_i16x8_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_s, builtin_i16x8_ge_s);\n\n// i16x8.ge_u -> v128.ge<u16>\nfunction builtin_i16x8_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_u, builtin_i16x8_ge_u);\n\n// i16x8.narrow_i32x4_s -> v128.narrow<i32>\nfunction builtin_i16x8_narrow_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_s, builtin_i16x8_narrow_i32x4_s);\n\n// i16x8.narrow_i32x4_u -> v128.narrow<u32>\nfunction builtin_i16x8_narrow_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_u, builtin_i16x8_narrow_i32x4_u);\n\n// i16x8.widen_low_i8x16_s -> v128.widen_low<i8>\nfunction builtin_i16x8_widen_low_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_low_i8x16_s, builtin_i16x8_widen_low_i8x16_s);\n\n// i16x8.widen_low_i8x16_u -> v128.widen_low<u8>\nfunction builtin_i16x8_widen_low_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_low_i8x16_u, builtin_i16x8_widen_low_i8x16_u);\n\n// i16x8.widen_high_i8x16_s -> v128.widen_high<i8>\nfunction builtin_i16x8_widen_high_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_high_i8x16_s, builtin_i16x8_widen_high_i8x16_s);\n\n// i16x8.widen_high_i8x16_u -> v128.widen_high<u8>\nfunction builtin_i16x8_widen_high_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_high_i8x16_u, builtin_i16x8_widen_high_i8x16_u);\n\n// i16x8.load8x8_s -> v128.load_ext<i8>\nfunction builtin_i16x8_load8x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_load8x8_s, builtin_i16x8_load8x8_s);\n\n// i16x8.load8x8_u -> v128.load_ext<u8>\nfunction builtin_i16x8_load8x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_load8x8_u, builtin_i16x8_load8x8_u);\n\n// i32x4.splat -> v128.splat<i32>\nfunction builtin_i32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_splat, builtin_i32x4_splat);\n\n// i32x4.extract_lane -> <i32>v128.extract_lane<i32>\nfunction builtin_i32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extract_lane, builtin_i32x4_extract_lane);\n\n// i32x4.replace_lane -> v128.replace_lane<i32>\nfunction builtin_i32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_replace_lane, builtin_i32x4_replace_lane);\n\n// i32x4.add -> v128.add<i32>\nfunction builtin_i32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_add, builtin_i32x4_add);\n\n// i32x4.sub -> v128.sub<i32>\nfunction builtin_i32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_sub, builtin_i32x4_sub);\n\n// i32x4.mul -> v128.mul<i32>\nfunction builtin_i32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_mul, builtin_i32x4_mul);\n\n// i32x4.min_s -> v128.min<i32>\nfunction builtin_i32x4_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_s, builtin_i32x4_min_s);\n\n// i32x4.min_u -> v128.min<u32>\nfunction builtin_i32x4_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_u, builtin_i32x4_min_u);\n\n// i32x4.max_s -> v128.max<i32>\nfunction builtin_i32x4_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_s, builtin_i32x4_max_s);\n\n// i32x4.max_u -> v128.max<u32>\nfunction builtin_i32x4_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_u, builtin_i32x4_max_u);\n\n// i32x4.dot_i16x8_s -> v128.dot<i16>\nfunction builtin_i32x4_dot_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_dot(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_dot_i16x8_s, builtin_i32x4_dot_i16x8_s);\n\n// i32x4.abs -> v128.abs<i32>\nfunction builtin_i32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_abs, builtin_i32x4_abs);\n\n// i32x4.neg -> v128.neg<i32>\nfunction builtin_i32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_neg, builtin_i32x4_neg);\n\n// i32x4.shl -> v128.shl<i32>\nfunction builtin_i32x4_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shl, builtin_i32x4_shl);\n\n// i32x4.shr_s -> v128.shr<i32>\nfunction builtin_i32x4_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_s, builtin_i32x4_shr_s);\n\n// i32x4.shr_u -> v128.shr<u32>\nfunction builtin_i32x4_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_u, builtin_i32x4_shr_u);\n\n// i32x4.any_true -> v128.any_true<i32>\nfunction builtin_i32x4_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_any_true, builtin_i32x4_any_true);\n\n// i32x4.all_true -> v128.all_true<i32>\nfunction builtin_i32x4_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_all_true, builtin_i32x4_all_true);\n\n// i32x4.bitmask -> v128.bitmask<i32>\nfunction builtin_i32x4_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_bitmask, builtin_i32x4_bitmask);\n\n// i32x4.eq -> v128.eq<i32>\nfunction builtin_i32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_eq, builtin_i32x4_eq);\n\n// i32x4.ne -> v128.ne<i32>\nfunction builtin_i32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ne, builtin_i32x4_ne);\n\n// i32x4.lt_s -> v128.lt<i32>\nfunction builtin_i32x4_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_s, builtin_i32x4_lt_s);\n\n// i32x4.lt_u -> v128.lt<u32>\nfunction builtin_i32x4_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_u, builtin_i32x4_lt_u);\n\n// i32x4.le_s -> v128.le<i32>\nfunction builtin_i32x4_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_s, builtin_i32x4_le_s);\n\n// i32x4.le_u -> v128.le<u32>\nfunction builtin_i32x4_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_u, builtin_i32x4_le_u);\n\n// i32x4.gt_s -> v128.gt<i32>\nfunction builtin_i32x4_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_s, builtin_i32x4_gt_s);\n\n// i32x4.gt_u -> v128.gt<u32>\nfunction builtin_i32x4_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_u, builtin_i32x4_gt_u);\n\n// i32x4.ge_s -> v128.ge<i32>\nfunction builtin_i32x4_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_s, builtin_i32x4_ge_s);\n\n// i32x4.ge_u -> v128.ge<u32>\nfunction builtin_i32x4_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_u, builtin_i32x4_ge_u);\n\n// i32x4.trunc_sat_f32x4_s -> v128.trunc_sat<i32>\nfunction builtin_i32x4_trunc_sat_f32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_s, builtin_i32x4_trunc_sat_f32x4_s);\n\n// i32x4.trunc_sat_f32x4_u -> v128.trunc_sat<u32>\nfunction builtin_i32x4_trunc_sat_f32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_u, builtin_i32x4_trunc_sat_f32x4_u);\n\n// i32x4.widen_low_i16x8_s -> // v128.widen_low<i16>\nfunction builtin_i32x4_widen_low_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_low_i16x8_s, builtin_i32x4_widen_low_i16x8_s);\n\n// i32x4.widen_low_i16x8_u -> v128.widen_low<u16>\nfunction builtin_i32x4_widen_low_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_low_i16x8_u, builtin_i32x4_widen_low_i16x8_u);\n\n// i32x4.widen_high_i16x8_s -> v128.widen_high<i16>\nfunction builtin_i32x4_widen_high_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_high_i16x8_s, builtin_i32x4_widen_high_i16x8_s);\n\n// i32x4.widen_high_i16x8_u -> v128.widen_high<u16>\nfunction builtin_i32x4_widen_high_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_high_i16x8_u, builtin_i32x4_widen_high_i16x8_u);\n\n// i32x4.load16x4_s -> v128.load_ext<i16>\nfunction builtin_i32x4_load16x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_load16x4_s, builtin_i32x4_load16x4_s);\n\n// i32x4.load16x4_u -> v128.load_ext<u16>\nfunction builtin_i32x4_load16x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_load16x4_u, builtin_i32x4_load16x4_u);\n\n// i64x2.splat -> v128.splat<i64>\nfunction builtin_i64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_splat, builtin_i64x2_splat);\n\n// i64x2.extract_lane -> <i64>v128.extract_lane<i64>\nfunction builtin_i64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extract_lane, builtin_i64x2_extract_lane);\n\n// i64x2.replace_lane -> v128.replace_lane<i64>\nfunction builtin_i64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_replace_lane, builtin_i64x2_replace_lane);\n\n// i64x2.add -> v128.add<i64>\nfunction builtin_i64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_add, builtin_i64x2_add);\n\n// i64x2.sub -> v128.sub<i64>\nfunction builtin_i64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_sub, builtin_i64x2_sub);\n\n// i64x2.neg -> v128.neg<i64>\nfunction builtin_i64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_neg, builtin_i64x2_neg);\n\n// i64x2.shl -> v128.shl<i64>\nfunction builtin_i64x2_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shl, builtin_i64x2_shl);\n\n// i64x2.shr_s -> v128.shr<i64>\nfunction builtin_i64x2_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_s, builtin_i64x2_shr_s);\n\n// i64x2.shr_u -> v128.shr<u64>\nfunction builtin_i64x2_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_u, builtin_i64x2_shr_u);\n\n// i64x2.any_true -> v128.any_true<i64>\nfunction builtin_i64x2_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_any_true, builtin_i64x2_any_true);\n\n// i64x2.all_true -> v128.all_true<i64>\nfunction builtin_i64x2_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_all_true, builtin_i64x2_all_true);\n\n// i64x2.trunc_sat_f64x2_s -> v128.trunc_sat<i64>\nfunction builtin_i64x2_trunc_sat_f64x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_trunc_sat_f64x2_s, builtin_i64x2_trunc_sat_f64x2_s);\n\n// i64x2.trunc_sat_f64x2_u -> v128.trunc_sat<u64>\nfunction builtin_i64x2_trunc_sat_f64x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_trunc_sat_f64x2_u, builtin_i64x2_trunc_sat_f64x2_u);\n\n// i64x2.load32x2_s -> v128.load_ext<i32>\nfunction builtin_i64x2_load32x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_load32x2_s, builtin_i64x2_load32x2_s);\n\n// i64x2.load32x2_u -> v128.load_ext<u32>\nfunction builtin_i64x2_load32x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_load32x2_u, builtin_i64x2_load32x2_u);\n\n// f32x4.splat -> v128.splat<f32>\nfunction builtin_f32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_splat, builtin_f32x4_splat);\n\n// f32x4.extract_lane -> <f32>v128.extract_lane<f32>\nfunction builtin_f32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_extract_lane, builtin_f32x4_extract_lane);\n\n// f32x4.replace_lane -> v128.replace_lane<f32>\nfunction builtin_f32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_replace_lane, builtin_f32x4_replace_lane);\n\n// f32x4.add -> v128.add<f32>\nfunction builtin_f32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_add, builtin_f32x4_add);\n\n// f32x4.sub -> v128.sub<f32>\nfunction builtin_f32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sub, builtin_f32x4_sub);\n\n// f32x4.mul -> v128.mul<f32>\nfunction builtin_f32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_mul, builtin_f32x4_mul);\n\n// f32x4.div -> v128.div<f32>\nfunction builtin_f32x4_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_div, builtin_f32x4_div);\n\n// f32x4.neg -> v128.neg<f32>\nfunction builtin_f32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_neg, builtin_f32x4_neg);\n\n// f32x4.min -> v128.min<f32>\nfunction builtin_f32x4_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_min, builtin_f32x4_min);\n\n// f32x4.max -> v128.max<f32>\nfunction builtin_f32x4_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_max, builtin_f32x4_max);\n\n// f32x4.pmin -> v128.pmin<f32>\nfunction builtin_f32x4_pmin(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmin(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_pmin, builtin_f32x4_pmin);\n\n// f32x4.pmax -> v128.pmax<f32>\nfunction builtin_f32x4_pmax(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmax(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_pmax, builtin_f32x4_pmax);\n\n// f32x4.abs -> v128.abs<f32>\nfunction builtin_f32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_abs, builtin_f32x4_abs);\n\n// f32x4.sqrt -> v128.sqrt<f32>\nfunction builtin_f32x4_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sqrt, builtin_f32x4_sqrt);\n\n// f32x4.ceil -> v128.ceil<f32>\nfunction builtin_f32x4_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ceil, builtin_f32x4_ceil);\n\n// f32x4.floor -> v128.floor<f32>\nfunction builtin_f32x4_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_floor, builtin_f32x4_floor);\n\n// f32x4.trunc -> v128.trunc<f32>\nfunction builtin_f32x4_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_trunc, builtin_f32x4_trunc);\n\n// f32x4.nearest -> v128.nearest<f32>\nfunction builtin_f32x4_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_nearest, builtin_f32x4_nearest);\n\n// f32x4.eq -> v128.eq<f32>\nfunction builtin_f32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_eq, builtin_f32x4_eq);\n\n// f32x4.ne -> v128.ne<f32>\nfunction builtin_f32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ne, builtin_f32x4_ne);\n\n// f32x4.lt -> v128.lt<f32>\nfunction builtin_f32x4_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_lt, builtin_f32x4_lt);\n\n// f32x4.le -> v128.le<f32>\nfunction builtin_f32x4_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_le, builtin_f32x4_le);\n\n// f32x4.gt -> v128.gt<f32>\nfunction builtin_f32x4_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_gt, builtin_f32x4_gt);\n\n// f32x4.ge -> v128.ge<f32>\nfunction builtin_f32x4_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ge, builtin_f32x4_ge);\n\n// f32x4.convert_i32x4_s -> v128.convert<i32>\nfunction builtin_f32x4_convert_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_s, builtin_f32x4_convert_i32x4_s);\n\n// f32x4.convert_i32x4_u -> v128.convert<u32>\nfunction builtin_f32x4_convert_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_u, builtin_f32x4_convert_i32x4_u);\n\n// f32x4.qfma -> v128.qfma<f32>\nfunction builtin_f32x4_qfma(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfma(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_qfma, builtin_f32x4_qfma);\n\n// f32x4.qfms -> v128.qfms<f32>\nfunction builtin_f32x4_qfms(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfms(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_qfms, builtin_f32x4_qfms);\n\n// f64x2.splat -> v128.splat<f64>\nfunction builtin_f64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_splat, builtin_f64x2_splat);\n\n// f64x2.extract_lane -> <f64>v128.extract_lane<f64>\nfunction builtin_f64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_extract_lane, builtin_f64x2_extract_lane);\n\n// f64x2.replace_lane -> v128.replace_lane\nfunction builtin_f64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_replace_lane, builtin_f64x2_replace_lane);\n\n// f64x2.add -> v128.add<f64>\nfunction builtin_f64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_add, builtin_f64x2_add);\n\n// f64x2.sub -> v128.sub<f64>\nfunction builtin_f64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sub, builtin_f64x2_sub);\n\n// f64x2.mul -> v128.mul<f64>\nfunction builtin_f64x2_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_mul, builtin_f64x2_mul);\n\n// f64x2.div -> v128.div<f64>\nfunction builtin_f64x2_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_div, builtin_f64x2_div);\n\n// f64x2.neg -> v128.neg<f64>\nfunction builtin_f64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_neg, builtin_f64x2_neg);\n\n// f64x2.min -> v128.min<f64>\nfunction builtin_f64x2_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_min, builtin_f64x2_min);\n\n// f64x2.max -> v128.max<f64>\nfunction builtin_f64x2_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_max, builtin_f64x2_max);\n\n// f64x2.pmin -> v128.pmin<f64>\nfunction builtin_f64x2_pmin(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmin(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_pmin, builtin_f64x2_pmin);\n\n// f64x2.pmax -> v128.pmax<f64>\nfunction builtin_f64x2_pmax(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmax(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_pmax, builtin_f64x2_pmax);\n\n// f64x2.abs -> v128.abs<f64>\nfunction builtin_f64x2_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_abs, builtin_f64x2_abs);\n\n// f64x2.sqrt -> v128.sqrt<f64>\nfunction builtin_f64x2_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sqrt, builtin_f64x2_sqrt);\n\n// f64x2.ceil -> v128.ceil<f64>\nfunction builtin_f64x2_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ceil, builtin_f64x2_ceil);\n\n// f64x2.floor -> v128.floor<f64>\nfunction builtin_f64x2_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_floor, builtin_f64x2_floor);\n\n// f64x2.trunc -> v128.trunc<f64>\nfunction builtin_f64x2_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_trunc, builtin_f64x2_trunc);\n\n// f64x2.nearest -> v128.nearest<f64>\nfunction builtin_f64x2_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_nearest, builtin_f64x2_nearest);\n\n// f64x2.eq -> v128.eq<f64>\nfunction builtin_f64x2_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_eq, builtin_f64x2_eq);\n\n// f64x2.ne -> v128.ne<f64>\nfunction builtin_f64x2_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ne, builtin_f64x2_ne);\n\n// f64x2.lt -> v128.lt<f64>\nfunction builtin_f64x2_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_lt, builtin_f64x2_lt);\n\n// f64x2.le -> v128.le<f64>\nfunction builtin_f64x2_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_le, builtin_f64x2_le);\n\n// f64x2.gt -> v128.gt<f64>\nfunction builtin_f64x2_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_gt, builtin_f64x2_gt);\n\n// f64x2.ge -> v128.ge<f64>\nfunction builtin_f64x2_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ge, builtin_f64x2_ge);\n\n// f64x2.convert_i64x2_s -> v128.convert<i64>\nfunction builtin_f64x2_convert_i64x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_i64x2_s, builtin_f64x2_convert_i64x2_s);\n\n// f64x2.convert_i64x2_u -> v128.convert<u64>\nfunction builtin_f64x2_convert_i64x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_i64x2_u, builtin_f64x2_convert_i64x2_u);\n\n// f64x2.qfma -> v128.qfma<f64>\nfunction builtin_f64x2_qfma(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfma(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_qfma, builtin_f64x2_qfma);\n\n// f64x2.qfms -> v128.qfms<f64>\nfunction builtin_f64x2_qfms(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfms(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_qfms, builtin_f64x2_qfms);\n\n// v8x16.shuffle -> v128.shuffle<i8>\nfunction builtin_v8x16_shuffle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shuffle(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_shuffle, builtin_v8x16_shuffle);\n\n// v8x16.swizzle -> v128.swizzle\nfunction builtin_v8x16_swizzle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = null;\n  ctx.contextualType = Type.v128;\n  return builtin_v128_swizzle(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_swizzle, builtin_v8x16_swizzle);\n\n// v8x16.load_splat -> v128.load_splat<u8>\nfunction builtin_v8x16_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_load_splat, builtin_v8x16_load_splat);\n\n// v16x8.load_splat -> v128.load_splat<u16>\nfunction builtin_v16x8_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v16x8_load_splat, builtin_v16x8_load_splat);\n\n// v32x4.load_splat -> v128.load_splat<u32>\nfunction builtin_v32x4_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v32x4_load_splat, builtin_v32x4_load_splat);\n\n// v64x2.load_splat -> v128.load_splat<u64>\nfunction builtin_v64x2_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v64x2_load_splat, builtin_v64x2_load_splat);\n\n// === Internal helpers =======================================================================\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  // TODO: for (let element of compiler.program.elementsByName.values()) {\n  for (let _values = Map_values(compiler.program.elementsByName), i = 0, k = _values.length; i < k; ++i) {\n    let element = unchecked(_values[i]);\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classReference = globalType.getClass();\n    if (\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinNames.visit_globals,\n    NativeType.I32,  // cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = _keys[i];\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instance.type.isManaged);\n    assert(instanceId == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\")) !== null) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        let visitThisType = assert(visitSig.thisType);\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          instance.type.isStrictlyAssignableTo(visitThisType) // incl. implemented on super\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        // TODO: for (let member of members.values()) {\n        for (let _values = Map_values(members), j = 0, l = _values.length; j < l; ++j) {\n          let member = unchecked(_values[j]);\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      module.flatten(code)\n    );\n    relooper.addBranchForSwitch(outer, block, [ instanceId ]);\n    blocks.push(block);\n  }\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    let base = instance.base;\n    if (base) relooper.addBranch(blocks[instanceId], blocks[base.id]);\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinNames.visit_members,\n    createType([ usizeType.toNativeType(), NativeType.I32 ]), // ref, cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    relooper.renderAndDispose(outer, 2)\n  );\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var staticArrayPrototype = program.staticArrayPrototype;\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instanceId == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(arrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    } else if (instance.extends(staticArrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.STATICARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addAlignedMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n/** Compiles a class-specific instanceof helper, checking a ref against all concrete instances. */\nexport function compileClassInstanceOf(compiler: Compiler, prototype: ClassPrototype): void {\n  var module = compiler.module;\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var instanceofInstance = assert(prototype.program.instanceofInstance);\n  compiler.compileFunction(instanceofInstance);\n\n  var stmts = new Array<ExpressionRef>();\n\n  // if (!ref) return false\n  stmts.push(\n    module.if(\n      module.unary(\n        nativeSizeType == NativeType.I64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.local_get(0, nativeSizeType)\n      ),\n      module.return(\n        module.i32(0)\n      )\n    )\n  );\n\n  // if (__instanceof(ref, ID[i])) return true\n  var instances = prototype.instances;\n  if (instances !== null && instances.size > 0) {\n    // TODO: for (let instance of instances.values()) {\n    for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      stmts.push(\n        module.if(\n          module.call(instanceofInstance.internalName, [\n            module.local_get(0, nativeSizeType),\n            module.i32(instance.id)\n          ], NativeType.I32),\n          module.return(\n            module.i32(1)\n          )\n        )\n      );\n    }\n  }\n\n  // return false\n  stmts.push(\n    module.return(\n      module.i32(0)\n    )\n  );\n\n  module.addFunction(prototype.internalName + \"~instanceof\", nativeSizeType, NativeType.I32, null, module.flatten(stmts));\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(ctx: BuiltinContext): Type | null {\n  var compiler = ctx.compiler;\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        ctx.reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length > 0) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments !== null && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    ctx.reportNode.argumentsRange, \"1\", operands.length.toString()\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var module = compiler.module;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    let expr = compiler.compileExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      assert(getConstValueI64High(precomp) == 0); // TODO\n      value = getConstValueI64Low(precomp);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    let expr = compiler.compileExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      value = getConstValueI32(precomp);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Evaluates a compile-time constant immediate align argument. */\nfunction evaluateImmediateAlign(expression: Expression, naturalAlign: i32, compiler: Compiler): i32 {\n  var align = evaluateImmediateOffset(expression, compiler);\n  if (align < 0) return align;\n  if (align < 1 || naturalAlign > 16) {\n    compiler.error(\n      DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n      expression.range, \"Alignment\", \"1\", naturalAlign.toString()\n    );\n    return -1;\n  }\n  if (!isPowerOf2(align)) {\n    compiler.error(\n      DiagnosticCode._0_must_be_a_power_of_two,\n      expression.range, \"Alignment\"\n    );\n    return -1;\n  }\n  return align;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(ctx: BuiltinContext, feature: Feature): i32 {\n  var compiler = ctx.compiler;\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      ctx.reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var compiler = ctx.compiler;\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let compiler = ctx.compiler;\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(ctx: BuiltinContext): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let prototype = ctx.prototype;\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      ctx.reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(ctx: BuiltinContext, expected: i32): i32 {\n  var operands = ctx.operands;\n  if (operands.length != expected) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(ctx: BuiltinContext, expectedMinimum: i32, expectedMaximum: i32): i32 {\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Makes an usize constant matching contextual type if reasonable. */\nfunction contextualUsize(compiler: Compiler, value: i64, contextualType: Type): ExpressionRef {\n  var module = compiler.module;\n  // Check if contextual type fits\n  if (contextualType != Type.auto && contextualType.isIntegerValue) {\n    switch (contextualType.kind) {\n      case TypeKind.I32: {\n        if (i64_is_i32(value)) {\n          compiler.currentType = Type.i32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.U32: {\n        if (i64_is_u32(value)) {\n          compiler.currentType = Type.u32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        compiler.currentType = contextualType;\n        return module.i64(i64_low(value), i64_high(value));\n      }\n      // isize/usize falls through\n      // small int is probably not intended\n    }\n  }\n  // Default to usize\n  if (compiler.options.isWasm64) {\n    compiler.currentType = Type.usize64;\n    return module.i64(i64_low(value), i64_high(value));\n  } else {\n    compiler.currentType = Type.usize32;\n    assert(!i64_high(value));\n    return module.i32(i64_low(value));\n  }\n}\n","/**\n * @fileoverview Binaryen glue code for JavaScript.\n * @license Apache-2.0\n */\n\nconst binaryen = global.binaryen || (global.binaryen = require(\"binaryen\"));\n\nmodule.exports = binaryen;\n\nconst { Module } = require(\"../module\");\n\nModule.prototype.toText = function toText() {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function toAsmjs() {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","/**\n * @fileoverview The AssemblyScript compiler.\n * @license Apache-2.0\n */\n\nimport {\n  BuiltinNames,\n  BuiltinContext,\n  builtins,\n  function_builtins,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n  compileClassInstanceOf\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  GlobalRef,\n  FeatureFlags,\n  Index,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChildAt,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  needsExplicitUnreachable,\n  getLocalSetValue,\n  getGlobalGetName,\n  isGlobalMutable,\n  createType,\n  getSideEffects,\n  SideEffects,\n  SwitchBuilder,\n  ExpressionRunnerFlags\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INDEX_SUFFIX,\n  CommonNames,\n  Feature,\n  Target,\n  featureToString\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName,\n  DeclaredElement\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  FieldFlags,\n  ConditionKind,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver,\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  Range,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  DecoratorKind,\n  AssertionKind,\n  SourceKind,\n  FunctionTypeNode,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportDefaultStatement,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  NamedTypeNode,\n\n  findDecorator,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  uniqueMap,\n  isPowerOf2,\n  v128_zero\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** It true, exports the memory to the embedder. */\n  exportMemory: bool = true;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** Initial memory size, in pages. */\n  initialMemory: u32 = 0;\n  /** Maximum memory size, in pages. */\n  maximumMemory: u32 = 0;\n  /** If true, memory is declared as shared. */\n  sharedMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, exports the function table. */\n  exportTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: u32 = 0;\n  /** Static table start offset. */\n  tableBase: u32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n  /** If true, enables pedantic diagnostics. */\n  pedantic: bool = false;\n  /** Indicates a very low (<64k) memory limit. */\n  lowMemoryLimit: u32 = 0;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Gets if any optimizations will be performed. */\n  get willOptimize(): bool {\n    return this.optimizeLevelHint > 0 || this.shrinkLevelHint > 0;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5,\n  /** Indicates that the value will become `this` of a property access or instance call. */\n  IS_THIS = 1 << 6\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3,\n  /** Requires the setArgumentsLength export. */\n  setArgumentsLength = 1 << 4\n}\n\n/** Exported names of compiler-generated elements. */\nexport namespace ExportNames {\n  /** Name of the explicit start function, if applicable. */\n  export const start = \"_start\"; // match WASI\n  /** Name of the argumentsLength varargs helper global. */\n  export const argumentsLength = \"__argumentsLength\";\n  /** Name of the alternative argumentsLength setter function. */\n  export const setArgumentsLength = \"__setArgumentsLength\";\n  /** Name of the memory instance, if exported. */\n  export const memory = \"memory\";\n  /** Name of the table instance, if exported. */\n  export const table = \"table\";\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  get options(): Options { return this.program.options; }\n  /** Module instance being compiled. */\n  module: Module;\n\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: i64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. First elem is blank. */\n  functionTable: Function[] = [];\n  /** Arguments length helper global. */\n  builtinArgumentsLength: GlobalRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n  /** Current inline functions stack. */\n  inlineStack: Function[] = [];\n  /** Lazily compiled functions. */\n  lazyFunctions: Set<Function> = new Set();\n  /** Pending class-specific instanceof helpers. */\n  pendingClassInstanceOf: Set<ClassPrototype> = new Set();\n  /** Functions potentially involving a virtual call. */\n  virtualCalls: Set<Function> = new Set();\n  /** Elements currently undergoing compilation. */\n  pendingElements: Set<Element> = new Set();\n  /** Elements, that are module exports, already processed */\n  doneModuleExports: Set<Element> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program): Module {\n    return new Compiler(program).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n    var options = program.options;\n    var module = Module.create();\n    this.module = module;\n    if (options.memoryBase) {\n      this.memoryOffset = i64_new(options.memoryBase);\n      module.setLowMemoryUnused(false);\n    } else {\n      if (!options.lowMemoryLimit && options.optimizeLevelHint >= 2) {\n        this.memoryOffset = i64_new(1024);\n        module.setLowMemoryUnused(true);\n      } else {\n        this.memoryOffset = i64_new(8);\n        module.setLowMemoryUnused(false);\n      }\n    }\n    var featureFlags: FeatureFlags = 0;\n    if (options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    if (options.hasFeature(Feature.MULTI_VALUE)) featureFlags |= FeatureFlags.MultiValue;\n    if (options.hasFeature(Feature.GC)) featureFlags |= FeatureFlags.GC;\n    if (options.hasFeature(Feature.MEMORY64)) featureFlags |= FeatureFlags.Memory64;\n    module.setFeatures(featureFlags);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(BuiltinNames.start, new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = BuiltinNames.start;\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = new Array<ExpressionRef>();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    this.program.initialize();\n\n    // obtain the main start function\n    var startFunctionInstance = this.currentFlow.actualFunction;\n    assert(startFunctionInstance.internalName == BuiltinNames.start);\n    var startFunctionBody = this.currentBody;\n    assert(startFunctionBody.length == 0);\n\n    // add mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    // TODO: for (let file of files.values()) {\n    for (let _values = Map_values(files), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or if explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = program.isWasi || options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinNames.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinNames.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinNames.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.flatten(startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, ExportNames.start);\n    }\n\n    // check if the entire program is acyclic\n    var cyclicClasses = program.findCyclicClasses();\n    if (cyclicClasses.size) {\n      if (options.pedantic) {\n        // TODO: for (let classInstance of cyclicClasses) {\n        for (let _values = Set_values(cyclicClasses), i = 0, k = _values.length; i < k; ++i) {\n          let classInstance = unchecked(_values[i]);\n          this.pedantic(\n            DiagnosticCode.Type_0_is_cyclic_Module_will_include_deferred_garbage_collection,\n            classInstance.identifierNode.range, classInstance.internalName\n          );\n        }\n      }\n    } else {\n      program.registerConstantInteger(\"__GC_ALL_ACYCLIC\", Type.bool, i64_new(1, 0));\n    }\n\n    // compile lazy functions\n    var lazyFunctions = this.lazyFunctions;\n    do {\n      let functionsToCompile = new Array<Function>();\n      // TODO: for (let instance of lazyLibraryFunctions) {\n      for (let _values = Set_values(lazyFunctions), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        functionsToCompile.push(instance);\n      }\n      lazyFunctions.clear();\n      for (let i = 0, k = functionsToCompile.length; i < k; ++i) {\n        this.compileFunction(unchecked(functionsToCompile[i]), true);\n      }\n    } while (lazyFunctions.size);\n\n    // compile pending class-specific instanceof helpers\n    // TODO: for (let prototype of this.pendingClassInstanceOf.values()) {\n    for (let _values = Set_values(this.pendingClassInstanceOf), i = 0, k = _values.length; i < k; ++i) {\n      let prototype = unchecked(_values[i]);\n      compileClassInstanceOf(this, prototype);\n    }\n\n    // set up virtual lookup tables\n    var functionTable = this.functionTable;\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      let instance = functionTable[i];\n      if (instance.is(CommonFlags.VIRTUAL)) {\n        assert(instance.is(CommonFlags.INSTANCE));\n        functionTable[i] = this.ensureVirtualStub(instance); // incl. varargs\n        this.finalizeVirtualStub(instance);\n      } else if (instance.signature.requiredParameters < instance.signature.parameterTypes.length) {\n        functionTable[i] = this.ensureVarargsStub(instance);\n      }\n    }\n    var virtualCalls = this.virtualCalls;\n    for (let _values = Set_values(virtualCalls), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      this.finalizeVirtualStub(instance);\n    }\n\n    // finalize runtime features\n    module.removeGlobal(BuiltinNames.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    var lowMemoryLimit32 = this.options.lowMemoryLimit;\n    if (lowMemoryLimit32) {\n      let lowMemoryLimit = i64_new(lowMemoryLimit32 & ~15);\n      if (i64_gt(memoryOffset, lowMemoryLimit)) {\n        this.error(\n          DiagnosticCode.Low_memory_limit_exceeded_by_static_data_0_1,\n          null, i64_to_string(memoryOffset), i64_to_string(lowMemoryLimit)\n        );\n      }\n    }\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinNames.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var initialPages: u32 = 0;\n    if (this.options.memoryBase /* is specified */ || this.memorySegments.length) {\n      initialPages = u32(i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16))));\n    }\n    if (options.initialMemory) {\n      if (options.initialMemory < initialPages) {\n        this.error(\n          DiagnosticCode.Module_requires_at_least_0_pages_of_initial_memory,\n          null,\n          initialPages.toString()\n        );\n      } else {\n        initialPages = options.initialMemory;\n      }\n    }\n    var maximumPages = Module.UNLIMITED_MEMORY;\n    if (options.maximumMemory) {\n      if (options.maximumMemory < initialPages) {\n        this.error(\n          DiagnosticCode.Module_requires_at_least_0_pages_of_maximum_memory,\n          null,\n          initialPages.toString()\n        );\n      } else {\n        maximumPages = options.maximumMemory;\n      }\n    }\n    var isSharedMemory = false;\n    if (options.sharedMemory) {\n      isSharedMemory = true;\n      if (!options.maximumMemory) {\n        this.error(\n          DiagnosticCode.Shared_memory_requires_maximum_memory_to_be_defined,\n          null\n        );\n        isSharedMemory = false;\n      }\n      if (!options.hasFeature(Feature.THREADS)) {\n        this.error(\n          DiagnosticCode.Shared_memory_requires_feature_threads_to_be_enabled,\n          null\n        );\n        isSharedMemory = false;\n      }\n    }\n    module.setMemory(\n      initialPages,\n      maximumPages,\n      this.memorySegments,\n      options.target,\n      options.exportMemory ? ExportNames.memory : null,\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table (first elem is blank)\n    var tableBase = this.options.tableBase;\n    if (!tableBase) tableBase = 1; // leave first elem blank\n    var functionTableNames = new Array<string>(functionTable.length);\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      functionTableNames[i] = functionTable[i].internalName;\n    }\n    module.setFunctionTable(tableBase + functionTable.length, Module.UNLIMITED_TABLE, functionTableNames, module.i32(tableBase));\n\n    // import and/or export table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Importing_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n    if (options.exportTable) {\n      module.addTableExport(\"0\", ExportNames.table);\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Exporting_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n\n    // set up module exports\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n\n    // expose the arguments length helper if there are varargs exports\n    if (this.runtimeFeatures & RuntimeFeatures.setArgumentsLength) {\n      module.addFunction(BuiltinNames.setArgumentsLength, NativeType.I32, NativeType.None, null,\n        module.global_set(BuiltinNames.argumentsLength, module.local_get(0, NativeType.I32))\n      );\n      module.addFunctionExport(BuiltinNames.setArgumentsLength, ExportNames.setArgumentsLength);\n    }\n    return module;\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [elementName, element] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let elementName = unchecked(_keys[i]);\n        let element = assert(exports.get(elementName));\n        this.ensureModuleExport(elementName, element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.ensureModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>element;\n        let functionInstances = functionPrototype.instances;\n        if (functionInstances !== null && functionInstances.size > 0) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(functionInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        } else if (functionPrototype.is(CommonFlags.GENERIC)) {\n          this.warning(\n            DiagnosticCode.Exported_generic_function_or_class_has_no_concrete_instances,\n            functionPrototype.identifierNode.range\n          );\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let classPrototype = <ClassPrototype>element;\n        let classInstances = classPrototype.instances;\n        if (classInstances !== null && classInstances.size > 0) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(classInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        } else if (classPrototype.is(CommonFlags.GENERIC)) {\n          this.warning(\n            DiagnosticCode.Exported_generic_function_or_class_has_no_concrete_instances,\n            classPrototype.identifierNode.range\n          );\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = (<PropertyPrototype>element).instance;\n        if (propertyInstance) this.ensureModuleExport(name, propertyInstance, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let global = <Global>element;\n        let isConst = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            global.identifierNode.range\n          );\n        } else {\n          if (element.is(CommonFlags.COMPILED)) this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        let enumValue = <EnumValue>element;\n        if (!enumValue.isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            enumValue.identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let functionInstance = <Function>element;\n        if (!functionInstance.hasDecorator(DecoratorFlags.BUILTIN)) {\n          let signature = functionInstance.signature;\n          if (signature.requiredParameters < signature.parameterTypes.length) {\n            // utilize varargs stub to fill in omitted arguments\n            functionInstance = this.ensureVarargsStub(functionInstance);\n            this.ensureArgumentsLength();\n            this.runtimeFeatures |= RuntimeFeatures.setArgumentsLength;\n          }\n          if (functionInstance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(functionInstance.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getterInstance = propertyInstance.getterInstance;\n        if (getterInstance) this.ensureModuleExport(GETTER_PREFIX + name, getterInstance, prefix);\n        let setterInstance = propertyInstance.setterInstance;\n        if (setterInstance) this.ensureModuleExport(SETTER_PREFIX + name, setterInstance, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (element.is(CommonFlags.COMPILED)) {\n          let module = this.module;\n          module.addFunctionExport(fieldInstance.internalGetterName, prefix + GETTER_PREFIX + name);\n          if (!element.is(CommonFlags.READONLY)) {\n            module.addFunctionExport(fieldInstance.internalSetterName, prefix + SETTER_PREFIX + name);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let classInstance = <Class>element;\n        // make the class name itself represent its runtime id\n        if (!classInstance.type.isUnmanaged) {\n          let module = this.module;\n          let internalName = classInstance.internalName;\n\n          if (!this.doneModuleExports.has(element)) {\n            module.addGlobal(internalName, NativeType.I32, false, module.i32(classInstance.id));\n            this.doneModuleExports.add(element);\n          }\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        let implicitExport = element.is(CommonFlags.SCOPED);\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (implicitExport || member.is(CommonFlags.EXPORT)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      } else {\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (!member.is(CommonFlags.PRIVATE)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      }\n    }\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (functionInstance) this.compileFunction(functionInstance);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let classInstance = this.resolver.resolveClass(<ClassPrototype>element, null);\n          if (classInstance) this.compileClass(classInstance);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n        if (propertyInstance) this.compileProperty(propertyInstance);\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false);\n    }\n    if (compileMembers) {\n      let members = element.members;\n      if (members) {\n        // TODO: for (let element of members.values()) {\n        for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n          let element = unchecked(_values[i]);\n          this.compileElement(element);\n        }\n      }\n    }\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileElement(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = assert(filesByName.get(normalizedPathWithoutExtension));\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = assert(filesByName.get(pathWithIndex));\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var startSignature = startFunction.signature;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    // no need to insert unreachable since last statement should have done that\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        startSignature.nativeParams,\n        startSignature.nativeResults,\n        varTypes,\n        module.flatten(startFunctionBody)\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  /** Compiles a global variable. */\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return !global.is(CommonFlags.ERRORED);\n    global.set(CommonFlags.COMPILED);\n\n    var pendingElements = this.pendingElements;\n    pendingElements.add(global);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) {\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        global.setType(resolvedType);\n        this.checkTypeSupported(global.type, typeNode);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        global.set(CommonFlags.ERRORED);\n        pendingElements.delete(global);\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinNames.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinNames.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      pendingElements.delete(global);\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType,\n          !isDeclaredConstant\n        );\n        pendingElements.delete(global);\n        return true;\n      }\n\n      // Importing mutable globals is not supported in the MVP\n      this.error(\n        DiagnosticCode.Feature_0_is_not_enabled,\n        global.declaration.range, \"mutable-globals\"\n      );\n      global.set(CommonFlags.ERRORED);\n      pendingElements.delete(global);\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constants and gets of\n    // imported immutable globals, hence such initializations must be performed in the start.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n      }\n\n      // If not a constant, attempt to precompute\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              initializeInStart = true;\n            }\n          }\n          if (this.skippedAutoreleases.has(initExpr)) this.skippedAutoreleases.add(initExpr);\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Handle special case of initializing from imported immutable global\n      if (initializeInStart && getExpressionId(initExpr) == ExpressionId.GlobalGet) {\n        let fromName = assert(getGlobalGetName(initExpr));\n        if (!isGlobalMutable(module.getGlobal(fromName))) {\n          let elementsByName = this.program.elementsByName;\n          if (elementsByName.has(fromName)) {\n            let global = assert(elementsByName.get(fromName));\n            if (global.is(CommonFlags.AMBIENT)) initializeInStart = false;\n          }\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (<u32>exprType) {\n            case <u32>NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case <u32>NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case <u32>NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case <u32>NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              global.set(CommonFlags.ERRORED);\n              pendingElements.delete(global);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      if (global.is(CommonFlags.INLINED)) {\n        initExpr = this.compileInlineConstant(global, global.type, Constraints.PREFER_STATIC | Constraints.WILL_RETAIN);\n      } else {\n        initExpr = this.makeZero(type, global.declaration);\n      }\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          findDecorator(DecoratorKind.INLINE, global.decoratorNodes)!.range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, this.makeZero(type, global.declaration));\n      if (type.isManaged && !this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr, type);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    pendingElements.delete(global);\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  /** Compiles an enum. */\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return !element.is(CommonFlags.ERRORED);\n    element.set(CommonFlags.COMPILED);\n\n    var pendingElements = this.pendingElements;\n    pendingElements.add(element);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of element.members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let enumValue = <EnumValue>member;\n        let valueNode = enumValue.valueNode;\n        enumValue.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              enumValue.identifierNode.range.atEnd\n            );\n          }\n          if (isInline) {\n            let value = i64_add(previousValue.constantIntegerValue, i64_new(1));\n            assert(!i64_high(value));\n            initExpr = module.i32(i64_low(value));\n          } else {\n            initExpr = module.binary(BinaryOp.AddI32,\n              module.global_get(previousValue.internalName, NativeType.I32),\n              module.i32(1)\n            );\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  member.declaration.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(enumValue.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(enumValue, initExpr, Type.i32, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            enumValue.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (enumValue.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(enumValue.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(enumValue.internalName, NativeType.I32, false, initExpr);\n          }\n          enumValue.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = enumValue;\n      }\n    }\n    this.currentParent = previousParent;\n    pendingElements.delete(element);\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Compiles a priorly resolved function. */\n  compileFunction(\n    /** Function to compile. */\n    instance: Function,\n    /** Force compilation of stdlib alternative if a builtin. */\n    forceStdAlternative: bool = false\n  ): bool {\n    if (instance.is(CommonFlags.COMPILED)) return !instance.is(CommonFlags.ERRORED);\n\n    if (!forceStdAlternative) {\n      if (instance.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n      if (instance.hasDecorator(DecoratorFlags.LAZY)) {\n        this.lazyFunctions.add(instance);\n        return true;\n      }\n    }\n\n    instance.set(CommonFlags.COMPILED);\n    var pendingElements = this.pendingElements;\n    pendingElements.add(instance);\n\n    var previousType = this.currentType;\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n    var declarationNode = instance.declaration;\n    assert(declarationNode.kind == NodeKind.FUNCTIONDECLARATION || declarationNode.kind == NodeKind.METHODDECLARATION);\n    this.checkSignatureSupported(instance.signature, (<FunctionDeclaration>declarationNode).signature);\n\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // In normal instance functions, `this` is effectively a constant\n        // retained elsewhere so does not need to be retained.\n        if (instance.is(CommonFlags.CONSTRUCTOR)) {\n          // Constructors, however, can allocate their own memory, and as such\n          // must refcount the allocation in case something else is `return`ed.\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.local_set(index,\n              this.makeRetain(\n                module.local_get(index, type.toNativeType()),\n                type\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n      }\n\n      let body: ExpressionRef;\n      if (this.compileFunctionBody(instance, stmts)) {\n        if (!flow.is(FlowFlags.TERMINATES)) {\n          this.performAutoreleases(flow, stmts);\n          this.finishAutoreleases(flow, stmts);\n        }\n        body = module.flatten(stmts, instance.signature.returnType.toNativeType());\n      } else {\n        body = module.unreachable();\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(instance.additionalLocals),\n        body\n      );\n\n    // imported function\n    } else if (instance.is(CommonFlags.AMBIENT)) {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declarationNode); // TODO: check for duplicates\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        signature.nativeParams,\n        signature.nativeResults\n      );\n      funcRef = module.getFunction(instance.internalName);\n\n    // abstract or interface function\n    } else if (instance.is(CommonFlags.ABSTRACT) || instance.parent.kind == ElementKind.INTERFACE) {\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        null,\n        module.unreachable()\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        instance.identifierNode.range\n      );\n      funcRef = 0; // TODO?\n      instance.set(CommonFlags.ERRORED);\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    pendingElements.delete(instance);\n    return true;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  private compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements also being returned. Creates a new array if omitted. */\n    stmts: ExpressionRef[]\n  ): bool {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n    var thisLocal = instance.signature.thisType\n      ? assert(flow.lookupLocal(CommonNames.this_))\n      : null;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\n\n      // take special care of properly retaining the returned value\n      let expr = this.compileReturnedExpression((<ExpressionStatement>bodyNode).expression, returnType, Constraints.CONV_IMPLICIT);\n\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n          flow.freeTempLocal(temp);\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // Make constructors return their instance pointer, and prepend a conditional\n    // allocation if any code path accesses `this`.\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      thisLocal = assert(thisLocal);\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n\n      if (flow.isAny(FlowFlags.ACCESSES_THIS | FlowFlags.CONDITIONALLY_ACCESSES_THIS) || !flow.is(FlowFlags.TERMINATES)) {\n        // Allocate `this` if not a super call, and initialize fields\n        let allocStmts = new Array<ExpressionRef>();\n        allocStmts.push(\n          module.if(\n            module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n              module.local_get(thisLocal.index, nativeSizeType)\n            ),\n            module.local_set(thisLocal.index,\n              this.makeRetain(\n                this.makeAllocation(classInstance),\n                classInstance.type\n              )\n            )\n          )\n        );\n        this.makeFieldInitializationInConstructor(classInstance, allocStmts);\n        if (flow.isInline) {\n          let firstStmt = stmts[0]; // `this` alias assignment\n          assert(getExpressionId(firstStmt) == ExpressionId.LocalSet);\n          assert(getLocalSetIndex(firstStmt) == thisLocal.index);\n          allocStmts.unshift(firstStmt);\n          stmts[0] = module.flatten(allocStmts, NativeType.None);\n        } else {\n          stmts.unshift(\n            module.flatten(allocStmts, NativeType.None)\n          );\n        }\n\n        // Just prepended allocation is dropped when returning non-'this'\n        if (flow.is(FlowFlags.MAY_RETURN_NONTHIS)) {\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Explicitly_returning_constructor_drops_this_allocation,\n              instance.identifierNode.range\n            );\n          }\n        }\n      }\n\n      // Returning something else than 'this' would break 'super()' calls\n      if (flow.is(FlowFlags.MAY_RETURN_NONTHIS) && !classInstance.hasDecorator(DecoratorFlags.FINAL)) {\n        this.error(\n          DiagnosticCode.A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final,\n          classInstance.identifierNode.range\n        );\n      }\n\n      // Implicitly return `this` if the flow falls through\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        assert(flow.isAnyLocalFlag(thisLocal.index, LocalFlags.ANY_RETAINED));\n        flow.unsetLocalFlag(thisLocal.index, LocalFlags.ANY_RETAINED); // undo\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if (classInstance.base !== null && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n      return false; // not recoverable\n    }\n\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  /** Compiles a priorly resolved class. */\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      // TODO: for (let element of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (element.is(CommonFlags.GENERIC)) break;\n            let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n            if (!functionInstance) break;\n            element = functionInstance;\n            // fall-through\n          }\n          case ElementKind.FUNCTION: {\n            this.compileFunction(<Function>element);\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n            if (!propertyInstance) break;\n            element = propertyInstance;\n            // fall-through\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    this.ensureConstructor(instance, instance.identifierNode);\n    this.checkFieldInitialization(instance);\n\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      // TODO: for (let element of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (element.is(CommonFlags.GENERIC)) break;\n            let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n            if (!functionInstance) break;\n            element = functionInstance;\n            // fall-through\n          }\n          case ElementKind.FUNCTION: {\n            this.compileFunction(<Function>element);\n            break;\n          }\n          case ElementKind.FIELD: {\n            this.compileField(<Field>element);\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n            if (!propertyInstance) break;\n            element = propertyInstance;\n            // fall-through\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /** Compiles an instance field to a getter and a setter. */\n  compileField(instance: Field): bool {\n    this.compileFieldGetter(instance);\n    this.compileFieldSetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /** Compiles the getter of the specified instance field. */\n  compileFieldGetter(instance: Field): bool {\n    // A getter retains, while a load, as of a field access, does not.\n    if (instance.getterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr = module.load(type.byteSize, type.isSignedIntegerValue,\n      module.local_get(0, nativeThisType),\n      nativeValueType, instance.memoryOffset\n    );\n    if (type.isManaged) valueExpr = this.makeRetain(valueExpr, type);\n    instance.getterRef = module.addFunction(instance.internalGetterName, nativeThisType, nativeValueType, null, valueExpr);\n    if (instance.setterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  /** Compiles the setter of the specified instance field. */\n  compileFieldSetter(instance: Field): bool {\n    if (instance.setterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr: ExpressionRef;\n    var varTypes: NativeType[] | null = null;\n    if (type.isManaged) {\n      // Can't use makeReplace here since there's no corresponding flow, so\n      // 0: this, 1: value, 2: oldValue (temp)\n      valueExpr = module.block(null, [\n        module.if(\n          module.binary(nativeValueType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            // value != (oldValue = this.field)\n            module.local_get(1, nativeValueType),\n            module.local_tee(2,\n              module.load(type.byteSize, false,\n                module.local_get(0, nativeThisType),\n                nativeValueType, instance.memoryOffset\n              )\n            )\n          ),\n          module.block(null, [\n            module.drop(\n              this.makeRetain(module.local_get(1, nativeValueType), type)\n            ),\n            this.makeRelease(module.local_get(2, nativeValueType), type)\n          ])\n        ),\n        module.local_get(1, nativeValueType)\n      ], nativeValueType);\n      varTypes = [ nativeValueType ];\n    } else {\n      valueExpr = module.local_get(1, nativeValueType);\n    }\n    instance.setterRef = module.addFunction(instance.internalSetterName, createType([ nativeThisType, nativeValueType ]), NativeType.None, varTypes,\n      module.store(type.byteSize,\n        module.local_get(0, nativeThisType),\n        valueExpr,\n        nativeValueType, instance.memoryOffset\n      )\n    );\n    if (instance.getterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  /** Compiles a property to a getter and potentially a setter. */\n  compileProperty(instance: Property): bool {\n    this.compilePropertyGetter(instance);\n    this.compilePropertySetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /* Compiles the getter of the specified property. */\n  compilePropertyGetter(instance: Property): bool {\n    var getterInstance = instance.getterInstance;\n    if (getterInstance) {\n      let ret = this.compileFunction(getterInstance);\n      let setterInstance = instance.setterInstance;\n      if (getterInstance.is(CommonFlags.COMPILED) && (!setterInstance || setterInstance.is(CommonFlags.COMPILED))) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  /** Compiles the setter of the specified property. */\n  compilePropertySetter(instance: Property): bool {\n    var setterInstance = instance.setterInstance;\n    if (setterInstance) {\n      let ret = this.compileFunction(setterInstance);\n      let getterInstance = instance.getterInstance;\n      if (getterInstance !== null && getterInstance.is(CommonFlags.COMPILED) && setterInstance.is(CommonFlags.COMPILED)) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addAlignedMemorySegment(buffer: Uint8Array, alignment: i32 = 16): MemorySegment {\n    assert(isPowerOf2(alignment));\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = new MemorySegment(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Adds a static memory segment representing a runtime object. */\n  addRuntimeMemorySegment(buffer: Uint8Array): MemorySegment {\n    // Runtime objects imply a full BLOCK and OBJECT header, see rt/common.ts\n    // ((memoryOffset + sizeof_usize + AL_MASK) & ~AL_MASK) - sizeof_usize\n    var usizeSize = this.options.usizeType.byteSize;\n    var memoryOffset = i64_sub(i64_align(i64_add(this.memoryOffset, i64_new(usizeSize)), 16), i64_new(usizeSize));\n    var segment = new MemorySegment(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that a string exists in static memory and returns a pointer to it. Deduplicates. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = assert(segments.get(stringValue)); // reuse\n    } else {\n      let len = stringValue.length;\n      let buf = stringInstance.createBuffer(len << 1);\n      for (let i = 0; i < len; ++i) {\n        writeI16(stringValue.charCodeAt(i), buf, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addRuntimeMemorySegment(buf);\n      segments.set(stringValue, stringSegment);\n    }\n    var ptr = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ptr), i64_high(ptr));\n    } else {\n      assert(i64_is_u32(ptr));\n      return this.module.i32(i64_low(ptr));\n    }\n  }\n\n  /** Writes a series of static values of the specified type to a buffer. */\n  writeStaticBuffer(buf: Uint8Array, pos: i32, elementType: Type, values: ExpressionRef[]): i32 {\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var nativeType = elementType.toNativeType();\n    switch (<u32>nativeType) {\n      case <u32>NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case <u32>NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case <u32>NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case <u32>NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    return pos;\n  }\n\n  /** Adds a buffer to static memory and returns the created segment. */\n  addStaticBuffer(elementType: Type, values: ExpressionRef[], id: u32 = this.program.arrayBufferInstance.id): MemorySegment {\n    var program = this.program;\n    var arrayBufferInstance = program.arrayBufferInstance;\n    var buf = arrayBufferInstance.createBuffer(values.length * elementType.byteSize);\n    this.program.OBJECTInstance.writeField(\"rtId\", id, buf, 0); // use specified rtId\n    assert(this.writeStaticBuffer(buf, program.runtimeHeaderSize, elementType, values) == buf.length);\n    return this.addRuntimeMemorySegment(buf);\n  }\n\n  /** Adds an array header to static memory and returns the created segment. */\n  private addStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n    var bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n    var buf = arrayInstance.createBuffer();\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress, buf));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress, buf));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf));\n    return this.addRuntimeMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a runtime counterpart of the specified function exists and returns its address. */\n  ensureRuntimeFunction(instance: Function): i64 {\n    assert(instance.is(CommonFlags.COMPILED) && !instance.is(CommonFlags.STUB));\n    var program = this.program;\n    var memorySegment = instance.memorySegment;\n    if (!memorySegment) {\n\n      // Add to the function table\n      let functionTable = this.functionTable;\n      let tableBase = this.options.tableBase;\n      if (!tableBase) tableBase = 1; // leave first elem blank\n      let index = tableBase + functionTable.length;\n      functionTable.push(instance);\n\n      // Create runtime function\n      let rtInstance = assert(this.resolver.resolveClass(program.functionPrototype, [ instance.type ]));\n      let buf = rtInstance.createBuffer();\n      assert(rtInstance.writeField(\"_index\", index, buf));\n      assert(rtInstance.writeField(\"_env\", 0, buf));\n      instance.memorySegment = memorySegment = this.addRuntimeMemorySegment(buf);\n    }\n    return i64_add(memorySegment.offset, i64_new(program.runtimeHeaderSize));\n  }\n\n  // === Statements ===============================================================================\n\n  /** Compiles a top level statement (incl. function declarations etc.) to the specified body. */\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let declaration = <NamespaceDeclaration>statement;\n        let element = this.program.getElementByDeclaration(declaration);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = declaration.members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        let exportStatement = <ExportStatement>statement;\n        let internalPath = exportStatement.internalPath;\n        if (internalPath !== null) {\n          this.compileFileByPath(internalPath, assert(exportStatement.path));\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        let importStatement = <ImportStatement>statement;\n        this.compileFileByPath(importStatement.internalPath, importStatement.path);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATURE:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  /** Compiles a statement. */\n  compileStatement(\n    /** Statement to compile. */\n    statement: Statement,\n    /** Whether this is the last statement of the body, if known. */\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.FOROF: {\n        stmt = this.compileForOfStatement(<ForOfStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          statement.range,\n          \"Inner type alias\"\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  /** Compiles a series of statements. */\n  compileStatements(\n    /** Statements to compile. */\n    statements: Statement[],\n    /** Whether this is an immediate body statement. */\n    isBody: bool = false,\n    /** Statements to append to that is also returned. Created if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j: Index = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChildAt(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  private compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return this.module.flatten(stmts);\n  }\n\n  private compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var labelNode = statement.label;\n    if (labelNode) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        labelNode.range,\n        \"Break label\"\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* finalize */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return module.flatten(stmts);\n  }\n\n  private compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        label.range,\n        \"Continue label\"\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current !== null && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* finalize */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return module.flatten(stmts);\n  }\n\n  private compileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement\n  ): ExpressionRef {\n    return this.doCompileDoStatement(statement, null);\n  }\n\n  private doCompileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                          └►┐ flow\n    //  (loop $continue                         ├◄───────────┐ recompile?\n    //   (body)                                 └─┐ bodyFlow │\n    //   [autorelease]                          ┌─┘          │\n    //                                        ┌◄┼►╢          │ breaks or terminates?\n    //   (local.set $tcond (condition))       │ └─┐ condFlow │\n    //   [autorelease]                        │ ┌─┘          │\n    //   (br_if (local.get $tcond) $continue) ├◄┴────────────┘ condition?\n    //  )                                     └─┐\n    // )                                      ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"do-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"do-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Compile the body (always executes)\n    var bodyFlow = flow.fork();\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Shortcut if body never falls through\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      flow.inherit(bodyFlow);\n\n    // Otherwise evaluate the condition\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n\n      let condFlow = flow.fork();\n      this.currentFlow = condFlow;\n      let condExpr = this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType,\n        statement.condition\n      );\n      let condKind = this.evaluateCondition(condExpr);\n\n      // Shortcut if condition is always false\n      if (condKind == ConditionKind.FALSE) {\n        bodyStmts.push(\n          module.drop(condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        flow.inherit(bodyFlow);\n\n      // Terminate if condition is always true and body never breaks\n      } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        bodyStmts.push(\n          module.drop(condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n        flow.set(FlowFlags.TERMINATES);\n\n      } else {\n        let tcond = condFlow.getTempLocal(Type.bool);\n        bodyStmts.push(\n          module.local_set(tcond.index, condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel,\n            module.local_get(tcond.index, NativeType.I32)\n          )\n        );\n        condFlow.freeTempLocal(tcond);\n        flow.inherit(condFlow);\n\n        // Detect if local flags are incompatible before and after looping, and\n        // if so recompile by unifying local flags between iterations. Note that\n        // this may be necessary multiple times where locals depend on each other.\n        if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return this.doCompileDoStatement(statement, flow);\n        }\n      }\n    }\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(bodyStmts)\n      )\n    ]);\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  private compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  private compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  private compileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement\n  ): ExpressionRef {\n    return this.doCompileForStatement(statement, null);\n  }\n\n  private doCompileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (initializer)                  └►┐ flow\n    // (block $break                    │\n    //  (loop $loop                     ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (block $continue            │ │            │\n    //     (body)                     │ └─┐ bodyFlow │\n    //     [autorelease]              │ ┌─┘          │\n    //    )                           ├◄┼►╢          │ breaks or terminates?\n    //    (incrementor)               │ └─┐ incrFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                │ └────────────┘\n    //    (br $loop)                  └─┐\n    //   )                              │\n    //  )                               │\n    // )                                │\n    // [autorelease]                  ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    this.currentFlow = flow;\n\n    var breakLabel = \"for-break\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"for-continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var loopLabel = \"for-loop|\" + label;\n\n    // Compile initializer if present (but wait with autoreleases)\n    var initializer = statement.initializer;\n    if (initializer) {\n      assert(\n        initializer.kind == NodeKind.EXPRESSION ||\n        initializer.kind == NodeKind.VARIABLE\n      );\n      stmts.push(this.compileStatement(initializer));\n    }\n\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr: ExpressionRef;\n    var condKind: ConditionKind;\n    var condition = statement.condition;\n    if (condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpression(condition, Type.bool),\n        this.currentType,\n        condition\n      );\n      condKind = this.evaluateCondition(condExpr);\n\n      // Shortcut if condition is always false (body never runs)\n      if (condKind == ConditionKind.FALSE) {\n        stmts.push(\n          module.drop(condExpr)\n        );\n        this.performAutoreleases(condFlow, stmts);\n        condFlow.freeScopedLocals();\n        flow.inherit(condFlow);\n        this.performAutoreleases(flow, stmts);\n        flow.freeScopedLocals();\n        outerFlow.inherit(flow);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return module.flatten(stmts);\n      }\n    } else {\n      condExpr = module.i32(1);\n      condKind = ConditionKind.TRUE;\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    var loopStmts = new Array<ExpressionRef>();\n    loopStmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, loopStmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Check if body terminates\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n    }\n    if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n    else flow.inheritBranch(bodyFlow);\n    bodyFlow.freeScopedLocals();\n\n    var ifStmts = new Array<ExpressionRef>();\n    ifStmts.push(\n      module.block(continueLabel, bodyStmts)\n    );\n\n    // Compile the incrementor if it runs\n    // Can still fall through to here if body continues, hence is already known to terminate\n    if (!bodyFlow.is(FlowFlags.TERMINATES) || bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) {\n      let incrementor = statement.incrementor;\n      if (incrementor) {\n        let incrFlow = flow.fork();\n        this.currentFlow = incrFlow;\n        ifStmts.push(\n          this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP)\n        );\n        this.performAutoreleases(incrFlow, ifStmts);\n        incrFlow.freeScopedLocals();\n        flow.inherit(incrFlow); // mostly local flags, also covers late termination by throwing\n        this.currentFlow = flow;\n      }\n\n      ifStmts.push(\n        module.br(loopLabel)\n      );\n\n      // Detect if local flags are incompatible before and after looping, and if\n      // so recompile by unifying local flags between iterations. Note that this\n      // may be necessary multiple times where locals depend on each other.\n      if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!bodyFlow.hasScopedLocals);\n        flow.freeScopedLocals();\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileForStatement(statement, flow);\n      }\n    }\n    loopStmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(ifStmts)\n      )\n    );\n\n    stmts.push(\n      module.block(breakLabel, [\n        module.loop(loopLabel,\n          module.flatten(loopStmts)\n        )\n      ])\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    flow.freeScopedLocals();\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      stmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(flow, stmts);\n    }\n    this.currentFlow = outerFlow;\n    return module.flatten(stmts);\n  }\n\n  private compileForOfStatement(\n    statement: ForOfStatement\n  ): ExpressionRef {\n    this.error(\n      DiagnosticCode.Not_implemented_0,\n      statement.range,\n      \"Iterators\"\n    );\n    return this.module.unreachable();\n  }\n\n  private compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // (if              └►┐ flow\n    //  (condition)      ┌┴───────────┐ condition?\n    //  (block           │            │\n    //   (ifTrue)        └►┐ thenFlow │\n    //   [autorelease]   ┌─┘          │\n    //  )                ├─╢          │\n    //  (block           │          ┌◄┤ present?\n    //   (ifFalse)       │          │ └►┐ elseFlow\n    //   [autorelease]   │          │ ┌─┘\n    //  )                │          │ ├─╢\n    // )                 └┬─────────┴─┘\n    // ...              ┌◄┘\n    // [autorelease]               incl. condition\n\n    // Precompute the condition (always executes)\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.bool),\n      this.currentType,\n      statement.condition\n    );\n    var condKind = this.evaluateCondition(condExpr);\n\n    // Shortcut if the condition is constant\n    switch (condKind) {\n      case ConditionKind.TRUE: {\n        return module.block(null, [\n          module.drop(condExpr),\n          this.compileStatement(ifTrue)\n        ]);\n      }\n      case ConditionKind.FALSE: {\n        return ifFalse\n          ? module.block(null, [\n              module.drop(condExpr),\n              this.compileStatement(ifFalse)\n            ])\n          : module.drop(condExpr);\n      }\n    }\n\n    // From here on condition is always unknown\n\n    var flow = this.currentFlow;\n\n    // Compile ifTrue assuming the condition turned out true\n    var thenStmts = new Array<ExpressionRef>();\n    var thenFlow = flow.fork();\n    this.currentFlow = thenFlow;\n    thenFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, thenStmts);\n    } else {\n      thenStmts.push(this.compileStatement(ifTrue));\n    }\n    var thenTerminates = thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n    if (thenTerminates) {\n      thenStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(thenFlow, thenStmts);\n    }\n    thenFlow.freeScopedLocals();\n    this.currentFlow = flow;\n\n    // Compile ifFalse assuming the condition turned out false, if present\n    if (ifFalse) {\n      let elseStmts = new Array<ExpressionRef>();\n      let elseFlow = flow.fork();\n      this.currentFlow = elseFlow;\n      elseFlow.inheritNonnullIfFalse(condExpr);\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, elseStmts);\n      } else {\n        elseStmts.push(this.compileStatement(ifFalse));\n      }\n      let elseTerminates = elseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n      if (elseTerminates) {\n        elseStmts.push(module.unreachable());\n      } else {\n        this.performAutoreleases(elseFlow, elseStmts);\n      }\n      elseFlow.freeScopedLocals();\n      this.currentFlow = flow;\n      flow.inheritMutual(thenFlow, elseFlow);\n      return module.if(condExpr,\n        module.flatten(thenStmts),\n        module.flatten(elseStmts)\n      );\n    } else {\n      flow.inheritBranch(thenFlow);\n      flow.inheritNonnullIfFalse(condExpr,\n        thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)\n          ? null     // thenFlow terminates: just inherit\n          : thenFlow // must become nonnull in thenFlow otherwise\n      );\n      return module.if(condExpr,\n        module.flatten(thenStmts)\n      );\n    }\n  }\n\n  private compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n\n      // take special care of properly retaining the returned value\n      expr = this.compileReturnedExpression(valueExpression, returnType, constraints);\n      if (flow.actualFunction.is(CommonFlags.CONSTRUCTOR) && valueExpression.kind != NodeKind.THIS) {\n        flow.set(FlowFlags.MAY_RETURN_NONTHIS);\n      }\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    if (returnType != Type.void && stmts.length > 0) {\n      let temp = flow.getTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n      flow.freeTempLocal(temp);\n    }\n    flow.freeScopedLocals();\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr != 0 && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.flatten(stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.isInline) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.flatten(stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.flatten(stmts);\n  }\n\n  private compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString() + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n      ? \"case\" + defaultIndex.toString()\n      : \"break\"\n    ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString() + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  private compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    // TODO: requires exception-handling spec.\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).args;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(\n      this.makeAbort(message, statement)\n    );\n    // generates dead code (after unreachable) but still updates state\n    var dropped = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, dropped);\n    this.finishAutoreleases(flow, dropped);\n    flow.freeScopedLocals();\n\n    return this.module.flatten(stmts);\n  }\n\n  private compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented_0,\n      statement.range,\n      \"Exceptions\"\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  private compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      let typeNode = declaration.type;\n      let initializerNode = declaration.initializer;\n      if (typeNode) {\n        type = resolver.resolveType( // reports\n          typeNode,\n          flow.actualFunction,\n          uniqueMap(flow.contextualTypeArguments)\n        );\n        if (!type) continue;\n        this.checkTypeSupported(type, typeNode);\n\n        if (initializerNode) {\n          let pendingElements = this.pendingElements;\n          let dummy = flow.addScopedDummyLocal(name, type); // pending dummy\n          pendingElements.add(dummy);\n          initExpr = this.compileExpression(initializerNode, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n          pendingElements.delete(dummy);\n          flow.freeScopedDummyLocal(name);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let pendingElements = this.pendingElements;\n        let temp = flow.addScopedDummyLocal(name, Type.auto); // pending dummy\n        pendingElements.add(temp);\n        initExpr = this.compileExpression(initializerNode, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        pendingElements.delete(temp);\n        flow.freeScopedDummyLocal(name);\n\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n          if (precomp) {\n            initExpr = precomp; // always use precomputed initExpr\n            let local: Local | null = null;\n            switch (<u32>getExpressionType(initExpr)) {\n              case <u32>NativeType.I32: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case <u32>NativeType.I64: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case <u32>NativeType.F32: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case <u32>NativeType.F64: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n            }\n            if (local) {\n              // Add as a virtual local that doesn't actually exist in WebAssembly\n              let scopedLocals = flow.scopedLocals;\n              if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n              else if (scopedLocals.has(name)) {\n                let existing = assert(scopedLocals.get(name));\n                this.errorRelated(\n                  DiagnosticCode.Duplicate_identifier_0,\n                  declaration.name.range,\n                  existing.declaration.name.range,\n                  name\n                );\n                return this.module.unreachable();\n              }\n              scopedLocals.set(name, local);\n              isStatic = true;\n            }\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.isInline\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr, type)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.isShortIntegerValue) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                this.makeZero(type, declaration)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.isShortIntegerValue) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : module.flatten(initializers);\n  }\n\n  private compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  private compileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement\n  ): ExpressionRef {\n    return this.doCompileWhileStatement(statement, null);\n  }\n\n  private doCompileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                  └►┐ flow\n    //  (loop $continue                 ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (body)                      │ └─┐ bodyFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                ├◄┼►╢          │ breaks or terminates?\n    //    (br $continue)              │ └────────────┘\n    //   )                            └─┐\n    //  )                               │\n    // )                              ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"while-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"while-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.bool),\n      this.currentType,\n      statement.condition\n    );\n    var condKind = this.evaluateCondition(condExpr);\n\n    // Shortcut if condition is always false (body never runs)\n    if (condKind == ConditionKind.FALSE) {\n      stmts.push(\n        module.drop(condExpr)\n      );\n      this.performAutoreleases(condFlow, stmts);\n      assert(!flow.hasScopedLocals);\n      outerFlow.popBreakLabel();\n      this.currentFlow = outerFlow;\n      return module.flatten(stmts);\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    stmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, stmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Simplify if body always terminates\n    if (bodyFlow.is(FlowFlags.TERMINATES)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n    // Terminate if condition is always true and body never breaks\n    } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n      bodyStmts.push(\n        module.br(continueLabel)\n      );\n      flow.set(FlowFlags.TERMINATES);\n\n    } else {\n      let breaks = bodyFlow.is(FlowFlags.BREAKS);\n      if (breaks) {\n        bodyStmts.push(\n          module.unreachable()\n        );\n      } else {\n        this.performAutoreleases(bodyFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n      }\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n      // Detect if local flags are incompatible before and after looping, and\n      // if so recompile by unifying local flags between iterations. Note that\n      // this may be necessary multiple times where locals depend on each other.\n      // Here: Only relevant if flow does not always break.\n      if (!breaks && Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        flow.freeTempLocal(tcond);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileWhileStatement(statement, flow);\n      }\n    }\n    stmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(bodyStmts)\n      )\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(stmts)\n      )\n    ]);\n    if (condKind == ConditionKind.TRUE && outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED | CommonFlags.RESOLVED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.isIntegerValue &&\n      contextualType.isIntegerValue &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64(element.constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32(<f32>element.constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType.nonNullableType) { // allow assigning non-nullable to nullable\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, expression);\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, expression);\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles an expression that is about to be returned, taking special care of retaining and setting flow states. */\n  private compileReturnedExpression(\n    /** Expression to compile. */\n    expression: Expression,\n    /** Return type of the function. */\n    returnType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    // pretend to retain the expression immediately so the autorelease, if any, is skipped\n    var expr = this.compileExpression(expression, returnType, constraints | Constraints.WILL_RETAIN);\n    var flow = this.currentFlow;\n    if (returnType.isManaged) {\n      // check if that worked, and if it didn't, keep the reference alive\n      if (!this.skippedAutoreleases.has(expr)) {\n        let index = this.tryUndoAutorelease(expr, flow);\n        if (index == -1) expr = this.makeRetain(expr, returnType);\n        this.skippedAutoreleases.add(expr);\n      }\n    }\n    // remember return states\n    if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n    return expr;\n  }\n\n  /** Converts an expression's result from one type to another. */\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit. */\n    explicit: bool,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    // reference involved\n    if (fromType.isReference || toType.isReference) {\n      if (this.currentFlow.isNonnull(expr, fromType)) {\n        fromType = fromType.nonNullableType;\n      } else if (explicit && fromType.isNullableReference && !toType.isNullableReference) {\n        // explicit conversion from nullable to non-nullable requires a runtime\n        // check here because nonnull state above already didn't know better\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, fromType, reportNode);\n        }\n        fromType = fromType.nonNullableType;\n      }\n      if (fromType.isAssignableTo(toType)) { // downcast or same\n        assert(toType.isExternalReference || fromType.kind == toType.kind);\n        this.currentType = toType;\n        return expr;\n      }\n      if (explicit && toType.nonNullableType.isAssignableTo(fromType)) { // upcast\n        // <Cat | null>(<Animal>maybeCat)\n        if (toType.isExternalReference) {\n          this.error(\n            DiagnosticCode.Not_implemented_0,\n            reportNode.range,\n            \"ref.cast\"\n          );\n          this.currentType = toType;\n          return module.unreachable();\n        }\n        assert(fromType.kind == toType.kind);\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeUpcastCheck(expr, fromType, toType, reportNode);\n        }\n        this.currentType = toType;\n        return expr;\n      }\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      this.currentType = toType;\n      return module.unreachable();\n    }\n\n    // not dealing with references from here on\n    assert(!fromType.isReference && !toType.isReference);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.isFloatValue) {\n\n      // float to float\n      if (toType.isFloatValue) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.isIntegerValue) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType.isBooleanValue) {\n            expr = this.makeIsTrueish(expr, Type.f32, reportNode);\n          } else if (toType.isSignedIntegerValue) {\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType.isBooleanValue) {\n            expr = this.makeIsTrueish(expr, Type.f64, reportNode);\n          } else if (toType.isSignedIntegerValue) {\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.isIntegerValue && toType.isFloatValue) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.isLongIntegerValue) {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.isLongIntegerValue) {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.isLongIntegerValue) {\n\n        // i64 to i32 or smaller\n        if (toType.isBooleanValue) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n        } else if (!toType.isLongIntegerValue) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.isLongIntegerValue) {\n        expr = module.unary(\n          fromType.isSignedIntegerValue ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.isShortIntegerValue) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n          }\n        // same size\n        } else {\n          if (!explicit && !this.options.isWasm64 && fromType.isVaryingIntegerValue && !toType.isVaryingIntegerValue) {\n            this.warning(\n              DiagnosticCode.Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit,\n              reportNode.range, fromType.toString(), toType.toString()\n            );\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return expr;\n  }\n\n  private compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          uniqueMap(flow.contextualTypeArguments)\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, type, expression);\n        }\n        this.currentType = type.nonNullableType;\n        return expr;\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let operand = expression.expression;\n        // if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.ARRAY) {\n        //   let element = this.resolver.lookupExpression(expression /* ! */, this.currentFlow, contextualType);\n        //   if (!element) return this.module.unreachable();\n        //   if (element.kind == ElementKind.CLASS) {\n        //     let arrayInstance = <Class>element;\n        //     if (arrayInstance.extends(this.program.readonlyArrayPrototype)) {\n        //       return this.compileStaticArrayLiteral(<ArrayLiteralExpression>operand, arrayInstance.type, constraints);\n        //     }\n        //   }\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          expression.range,\n          \"Const assertion\"\n        );\n        return this.module.unreachable();\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n  private i32PowInstance: Function | null = null;\n  private i64PowInstance: Function | null = null;\n\n  private compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.LT);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType || !commonType.isNumericValue) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeLt(leftExpr, rightExpr, commonType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.GT);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType || !commonType.isNumericValue) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeGt(leftExpr, rightExpr, commonType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.LE);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType || !commonType.isNumericValue) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeLe(leftExpr, rightExpr, commonType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.GE);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType || !commonType.isNumericValue) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeGe(leftExpr, rightExpr, commonType);\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (operator == Token.EQUALS_EQUALS) { // can't overload '==='\n          let classReference = leftType.getClassOrWrapper(this.program);\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // fall back to compare by value\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeEq(leftExpr, rightExpr, commonType, expression);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS) { // can't overload '!=='\n          let classReference = leftType.getClass();\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // fall back to compare by value\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeNe(leftExpr, rightExpr, commonType, expression);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.ADD);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"+\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeAdd(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.SUB);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeSub(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.MUL);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"*\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeMul(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.POW);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"**\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"**\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makePow(leftExpr, rightExpr, commonType, expression);\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.DIV);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"/\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeDiv(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.REM);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"%\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeRem(leftExpr, rightExpr, commonType, expression);\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isIntegerValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return module.unreachable();\n        }\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n\n        expr = this.makeShl(leftExpr, rightExpr, rightType);\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isIntegerValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n\n        expr = this.makeShr(leftExpr, rightExpr, rightType);\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isIntegerValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return module.unreachable();\n        }\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n\n        expr = this.makeShru(leftExpr, rightExpr, rightType);\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeAnd(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeOr(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeXor(leftExpr, rightExpr, commonType);\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints);\n          rightType = this.currentType;\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType, left),\n            this.makeIsTrueish(rightExpr, rightType, right),\n            module.i32(0)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInElse = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInElse = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr, rightType);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType()),\n                  leftType\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType, left),\n              rightExpr,\n              retainLeftInElse\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType()),\n                    leftType\n                  )\n                : module.local_get(temp.index, leftType.toNativeType())\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, this.currentType, left),\n                rightExpr,\n                expr\n              );\n\n            // if not possible, tee left to a temp\n            } else {\n              let tempLocal = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType, left),\n                rightExpr,\n                module.local_get(tempLocal.index, leftType.toNativeType())\n              );\n              flow.freeTempLocal(tempLocal);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints);\n          rightType = this.currentType;\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType, left),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType, right)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInThen = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInThen = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr, rightType);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n              // TODO: usually, false'ish means left is null, but this might not hold\n              // once implicit conversion with strings is performed and left is \"\", so:\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType()),\n                  leftType\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType, left),\n              retainLeftInThen\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType()),\n                    leftType\n                  )\n                : module.local_get(temp.index, leftType.toNativeType()),\n              rightExpr\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, leftType, left),\n                expr,\n                rightExpr\n              );\n\n            // if not possible, tee left to a temp. local\n            } else {\n              let temp = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(temp.index, leftExpr), leftType, left),\n                module.local_get(temp.index, leftType.toNativeType()),\n                rightExpr\n              );\n              flow.freeTempLocal(temp);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target);\n    if (!targetType) targetType = Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      this.currentType,\n      right,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  makeLt(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.LtI64\n            : BinaryOp.LtI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.LtU64\n            : BinaryOp.LtU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeGt(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.GtI64\n            : BinaryOp.GtI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.GtU64\n            : BinaryOp.GtU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeLe(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.LeI64\n            : BinaryOp.LeI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.LeU64\n            : BinaryOp.LeU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeGe(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.GeI64\n            : BinaryOp.GeI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.GeU64\n            : BinaryOp.GeU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeEq(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    // Cares about garbage bits\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.EqI64\n            : BinaryOp.EqI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n      }\n      case TypeKind.V128: {\n        return module.unary(UnaryOp.AllTrueI8x16,\n          module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n        );\n      }\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.EXNREF:\n      case TypeKind.ANYREF: {\n        this.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.range,\n          \"ref.eq\",\n          type.toString()\n        );\n        return module.unreachable();\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeNe(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    // Cares about garbage bits\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n      }\n      case TypeKind.V128: {\n        return module.unary(UnaryOp.AnyTrueI8x16,\n          module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n        );\n      }\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.EXNREF:\n      case TypeKind.ANYREF: {\n        this.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.range,\n          \"ref.eq\",\n          type.toString()\n        );\n        return module.unreachable();\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeAdd(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL:\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.AddI64\n            : BinaryOp.AddI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeSub(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL:\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.SubI64\n            : BinaryOp.SubI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeMul(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL:\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.MulI64\n            : BinaryOp.MulI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makePow(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    // Cares about garbage bits\n    let module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL: {\n        return module.select(\n          module.i32(1),\n          module.binary(BinaryOp.EqI32, rightExpr, module.i32(0)),\n          leftExpr\n        );\n      }\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        let instance = this.i32PowInstance;\n        if (!instance) {\n          let prototype = this.program.lookupGlobal(CommonNames.ipow32);\n          if (!prototype) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"ipow32\"\n            );\n            return module.unreachable();\n          }\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.i32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        let expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n        if (type.size < 32) {\n          // TODO: this is necessary because i32PowInstance is generic, and deals with 32-bit integers,\n          // so its flow does not indicate whether returned SMIs are wrapped. worth to avoid?\n          expr = this.ensureSmallIntegerWrap(expr, type);\n        }\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let instance = this.i64PowInstance;\n        if (!instance) {\n          let prototype = this.program.lookupGlobal(CommonNames.ipow64);\n          if (!prototype) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"ipow64\"\n            );\n            return module.unreachable();\n          }\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.i64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let isWasm64 = this.options.isWasm64;\n        let instance = isWasm64 ? this.i64PowInstance : this.i32PowInstance;\n        if (!instance) {\n          let prototype = this.program.lookupGlobal(isWasm64 ? CommonNames.ipow64 : CommonNames.ipow32);\n          if (!prototype) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, isWasm64 ? \"ipow64\" : \"ipow32\"\n            );\n            return module.unreachable();\n          }\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          if (isWasm64) {\n            this.i64PowInstance = instance;\n          } else {\n            this.i32PowInstance = instance;\n          }\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n      case TypeKind.F32: {\n        let instance = this.f32PowInstance;\n        if (!instance) {\n          let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n          if (!namespace) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Mathf\"\n            );\n            return module.unreachable();\n          }\n          let namespaceMembers = namespace.members;\n          if (!namespaceMembers || !namespaceMembers.has(CommonNames.pow)) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Mathf.pow\"\n            );\n            return module.unreachable();\n          }\n          let prototype = assert(namespaceMembers.get(CommonNames.pow));\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n      // Math.pow otherwise (result is f64)\n      case TypeKind.F64: {\n        let instance = this.f64PowInstance;\n        if (!instance) {\n          let namespace = this.program.lookupGlobal(CommonNames.Math);\n          if (!namespace) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Math\"\n            );\n            return module.unreachable();\n          }\n          let namespaceMembers = namespace.members;\n          if (!namespaceMembers || !namespaceMembers.has(CommonNames.pow)) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Math.pow\"\n            );\n            return module.unreachable();\n          }\n          let prototype = assert(namespaceMembers.get(CommonNames.pow));\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeDiv(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.DivI64\n            : BinaryOp.DivI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.DivU64\n            : BinaryOp.DivU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeRem(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.RemI64\n            : BinaryOp.RemI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.RemU64\n            : BinaryOp.RemU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        let instance = this.f32ModInstance;\n        if (!instance) {\n          let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n          if (!namespace) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Mathf\"\n            );\n            return module.unreachable();\n          }\n          let namespaceMembers = namespace.members;\n          if (!namespaceMembers || !namespaceMembers.has(CommonNames.mod)) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Mathf.mod\"\n            );\n            return module.unreachable();\n          }\n          let prototype = assert(namespaceMembers.get(CommonNames.mod));\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n      case TypeKind.F64: {\n        let instance = this.f64ModInstance;\n        if (!instance) {\n          let namespace = this.program.lookupGlobal(CommonNames.Math);\n          if (!namespace) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Math\"\n            );\n            return module.unreachable();\n          }\n          let namespaceMembers = namespace.members;\n          if (!namespaceMembers || !namespaceMembers.has(CommonNames.mod)) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Math.mod\"\n            );\n            return module.unreachable();\n          }\n          let prototype = assert(namespaceMembers.get(CommonNames.mod));\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeShl(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits on the RHS, but only for types smaller than 5 bits\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL: return leftExpr;\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // leftExpr << (rightExpr & (7|15))\n        return module.binary(\n          BinaryOp.ShlI32,\n          leftExpr,\n          module.binary(BinaryOp.AndI32, rightExpr, module.i32(type.size - 1))\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.ShlI64\n            : BinaryOp.ShlI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeShr(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits on the LHS, but on the RHS only for types smaller than 5 bits,\n    // and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL: return leftExpr;\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        // leftExpr >> (rightExpr & (7|15))\n        return module.binary(\n          BinaryOp.ShrI32,\n          this.ensureSmallIntegerWrap(leftExpr, type),\n          module.binary(BinaryOp.AndI32, rightExpr, module.i32(type.size - 1))\n        );\n      }\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // leftExpr >>> (rightExpr & (7|15))\n        return module.binary(\n          BinaryOp.ShrU32,\n          this.ensureSmallIntegerWrap(leftExpr, type),\n          module.binary(BinaryOp.AndI32, rightExpr, module.i32(type.size - 1))\n        );\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.ShrI64\n            : BinaryOp.ShrI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.ShrU64\n            : BinaryOp.ShrU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeShru(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits on the LHS, but on the RHS only for types smaller than 5 bits\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL: return leftExpr;\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // leftExpr >>> (rightExpr & (7|15))\n        return module.binary(\n          BinaryOp.ShrU32,\n          this.ensureSmallIntegerWrap(leftExpr, type),\n          module.binary(BinaryOp.AndI32, rightExpr, module.i32(type.size - 1))\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.ShrU64\n            : BinaryOp.ShrU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeAnd(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.AndI64\n            : BinaryOp.AndI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeOr(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.OrI64\n            : BinaryOp.OrI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeXor(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.XorI64\n            : BinaryOp.XorI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  private compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  private compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  private compileAssignment(\n    expression: Expression,\n    valueExpression: Expression,\n    contextualType: Type\n  ): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        if (this.pendingElements.has(target)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            target.internalName\n          );\n          return this.module.unreachable();\n        }\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>target;\n        let propertyInstance = resolver.resolveProperty(propertyPrototype);\n        if (!propertyInstance) return this.module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, propertyInstance.internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, classInstance.internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, classInstance.internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        if (!isUnchecked && this.options.pedantic) {\n          this.pedantic(\n            DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n            expression.range\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, Constraints.WILL_RETAIN);\n    var valueType = this.currentType;\n    return this.makeAssignment(\n      target,\n      this.convertExpression(valueExpr, valueType, targetType, false, valueExpression),\n      valueType,\n      valueExpression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Value expression type. */\n    valueType: Type,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        if (flow.isLocalFlag(local.index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? local.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(local, valueExpr, valueType, tee);\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? global.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(global, valueExpr, valueType, tee);\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let initializerNode = fieldInstance.initializerNode;\n        let isConstructor = flow.actualFunction.is(CommonFlags.CONSTRUCTOR);\n\n        // Cannot assign to readonly fields except in constructors if there's no initializer\n        if (fieldInstance.is(CommonFlags.READONLY)) {\n          if (!isConstructor || initializerNode !== null) {\n            this.error(\n              DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n              valueExpression.range, fieldInstance.internalName\n            );\n            return module.unreachable();\n          }\n        }\n\n        // Mark initialized fields in constructors\n        thisExpression = assert(thisExpression);\n        if (isConstructor && thisExpression.kind == NodeKind.THIS) {\n          flow.setThisFieldFlag(fieldInstance, FieldFlags.INITIALIZED);\n        }\n\n        let fieldParent = fieldInstance.parent;\n        assert(fieldParent.kind == ElementKind.CLASS);\n        return this.makeFieldAssignment(fieldInstance,\n          valueExpr,\n          valueType,\n          this.compileExpression(\n            thisExpression,\n            (<Class>fieldParent).type,\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          ),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        let valueType = setterInstance.signature.parameterTypes[0];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        if (propertyInstance.is(CommonFlags.INSTANCE)) {\n          let thisType = assert(setterInstance.signature.thisType);\n          let thisExpr = this.compileExpression(\n            assert(thisExpression),\n            thisType,\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n          if (!tee) return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n          let getterInstance = assert((<Property>target).getterInstance);\n          assert(getterInstance.signature.thisType == thisType);\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          let tempThis = flow.getTempLocal(returnType);\n          let ret = module.block(null, [\n            this.makeCallDirect(setterInstance, [\n              module.local_tee(tempThis.index, thisExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(getterInstance, [\n              module.local_get(tempThis.index, nativeReturnType)\n            ], valueExpression)\n          ], nativeReturnType);\n          flow.freeTempLocal(tempThis);\n          return ret;\n        } else {\n          if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n          let getterInstance = assert((<Property>target).getterInstance);\n          return module.block(null, [\n            this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n            this.makeCallDirect(getterInstance, null, valueExpression)\n          ], getterInstance.signature.returnType.toNativeType());\n        }\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        assert(classInstance.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let getterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!getterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, classInstance.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, classInstance.internalName\n          );\n          this.currentType = tee ? getterInstance.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 2);\n        let valueType = setterInstance.signature.parameterTypes[1];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        let thisExpr = this.compileExpression(\n          assert(thisExpression),\n          classInstance.type,\n          Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n        );\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        if (tee) {\n          let tempTarget = flow.getTempLocal(classInstance.type);\n          let tempElement = flow.getTempLocal(this.currentType);\n          let returnType = getterInstance.signature.returnType;\n          flow.freeTempLocal(tempTarget);\n          let ret = module.block(null, [\n            this.makeCallDirect(setterInstance, [\n              module.local_tee(tempTarget.index, thisExpr),\n              module.local_tee(tempElement.index, elementExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(getterInstance, [\n              module.local_get(tempTarget.index, tempTarget.type.toNativeType()),\n              module.local_get(tempElement.index, tempElement.type.toNativeType())\n            ], valueExpression)\n          ], returnType.toNativeType());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(setterInstance, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** Local to assign to. */\n    local: Local,\n    /** Value to assign. */\n    valueExpr: ExpressionRef,\n    /** Value type. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var type = local.type;\n    assert(type != Type.void);\n    var localIndex = local.index;\n\n    if (type.isNullableReference) {\n      if (!valueType.isNullableReference || flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.INITIALIZED);\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        valueExpr = this.makeReplace(\n          valueExpr,\n          valueType,\n          module.local_get(localIndex, type.toNativeType()),\n          type,\n          alreadyRetained\n        );\n        if (tee) { // local = REPLACE(local, value)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = REPLACE(local, value))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!alreadyRetained) valueExpr = this.makeRetain(valueExpr, valueType);\n        if (tee) { // local = __retain(value, local)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = __retain(value, local))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.isShortIntegerValue) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // local = value\n        this.currentType = type;\n        return module.local_tee(localIndex, valueExpr);\n      } else { // void(local = value)\n        this.currentType = Type.void;\n        return module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global variable to assign to. */\n    global: VariableLikeElement,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The type of the value to assign. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      valueExpr = module.global_set(global.internalName,\n        this.makeReplace(\n          valueExpr,\n          valueType,\n          module.global_get(global.internalName, nativeType),\n          type,\n          alreadyRetained\n        )\n      );\n      if (tee) { // (global = REPLACE(global, value))), global\n        this.currentType = type;\n        return module.block(null, [\n          valueExpr,\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = REPLACE(global, value)\n        this.currentType = Type.void;\n        return valueExpr;\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  private makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The type of the value to assign. */\n    valueType: Type,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (!field.is(CommonFlags.COMPILED)) {\n      field.set(CommonFlags.COMPILED);\n      let typeNode = field.typeNode;\n      if (typeNode) this.checkTypeSupported(field.type, typeNode);\n    }\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType, findUsedLocals(valueExpr));\n      // set before and read after valueExpr executes below ^\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      let ret: ExpressionRef;\n      if (tee) { // ((t1 = this).field = REPLACE(t1.field, t2 = value)), t2\n        let tempValue = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeReplace(\n              module.local_tee(tempValue.index, valueExpr),\n              valueType,\n              module.load(fieldType.byteSize, fieldType.isSignedIntegerValue,\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              fieldType,\n              alreadyRetained\n            ),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(tempValue);\n        this.currentType = fieldType;\n      } else { // (t1 = this).field = REPLACE(t1.field, value)\n        ret = module.store(fieldType.byteSize,\n          module.local_tee(tempThis.index, thisExpr),\n          this.makeReplace(\n            valueExpr,\n            valueType,\n            module.load(fieldType.byteSize, fieldType.isSignedIntegerValue,\n              module.local_get(tempThis.index, nativeThisType),\n              nativeFieldType, field.memoryOffset\n            ),\n            fieldType,\n            alreadyRetained\n          ),\n          nativeFieldType, field.memoryOffset\n        );\n        this.currentType = Type.void;\n      }\n      flow.freeTempLocal(tempThis);\n      return ret;\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let temp = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n        let ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(temp.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(temp.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(temp);\n        this.currentType = fieldType;\n        return ret;\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  private compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let parent = assert(actualFunction.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let baseClassInstance = assert(classInstance.base);\n      let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      let baseCtorInstance = this.ensureConstructor(baseClassInstance, expression);\n      this.checkFieldInitialization(baseClassInstance, expression);\n      let superCall = this.compileCallDirect(\n        baseCtorInstance,\n        expression.args,\n        expression,\n        module.local_get(thisLocal.index, nativeSizeType),\n        Constraints.WILL_RETAIN\n      );\n      assert(baseClassInstance.type.isUnmanaged || this.skippedAutoreleases.has(superCall)); // guaranteed\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ACCESSES_THIS |\n        FlowFlags.CONDITIONALLY_ACCESSES_THIS\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ACCESSES_THIS | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.local_set(thisLocal.index, superCall);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n    var thisExpression = this.resolver.currentThisExpression;\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        if (functionPrototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          // builtins handle present respectively omitted type arguments on their own\n          return this.compileCallExpressionBuiltin(functionPrototype, expression, contextualType);\n        }\n        let functionInstance = this.resolver.maybeInferCall(expression, functionPrototype, flow);\n        if (!functionInstance) return this.module.unreachable();\n        target = functionInstance;\n        // fall-through\n      }\n      case ElementKind.FUNCTION: {\n        let functionInstance = <Function>target;\n        let thisArg: ExpressionRef = 0;\n        if (functionInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(functionInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n        }\n        return this.compileCallDirect(\n          functionInstance,\n          expression.args,\n          expression,\n          thisArg,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        signature = local.type.signatureReference;\n        if (signature) {\n          if (local.is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low(local.constantIntegerValue));\n          } else {\n            indexArg = module.local_get(local.index, NativeType.I32);\n          }\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, local.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        signature = global.type.signatureReference;\n        if (signature) {\n          indexArg = module.global_get(global.internalName, global.type.toNativeType());\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, global.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        signature = fieldType.signatureReference;\n        if (signature) {\n          let fieldParent = fieldInstance.parent;\n          assert(fieldParent.kind == ElementKind.CLASS);\n          indexArg = module.load(4, false,\n            this.compileExpression(\n              assert(thisExpression),\n              (<Class>fieldParent).type,\n              Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n            ),\n            NativeType.I32,\n            fieldInstance.memoryOffset\n          );\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, fieldType.toString()\n        );\n        return module.unreachable();\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>target);\n        if (!propertyInstance) return module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance);\n        let thisArg: ExpressionRef = 0;\n        if (propertyInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(getterInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n        }\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression, thisArg);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let classInstance = <Class>target;\n        let typeArguments = classInstance.getTypeArgumentsTo(this.program.functionPrototype);\n        if (typeArguments !== null && typeArguments.length > 0) {\n          let ftype = typeArguments[0];\n          signature = ftype.getSignature();\n          indexArg = this.compileExpression(expression.expression, ftype, Constraints.CONV_IMPLICIT);\n          break;\n        }\n        // fall-through\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      assert(signature), // FIXME: bootstrap can't see this yet\n      indexArg,\n      expression.args,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        uniqueMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n    var callee = expression.expression;\n    var ctx = new BuiltinContext(\n      this,\n      prototype,\n      typeArguments,\n      expression.args,\n      callee.kind == NodeKind.PROPERTYACCESS\n        ? (<PropertyAccessExpression>callee).expression\n        : null,\n      contextualType,\n      expression,\n      false\n    );\n    // global builtins\n    var internalName = prototype.internalName;\n    if (builtins.has(internalName)) {\n      let fn = assert(builtins.get(internalName));\n      return fn(ctx);\n    }\n    // class builtins\n    var parent = prototype.parent;\n    if (parent.kind == ElementKind.CLASS) {\n      let classPrototype = (<Class>parent).prototype;\n      if (classPrototype == this.program.functionPrototype) {\n        let methodName = prototype.name;\n        if (function_builtins.has(methodName)) {\n          let fn = assert(function_builtins.get(methodName));\n          return fn(ctx);\n        }\n      }\n    }\n    assert(false);\n    return this.module.unreachable();\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        reportNode.range,\n        \"Rest parameters\"\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node, relatedReportNode: Node | null = null): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      if (relatedReportNode) {\n        this.errorRelated(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range, relatedReportNode.range\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range\n        );\n      }\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // handle call on `this` in constructors\n    let actualFunction = this.currentFlow.actualFunction;\n    if (actualFunction.is(CommonFlags.CONSTRUCTOR) && reportNode.isAccessOnThis) {\n      let parent = actualFunction.parent;\n      assert(parent.kind == ElementKind.CLASS);\n      this.checkFieldInitialization(<Class>parent, reportNode);\n    }\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE) && (!instance.is(CommonFlags.VIRTUAL) || reportNode.isAccessOnSuper)) {\n      assert(!instance.is(CommonFlags.STUB)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, instance.signature.returnType, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        inlineStack.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(instance.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr, paramType);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonNames.this_, thisType, usedLocals);\n      // In normal instance functions, `this` is effectively a constant\n      // retained elsewhere so does not need to be retained.\n      if (instance.is(CommonFlags.CONSTRUCTOR)) {\n        // Constructors, however, can allocate their own memory, and as such\n        // must refcount the allocation in case something else is `return`ed.\n        flow.setLocalFlag(thisLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let base = classInstance.base;\n      if (base) flow.addScopedAlias(CommonNames.super_, base.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n      );\n      let argumentLocal = flow.addScopedLocal(instance.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr, initType);\n      }\n      body.push(\n        module.local_set(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // If a constructor, perform field init checks on its flow directly\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let parent = instance.parent;\n      assert(parent.kind == ElementKind.CLASS);\n      this.checkFieldInitializationInFlow(<Class>parent, flow);\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr, returnType);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Makes sure that the arguments length helper global is present. */\n  ensureArgumentsLength(): void {\n    if (!this.builtinArgumentsLength) {\n      let module = this.module;\n      this.builtinArgumentsLength = module.addGlobal(BuiltinNames.argumentsLength, NativeType.I32, true, module.i32(0));\n    }\n  }\n\n  /** Ensures compilation of the varargs stub for the specified function. */\n  ensureVarargsStub(original: Function): Function {\n    // A varargs stub is a function called with omitted arguments being zeroed,\n    // reading the `argumentsLength` helper global to decide which initializers\n    // to inject before calling the original function. It is typically attempted\n    // to circumvent the varargs stub where possible, for example where omitted\n    // arguments are constants and can be inlined into the original call.\n    var stub = original.varargsStub;\n    if (stub) return stub;\n\n    var originalSignature = original.signature;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the varargs stub\n    stub = original.newStub(\"varargs\");\n    stub.signature.requiredParameters = maxArguments;\n    original.varargsStub = stub;\n\n    // compile initializers of omitted arguments in the scope of the stub,\n    // accounting for additional locals and a proper `this` context.\n    var previousFlow = this.currentFlow;\n    var flow = stub.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString();\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString() + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinNames.argumentsLength, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinNames.argumentsLength, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(original.internalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      stub.internalName,\n      stub.signature.nativeParams,\n      stub.signature.nativeResults,\n      typesToNativeTypes(stub.additionalLocals),\n      module.flatten(stmts, returnType.toNativeType())\n    );\n    stub.set(CommonFlags.COMPILED);\n    stub.finalize(module, funcRef);\n    return stub;\n  }\n\n  /** Ensures compilation of the virtual stub for the specified function. */\n  ensureVirtualStub(original: Function): Function {\n    // A virtual stub is a function redirecting virtual calls to the actual\n    // overload targeted by the call. It utilizes varargs stubs where necessary\n    // and as such has the same semantics as one. Here, we only make sure that\n    // a placeholder exist, with actual code being generated as a finalization\n    // step once module compilation is otherwise complete.\n    var stub = original.virtualStub;\n    if (stub) return stub;\n    stub = original.newStub(\"virtual\");\n    original.virtualStub = stub;\n    var module = this.module;\n    stub.ref = module.addFunction(\n      stub.internalName,\n      stub.signature.nativeParams,\n      stub.signature.nativeResults,\n      null,\n      module.unreachable()\n    );\n    this.virtualCalls.add(original);\n    return stub;\n  }\n\n  /** Finalizes the virtual stub of the specified function. */\n  private finalizeVirtualStub(instance: Function): void {\n    var stub = this.ensureVirtualStub(instance);\n    if (stub.is(CommonFlags.COMPILED)) return;\n\n    // Wouldn't be here if there wasn't at least one overload\n    var overloadPrototypes = assert(instance.prototype.overloads);\n\n    var module = this.module;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var parameterTypes = instance.signature.parameterTypes;\n    var returnType = instance.signature.returnType;\n    var numParameters = parameterTypes.length;\n    var tempIndex = 1 + parameterTypes.length; // incl. `this`\n\n    // Switch over this's rtId and map it to the respective overload\n    var builder = new SwitchBuilder(this.module,\n      module.load(4, false,\n        module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.SubI64\n            : BinaryOp.SubI32,\n          module.local_get(0, nativeSizeType),\n          nativeSizeType == NativeType.I64\n            ? module.i64(8) // rtId offset = -8\n            : module.i32(8)\n        ),\n        NativeType.I32\n      )\n    );\n\n    // A method's `overloads` property contains its unbound overload prototypes\n    // so we first have to find the concrete classes it became bound to, obtain\n    // their bound prototypes and make sure these are resolved and compiled as\n    // we are going to call them conditionally based on this's class id.\n    for (let _values = Set_values(overloadPrototypes), i = 0, k = _values.length; i < k; ++i) {\n      let unboundOverloadPrototype = _values[i];\n      assert(!unboundOverloadPrototype.isBound);\n      let unboundOverloadParent = unboundOverloadPrototype.parent;\n      let isProperty = unboundOverloadParent.kind == ElementKind.PROPERTY_PROTOTYPE;\n      let classInstances: Map<string,Class> | null;\n      if (isProperty) {\n        let propertyParent = (<PropertyPrototype>unboundOverloadParent).parent;\n        assert(propertyParent.kind == ElementKind.CLASS_PROTOTYPE);\n        classInstances = (<ClassPrototype>propertyParent).instances;\n      } else {\n        assert(unboundOverloadParent.kind == ElementKind.CLASS_PROTOTYPE);\n        classInstances = (<ClassPrototype>unboundOverloadParent).instances;\n      }\n      if (classInstances) {\n        for (let _values = Map_values(classInstances), j = 0, l = _values.length; j < l; ++j) {\n          let classInstance = _values[j];\n          let overloadInstance: Function | null;\n          if (isProperty) {\n            let boundProperty = assert(classInstance.members!.get(unboundOverloadParent.name));\n            assert(boundProperty.kind == ElementKind.PROPERTY_PROTOTYPE);\n            let boundPropertyInstance = this.resolver.resolveProperty(<PropertyPrototype>boundProperty);\n            if (!boundPropertyInstance) continue;\n            if (instance.is(CommonFlags.GET)) {\n              overloadInstance = boundPropertyInstance.getterInstance;\n            } else {\n              assert(instance.is(CommonFlags.SET));\n              overloadInstance = boundPropertyInstance.setterInstance;\n            }\n          } else {\n            let boundPrototype = assert(classInstance.members!.get(unboundOverloadPrototype.name));\n            assert(boundPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            overloadInstance = this.resolver.resolveFunction(<FunctionPrototype>boundPrototype, instance.typeArguments);\n          }\n          if (!overloadInstance || !this.compileFunction(overloadInstance)) continue;\n          let overloadType = overloadInstance.type;\n          let originalType = instance.type;\n          if (!overloadType.isAssignableTo(originalType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              overloadInstance.identifierNode.range, overloadType.toString(), originalType.toString()\n            );\n            continue;\n          }\n          // TODO: additional optional parameters are not permitted by `isAssignableTo` yet\n          let overloadSignature = overloadInstance.signature;\n          let overloadParameterTypes = overloadSignature.parameterTypes;\n          let overloadNumParameters = overloadParameterTypes.length;\n          let paramExprs = new Array<ExpressionRef>(1 + overloadNumParameters);\n          paramExprs[0] = module.local_get(0, nativeSizeType); // this\n          for (let n = 1; n <= numParameters; ++n) {\n            paramExprs[n] = module.local_get(n, parameterTypes[n - 1].toNativeType());\n          }\n          let needsVarargsStub = false;\n          for (let n = numParameters; n < overloadNumParameters; ++n) {\n            // TODO: inline constant initializers and skip varargs stub\n            paramExprs[1 + n] = this.makeZero(overloadParameterTypes[n], overloadInstance.declaration);\n            needsVarargsStub = true;\n          }\n          let calledName = needsVarargsStub\n            ? this.ensureVarargsStub(overloadInstance).internalName\n            : overloadInstance.internalName;\n          let nativeReturnType = overloadSignature.returnType.toNativeType();\n          let stmts = new Array<ExpressionRef>();\n          if (needsVarargsStub) {\n            this.ensureArgumentsLength();\n            // Safe to prepend since paramExprs are local.get's\n            stmts.push(module.global_set(BuiltinNames.argumentsLength, module.i32(numParameters)));\n          }\n          if (returnType == Type.void) {\n            stmts.push(\n              module.call(calledName, paramExprs, nativeReturnType)\n            );\n            stmts.push(\n              module.return()\n            );\n          } else {\n            stmts.push(\n              module.return(\n                module.call(calledName, paramExprs, nativeReturnType)\n              )\n            );\n          }\n          builder.addCase(classInstance.id, stmts);\n          // Also alias each extendee inheriting this exact overload\n          let extendees = classInstance.getAllExtendees(\n            isProperty\n              ? unboundOverloadParent.name\n              : instance.prototype.name\n          );\n          for (let _values = Set_values(extendees), a = 0, b = _values.length; a < b; ++a) {\n            let extendee = _values[a];\n            builder.addCase(extendee.id, stmts);\n          }\n        }\n      }\n    }\n\n    // Call the original function if no other id matches and the method is not\n    // abstract or part of an interface. Note that doing so will not catch an\n    // invalid id, but can reduce code size significantly since we also don't\n    // have to add branches for extendees inheriting the original function.\n    var body: ExpressionRef;\n    if (instance.prototype.bodyNode) {\n      let paramExprs = new Array<ExpressionRef>(numParameters);\n      paramExprs[0] = module.local_get(0, nativeSizeType); // this\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        paramExprs[1 + i] = module.local_get(1 + i, parameterTypes[i].toNativeType());\n      }\n      body = module.call(instance.internalName, paramExprs, returnType.toNativeType());\n\n    // Otherwise trap\n    } else {\n      body = module.unreachable();\n    }\n\n    // Create the virtual stub function\n    var ref = stub.ref;\n    if (ref) module.removeFunction(stub.internalName);\n    stub.ref = module.addFunction(\n      stub.internalName,\n      stub.signature.nativeParams,\n      stub.signature.nativeResults,\n      [ NativeType.I32 ],\n      module.block(null, [\n        builder.render(tempIndex),\n        body\n      ], returnType.toNativeType())\n    );\n    stub.set(CommonFlags.COMPILED);\n  }\n\n  // <reference-counting>\n\n  /** Makes a retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef, type: Type): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef, type: Type): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes a replace, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeReplace(\n    /** New value being assigned. */\n    newExpr: ExpressionRef,\n    /** The type of the new expression. */\n    newType: Type,\n    /** Old value being replaced. */\n    oldExpr: ExpressionRef,\n    /** The type of the old expression. */\n    oldType: Type,\n    /** Whether the new value is already retained. */\n    alreadyRetained: bool = false,\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var nativeSizeType = this.options.nativeSizeType;\n    if (alreadyRetained) {\n      // (t1=newExpr), __release(oldExpr), t1\n      // it is important that `newExpr` evaluates before `oldExpr` is released, hence the local\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(oldExpr));\n      let ret = module.block(null, [\n        module.local_set(temp.index, newExpr),\n        this.makeRelease(oldExpr, oldType),\n        module.local_get(temp.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else {\n      // if ((t1=newExpr) != (t2=oldExpr)) {\n      //   t1 = __retain(t1);\n      //   __release(t2);\n      // }, t1\n      let usizeType = this.options.usizeType;\n      let temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n      let temp2 = flow.getTempLocal(usizeType);\n      let ret = module.block(null, [\n        module.if(\n          module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            module.local_tee(temp1.index, newExpr),\n            module.local_tee(temp2.index, oldExpr)\n          ),\n          module.block(null, [\n            module.local_set(temp1.index,\n              this.makeRetain(module.local_get(temp1.index, nativeSizeType), newType)\n            ),\n            this.makeRelease(module.local_get(temp2.index, nativeSizeType), oldType)\n          ])\n        ),\n        module.local_get(temp1.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n\n  /** Makes an autorelease call at the end of the specified `flow`. */\n  makeAutorelease(\n    /** Expression to autorelease. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Flow that should autorelease. Defaults to the current flow. */\n    flow: Flow = this.currentFlow\n  ): ExpressionRef {\n    // An 'autorelease' is the assignment of a managed reference to a temporary local,\n    // keeping the reference alive until the surrounding flow concludes. This is useful\n    // if a reference is not being immediately assigned to something that would keep it\n    // alive, like a local or a global, yet it'll remain alive in other code. Example:\n    //\n    //   callReceivingAReference(callReturningAReference())\n    //\n    // will be transformed into an autorelease like\n    //\n    //   callReceivingAReference(t = callReturningAReference())\n    //   ...\n    //   __release(t)\n    //\n    // since releasing immediately would free the value before the call:\n    //\n    //   callReceivingAReference((__release(t = callReturningAReference()), t))\n    //\n    var local = flow.getAutoreleaseLocal(type);\n    if (flow.isNonnull(expr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n    return this.module.local_tee(local.index, expr);\n  }\n\n  /**\n   * Attempts to undo an autorelease in the specified `flow`.\n   * Returns the index of the previously retaining variable or -1 if not possible.\n   */\n  tryUndoAutorelease(\n    /** Expression being autoreleased. */\n    expr: ExpressionRef,\n    /** Flow that would autorelease. */\n    flow: Flow\n  ): i32 {\n    // The following assumes that the expression actually belongs to the flow and that\n    // top-level autoreleases are never undone. While that's true, it's not necessary\n    // to check presence in scopedLocals.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalGet: { // local.get(idx)\n        let index = getLocalGetIndex(expr);\n        if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n          return index;\n        }\n        break;\n      }\n      case ExpressionId.LocalSet: { // local.tee(idx, expr)\n        if (isLocalTee(expr)) {\n          // NOTE: Can't remove the local.tee completely because it's already compiled\n          // and a child of something else. Preventing the final release however makes\n          // it optimize away.\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.get|tee(...) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.tryUndoAutorelease(getBlockChildAt(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /** Delays an autorelease in `innerFlow` until `outerFlow` concludes. */\n  delayAutorelease(\n    /** Expression being autoreleased in `innerFlow`. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Inner flow that would autorelease. Must not have processed autoreleases yet. */\n    innerFlow: Flow,\n    /** Outer flow that should autorelease instead. */\n    outerFlow: Flow\n  ): ExpressionRef {\n    // Attempt to undo the autorelease in `innerFlow`\n    var index = this.tryUndoAutorelease(expr, innerFlow);\n    return ~index\n      // If it worked, autorelease in `outerFlow` instead\n      ? this.makeAutorelease(expr, type, outerFlow)\n      // If it didn't work, extend the lifetime into `outerFlow`\n      : this.makeAutorelease(this.makeRetain(expr, type), type, outerFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[],\n    /**\n     * Whether to finalize affected locals. Defaults to `true`, which\n     * is almost always correct, except when bubbling up parent flows\n     * in break-like scenarios.\n     */\n    finalize: bool = true\n  ): void {\n    // Autoreleases must be performed whenever a flow concludes, decrementing\n    // the RC of all the references in that flow scheduled for an autorelease.\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (finalize) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType()),\n                local.type\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the given value. */\n  performAutoreleasesWithValue(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Value to return. */\n    valueExpr: ExpressionRef,\n    /** Type of the returned value. */\n    valueType: Type,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[] | null = null,\n    /** Whether to finalize affected locals. */\n    finalize: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, finalize);\n    var module = this.module;\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      let ret = module.flatten(stmts, nativeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return module.flatten(stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    // Differs from `performAutoreleases` in that concluding this flow also\n    // concludes all its parent flows, for example on a `return`.\n    if (flow.isInline) {\n      // Traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead of all the locals.\n      let current = flow;\n      let parent: Flow | null;\n      while (parent = current.parent) current = parent;\n      let scopedLocals = current.scopedLocals;\n      if (scopedLocals) {\n        // TODO: for (let local of scopedLocals.values()) {\n        for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n          let local = unchecked(_values[i]);\n          this.maybeFinishAutorelease(local, flow, stmts);\n        }\n      }\n    } else {\n      let localsByIndex = flow.parentFunction.localsByIndex;\n      for (let i = 0, k = localsByIndex.length; i < k; ++i) {\n        let local = unchecked(localsByIndex[i]);\n        this.maybeFinishAutorelease(local, flow, stmts);\n      }\n    }\n  }\n\n  /** Finishes a single autorelease of the specified local. */\n  private maybeFinishAutorelease(\n    /** Local to finish autoreleasing. */\n    local: Local,\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    var localIndex = local.index;\n    var module = this.module;\n    if (~localIndex && flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n      flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n      stmts.push(\n        this.makeRelease(\n          module.local_get(localIndex, local.type.toNativeType()),\n          local.type\n        )\n      );\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      if (!instance.is(CommonFlags.VIRTUAL)) {\n        assert(!instance.is(CommonFlags.STUB)); // doesn't make sense\n        let inlineStack = this.inlineStack;\n        if (inlineStack.includes(instance)) {\n          this.warning(\n            DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n            reportNode.range, instance.internalName\n          );\n        } else {\n          inlineStack.push(instance);\n          let expr: ExpressionRef;\n          if (instance.is(CommonFlags.INSTANCE)) {\n            let theOperands = assert(operands);\n            assert(theOperands.length);\n            expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n          } else {\n            expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n          }\n          let returnType = this.currentType;\n          if (returnType.isManaged) {\n            if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr, returnType);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          inlineStack.pop();\n          return expr;\n        }\n      } else {\n        this.warning(\n          DiagnosticCode.Function_0_is_virtual_and_will_not_be_inlined,\n          reportNode.range, instance.internalName\n        );\n      }\n    }\n    var module = this.module;\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var parameterTypes = instance.signature.parameterTypes;\n    var maxArguments = parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (initializer.compilesToConst) {\n            operands.push(this.compileExpression(\n              initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i], ReportMode.SWALLOW);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(this.makeZero(parameterTypes[i], instance.declaration));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!instance.is(CommonFlags.MODULE_IMPORT)) {\n          let original = instance;\n          instance = this.ensureVarargsStub(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          // We know the last operand is optional and omitted, so inject setting\n          // ~argumentsLength into that operand, which is always safe.\n          let lastOperand = operands[maxOperands - 1];\n          assert(!(getSideEffects(lastOperand) & SideEffects.WritesGlobal));\n          let lastOperandType = parameterTypes[maxArguments - 1];\n          operands[maxOperands - 1] = module.block(null, [\n            module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n            lastOperand\n          ], lastOperandType.toNativeType());\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr, returnType);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr, returnType);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          this.ensureArgumentsLength();\n          return expr;\n        }\n      }\n    }\n\n    // Call the virtual stub with the vtable if the function has overloads\n    if (instance.is(CommonFlags.VIRTUAL) && !reportNode.isAccessOnSuper) {\n      instance = this.ensureVirtualStub(instance);\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr, returnType);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, reportNode, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    reportNode: Node,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false,\n  ): ExpressionRef {\n    var module = this.module;\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var parameterTypes = signature.parameterTypes;\n    var returnType = signature.returnType;\n    var maxArguments = parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(this.makeZero(parameterTypes[i], reportNode));\n      }\n    }\n\n    if (this.options.isWasm64) {\n      indexArg = module.unary(UnaryOp.WrapI64, indexArg);\n    }\n\n    // We might be calling a varargs stub here, even if all operands have been\n    // provided, so we must set `argumentsLength` in any case. Inject setting it\n    // into the index argument, which becomes executed last after any operands.\n    this.ensureArgumentsLength();\n    var nativeSizeType = this.options.nativeSizeType;\n    if (getSideEffects(indexArg) & SideEffects.WritesGlobal) {\n      let flow = this.currentFlow;\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(indexArg));\n      indexArg = module.block(null, [\n        module.local_set(temp.index, indexArg),\n        module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n        module.local_get(temp.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp);\n    } else { // simplify\n      indexArg = module.block(null, [\n        module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n        indexArg\n      ], nativeSizeType);\n    }\n    var expr = module.call_indirect(\n      nativeSizeType == NativeType.I64\n        ? module.unary(UnaryOp.WrapI64,\n            module.load(8, false, indexArg, NativeType.I64)\n          )\n        : module.load(4, false, indexArg, NativeType.I32),\n      operands,\n      signature.nativeParams,\n      signature.nativeResults\n    );\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr, returnType);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  private compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.flatten(exprs, this.currentType.toNativeType());\n  }\n\n  private compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      let classReference = targetType.getClassOrWrapper(this.program);\n      if (classReference) {\n        let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (indexedGet) {\n          let thisType = assert(indexedGet.signature.thisType);\n          let thisArg = this.compileExpression(targetExpression, thisType,\n            Constraints.CONV_IMPLICIT\n          );\n          if (!isUnchecked && this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n              expression.range\n            );\n          }\n          return this.compileCallDirect(indexedGet, [\n            expression.elementExpression\n          ], expression, thisArg, constraints);\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  private compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = uniqueMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      instance = new Function(\n        prototype.name,\n        prototype,\n        null,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.resolver.resolveFunction(prototype, null, contextualTypeArguments);\n      if (!instance) return this.module.unreachable();\n      this.compileFunction(instance);\n      this.currentType = instance.signature.type;\n    }\n\n    var offset = this.ensureRuntimeFunction(instance); // reports\n    return this.options.isWasm64\n      ? this.module.i64(i64_low(offset), i64_high(offset))\n      : this.module.i32(i64_low(offset));\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = assert(filesByName.get(internalPath));\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  private compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.isReference) {\n          let classReference = contextualType.getClass();\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.getSignature();\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          return this.makeZero(contextualType, expression);\n        }\n        this.currentType = options.usizeType;\n        this.warning(\n          DiagnosticCode.Expression_resolves_to_unusual_type_0,\n          expression.range, this.currentType.toString()\n        );\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        let thisType = actualFunction.signature.thisType;\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            expression.range\n          );\n          this.currentType = this.options.usizeType;\n          return module.unreachable();\n        }\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR) && !(constraints & Constraints.IS_THIS)) {\n          let parent = actualFunction.parent;\n          assert(parent.kind == ElementKind.CLASS);\n          this.checkFieldInitialization(<Class>parent, expression);\n        }\n        let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n        flow.set(FlowFlags.ACCESSES_THIS);\n        this.currentType = thisType;\n        return module.local_get(thisLocal.index, thisType.toNativeType());\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.isInline) {\n          let scopedThis = flow.lookupLocal(CommonNames.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.getClass());\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(actualFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let classInstance = <Class>parent;\n          let baseClassInstance = classInstance.base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var currentParent = this.currentParent;\n    if (!currentParent) currentParent = actualFunction;\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      currentParent\n    );\n    if (!target) {\n      // make a guess to avoid assertions in calling code\n      if (this.currentType == Type.void) this.currentType = Type.i32;\n      return module.unreachable();\n    }\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        let localType = local.type;\n        assert(localType != Type.void);\n        if (this.pendingElements.has(local)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            local.internalName\n          );\n          this.currentType = localType;\n          return module.unreachable();\n        }\n        if (local.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(local, contextualType, constraints);\n        }\n        let localIndex = local.index;\n        assert(localIndex >= 0);\n        if (localType.isNullableReference && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          localType = localType.nonNullableType;\n        }\n        this.currentType = localType;\n\n        if (target.parent != flow.parentFunction) {\n          // TODO: closures\n          this.error(\n            DiagnosticCode.Not_implemented_0,\n            expression.range,\n            \"Closures\"\n          );\n          return module.unreachable();\n        }\n        return module.local_get(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let globalType = global.type;\n        if (this.pendingElements.has(global)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            global.internalName\n          );\n          this.currentType = globalType;\n          return module.unreachable();\n        }\n        assert(globalType != Type.void);\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, contextualType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        let enumValue = <EnumValue>target;\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low(enumValue.constantIntegerValue));\n        }\n        return module.global_get(enumValue.internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        let typeParameterNodes = functionPrototype.typeParameterNodes;\n\n        if (typeParameterNodes !== null && typeParameterNodes.length != 0) {\n          this.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            expression.range, typeParameterNodes.length.toString(), \"0\"\n          );\n          return module.unreachable();\n        }\n\n        let functionInstance = this.resolver.resolveFunction(\n          functionPrototype,\n          null,\n          uniqueMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!functionInstance || !this.compileFunction(functionInstance)) return module.unreachable();\n        if (contextualType.isExternalReference) {\n          this.currentType = Type.funcref;\n          return module.ref_func(functionInstance.internalName);\n        }\n        let offset = this.ensureRuntimeFunction(functionInstance);\n        this.currentType = functionInstance.signature.type;\n        return this.options.isWasm64\n          ? module.i64(i64_low(offset), i64_high(offset))\n          : module.i32(i64_low(offset));\n      }\n    }\n    assert(false);\n    return this.module.unreachable();\n  }\n\n  private compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n    var isType = expression.isType;\n\n    // Mimic `instanceof CLASS`\n    if (isType.kind == NodeKind.NAMEDTYPE) {\n      let namedType = <NamedTypeNode>isType;\n      if (!(namedType.isNullable || namedType.hasTypeArguments)) {\n        let element = this.resolver.resolveTypeName(namedType.name, flow.actualFunction, ReportMode.SWALLOW);\n        if (element !== null && element.kind == ElementKind.CLASS_PROTOTYPE) {\n          let prototype = <ClassPrototype>element;\n          if (prototype.is(CommonFlags.GENERIC)) {\n            return this.makeInstanceofClass(expression, prototype);\n          }\n        }\n      }\n    }\n\n    // Fall back to `instanceof TYPE`\n    var expectedType = this.resolver.resolveType(\n      expression.isType,\n      flow.actualFunction,\n      uniqueMap(flow.contextualTypeArguments)\n    );\n    if (!expectedType) {\n      this.currentType = Type.bool;\n      return this.module.unreachable();\n    }\n    return this.makeInstanceofType(expression, expectedType);\n  }\n\n  private makeInstanceofType(expression: InstanceOfExpression, expectedType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var expr = this.compileExpression(expression.expression, expectedType);\n    var actualType = this.currentType;\n    this.currentType = Type.bool;\n\n    // instanceof <value> - must be exact\n    if (expectedType.isValue) {\n      return module.maybeDropCondition(expr, module.i32(actualType == expectedType ? 1 : 0));\n    }\n\n    // <value> instanceof <nonValue> - always false\n    if (actualType.isValue) {\n      return module.maybeDropCondition(expr, module.i32(0));\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.isNullableReference && !expectedType.isNullableReference) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          this.makeZero(actualType, expression.expression)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Expression_compiles_to_a_dynamic_check_at_runtime,\n              expression.range\n            );\n          }\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.maybeDropCondition(expr, module.i32(1));\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.maybeDropCondition(expr, module.i32(0));\n  }\n\n  private makeInstanceofClass(expression: InstanceOfExpression, prototype: ClassPrototype): ExpressionRef {\n    var module = this.module;\n    var expr = this.compileExpression(expression.expression, Type.auto);\n    var actualType = this.currentType;\n    var nativeSizeType = actualType.toNativeType();\n\n    this.currentType = Type.bool;\n\n    // exclusively interested in class references here\n    var classReference = actualType.getClass();\n    if (classReference) {\n\n      // static check\n      if (classReference.extends(prototype)) {\n\n        // <nullable> instanceof <PROTOTYPE> - LHS must be != 0\n        if (actualType.isNullableReference) {\n          return module.binary(\n            nativeSizeType == NativeType.I64\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            this.makeZero(actualType, expression.expression)\n          );\n\n        // <nonNullable> is just `true`\n        } else {\n          return module.maybeDropCondition(expr, module.i32(1));\n        }\n\n      // dynamic check against all possible concrete ids\n      } else if (prototype.extends(classReference.prototype)) {\n        this.pendingClassInstanceOf.add(prototype);\n        return module.call(prototype.internalName + \"~instanceof\", [ expr ], NativeType.I32);\n      }\n    }\n\n    // false\n    return module.maybeDropCondition(expr, module.i32(0));\n  }\n\n  private compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        return this.compileArrayLiteral(\n          <ArrayLiteralExpression>expression,\n          contextualType,\n          constraints\n        );\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression, constraints);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      case LiteralKind.REGEXP: {\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          expression.range,\n          \"Regular expressions\"\n        );\n        this.currentType = contextualType;\n        return module.unreachable();\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  private compileStringLiteral(\n    expression: StringLiteralExpression,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expr = this.ensureStaticString(expression.value);\n    if (constraints & Constraints.WILL_RETAIN) {\n      this.skippedAutoreleases.add(expr);\n    } else {\n      // not necessary since this is static data anyway\n      // expr = this.makeAutorelease(expr, this.currentType);\n    }\n    return expr;\n  }\n\n  private compileArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // handle static arrays\n    let contextualClass = contextualType.getClass();\n    if (contextualClass !== null && contextualClass.extends(program.staticArrayPrototype)) {\n      return this.compileStaticArrayLiteral(expression, contextualType, constraints);\n    }\n\n    // handle normal arrays\n    var element = this.resolver.lookupExpression(expression, flow, this.currentType);\n    if (!element) return module.unreachable();\n    assert(element.kind == ElementKind.CLASS);\n    var arrayInstance = <Class>element;\n    var arrayType = arrayInstance.type;\n    var elementType = arrayInstance.getTypeArgumentsTo(program.arrayPrototype)![0];\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = !elementType.isExternalReference;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let elementExpression = expressions[i];\n      if (elementExpression.kind != NodeKind.OMITTED) {\n        let expr = this.compileExpression(<Expression>elementExpression, elementType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        values[i] = expr;\n      } else {\n        values[i] = this.makeZero(elementType, elementExpression);\n      }\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.addStaticBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.addStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // __newArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.newArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], expression);\n        this.currentType = arrayType;\n        expr = this.makeRetain(expr, arrayType);\n        if (arrayType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, arrayType);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __newArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.newArrayInstance, [\n            module.i32(length),\n            program.options.isWasm64\n              ? module.i64(elementType.alignLog2)\n              : module.i32(elementType.alignLog2),\n            module.i32(arrayInstance.id),\n            program.options.isWasm64\n              ? module.i64(0)\n              : module.i32(0)\n          ], expression),\n          arrayType\n        )\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStartMember = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStartMember.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStartMember).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        if (!this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeRetain(valueExpr, elementType);\n        }\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (constraints & Constraints.WILL_RETAIN) {\n        this.skippedAutoreleases.add(expr);\n      } else {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles a special `fixed` array literal. */\n  private compileStaticArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // make sure this method is only called with a valid contextualType\n    var arrayInstance = assert(contextualType.getClass());\n    var arrayType = arrayInstance.type;\n    var typeArguments = assert(arrayInstance.getTypeArgumentsTo(program.staticArrayPrototype));\n    var elementType = typeArguments[0];\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n\n    // compile value expressions and check if all are compile-time constants\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = !elementType.isExternalReference;\n    for (let i = 0; i < length; ++i) {\n      let elementExpression = expressions[i];\n      if (elementExpression.kind != NodeKind.OMITTED) {\n        let expr = this.compileExpression(elementExpression, elementType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        values[i] = expr;\n      } else {\n        values[i] = this.makeZero(elementType, elementExpression);\n      }\n    }\n\n    var isWasm64 = this.options.isWasm64;\n    var bufferSize = values.length << elementType.alignLog2;\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n\n      let bufferSegment = this.addStaticBuffer(elementType, values, arrayInstance.id);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(program.runtimeHeaderSize));\n\n      // return the static buffer directly if assigned to a global\n      if (constraints & Constraints.PREFER_STATIC) {\n        let expr = this.options.isWasm64\n          ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n          : module.i32(i64_low(bufferAddress));\n        if (constraints & Constraints.WILL_RETAIN) {\n          this.skippedAutoreleases.add(expr);\n        } else {\n          // not necessary since this is static data anyway\n          // expr = this.makeAutorelease(expr, arrayType, flow);\n        }\n        this.currentType = arrayType;\n        return expr;\n\n      // otherwise allocate a new chunk of memory and return a copy of the buffer\n      } else {\n        // __newBuffer(bufferSize, id, buffer)\n        let expr = this.makeRetain(\n          this.makeCallDirect(program.newBufferInstance, [\n            isWasm64\n              ? module.i64(bufferSize)\n              : module.i32(bufferSize),\n            module.i32(arrayInstance.id),\n            isWasm64\n              ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n              : module.i32(i64_low(bufferAddress))\n          ], expression),\n          program.arrayBufferInstance.type\n        );\n        if (arrayType.isManaged) {\n          if (constraints & Constraints.WILL_RETAIN) {\n            this.skippedAutoreleases.add(expr);\n          } else {\n            expr = this.makeAutorelease(expr, arrayType);\n          }\n        }\n        this.currentType = arrayType;\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __newBuffer(bufferSize, classId)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.newBufferInstance, [\n            isWasm64\n              ? module.i64(bufferSize)\n              : module.i32(bufferSize),\n            module.i32(arrayInstance.id)\n          ], expression),\n          program.arrayBufferInstance.type\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        if (!this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeRetain(valueExpr, elementType);\n        }\n      }\n      // store<T>(tempThis, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempThis.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (constraints & Constraints.WILL_RETAIN) {\n        this.skippedAutoreleases.add(expr);\n      } else {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      }\n    }\n    return expr;\n  }\n\n  private compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // Check that contextual type is a class (TODO: hidden class for interfaces?)\n    var classReference = contextualType.getClass();\n    if (!classReference) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n    var classType = classReference.type;\n    this.currentType = classType.nonNullableType;\n    if (classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Cannot_create_an_instance_of_an_abstract_class,\n        expression.range\n      );\n      return module.unreachable();\n    }\n\n    // Check that the class is compatible with object literals\n    var ctorPrototype = classReference.prototype.constructorPrototype;\n    if (ctorPrototype) {\n      this.errorRelated(\n        DiagnosticCode.Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal,\n        expression.range, ctorPrototype.identifierNode.range, classType.toString()\n      );\n      return module.unreachable();\n    }\n\n    var isManaged = classType.isManaged;\n    if (!isManaged) {\n      this.checkUnsafe(expression, findDecorator(DecoratorKind.UNMANAGED, classReference.decoratorNodes));\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>();\n    var flow = this.currentFlow;\n    var tempLocal = isManaged\n      ? flow.getAutoreleaseLocal(classType)\n      : flow.getTempLocal(classType);\n    var nativeClassType = classType.toNativeType();\n    assert(numNames == values.length);\n\n    // Assume all class fields will be omitted, and add them to our omitted list\n    var omittedFields = new Set<Field>();\n    if (members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberKey = _keys[i];\n        let member = assert(members.get(memberKey));\n        if (member !== null && member.kind == ElementKind.FIELD) {\n          omittedFields.add(<Field>member); // incl. private/protected\n        }\n      }\n    }\n\n    // Iterate through the members defined in our expression\n    for (let i = 0; i < numNames; ++i) {\n      let memberName = names[i].text;\n      let member: DeclaredElement;\n      if (!members || !members.has(memberName) || (member = assert(members.get(memberName))).kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      if (member.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Property_0_is_private_and_only_accessible_within_class_1,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      if (member.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let fieldInstance = <Field>member;\n      let fieldType = fieldInstance.type;\n\n      let expr = this.compileExpression(values[i], fieldType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n      if (fieldType.isManaged && !this.skippedAutoreleases.has(expr)) {\n        expr = this.makeRetain(expr, fieldType);\n      }\n      exprs.push(\n        module.store( // TODO: handle setters as well\n          fieldType.byteSize,\n          module.local_get(tempLocal.index, nativeClassType),\n          expr,\n          fieldType.toNativeType(),\n          fieldInstance.memoryOffset\n        )\n      );\n\n      // This member is no longer omitted, so delete from our omitted fields\n      omittedFields.delete(fieldInstance);\n    }\n    this.currentType = classType.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // Check remaining omitted fields\n    for (let _values = Set_values(omittedFields), j = 0, l = _values.length; j < l; ++j) {\n      let fieldInstance = _values[j];\n      let fieldType = fieldInstance.type;\n\n      if (fieldInstance.initializerNode) {\n        continue; // set by generated ctor\n      }\n\n      if (fieldType.isReference) {\n        if (!fieldType.isNullableReference) {\n          this.error(\n            DiagnosticCode.Property_0_is_missing_in_type_1_but_required_in_type_2,\n            expression.range, fieldInstance.name, \"<object>\", classType.toString()\n          );\n          hasErrors = true;\n          continue;\n        }\n      }\n\n      switch (fieldType.kind) {\n        // Number Types (and Number alias types)\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL:\n        case TypeKind.F32:\n        case TypeKind.F64: {\n          exprs.push(\n            module.store( // TODO: handle setters as well\n              fieldType.byteSize,\n              module.local_get(tempLocal.index, nativeClassType),\n              this.makeZero(fieldType, expression),\n              fieldType.toNativeType(),\n              fieldInstance.memoryOffset\n            )\n          );\n          continue;\n        }\n      }\n\n      // Otherwise error\n      this.error(\n        DiagnosticCode.Property_0_is_missing_in_type_1_but_required_in_type_2,\n        expression.range, fieldInstance.name, \"<object>\", classType.toString()\n      );\n      hasErrors = true;\n    }\n    if (hasErrors) return module.unreachable();\n\n    // generate the default constructor\n    var ctor = this.ensureConstructor(classReference, expression);\n    // note that this is not checking field initialization within the ctor, but\n    // instead checks conditions above with provided fields taken into account.\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs.unshift(\n      module.local_set(tempLocal.index,\n        this.compileInstantiate(ctor, [], Constraints.WILL_RETAIN, expression)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs.push(\n      module.local_get(tempLocal.index, nativeClassType)\n    );\n\n    if (!isManaged) flow.freeTempLocal(tempLocal);\n    this.currentType = classType.nonNullableType;\n    return module.flatten(exprs, nativeClassType);\n  }\n\n  private compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveTypeName(expression.typeName, flow.actualFunction);\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    if (target.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Cannot_create_an_instance_of_an_abstract_class,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        uniqueMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        uniqueMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var ctor = this.ensureConstructor(classInstance, expression);\n    if (!ctor.hasDecorator(DecoratorFlags.INLINE)) {\n      // Inlined ctors haven't been compiled yet and are checked upon inline\n      // compilation of their body instead.\n      this.checkFieldInitialization(classInstance, expression);\n    }\n    return this.compileInstantiate(ctor, expression.args, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(\n    /** Class wanting a constructor. */\n    classInstance: Class,\n    /** Report node. */\n    reportNode: Node\n  ): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // shortcut if already compiled\n      if (instance.is(CommonFlags.COMPILED)) return instance;\n      // do not attempt to compile if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n    } else {\n      // clone base constructor if a derived class\n      let baseClass = classInstance.base;\n      let contextualTypeArguments = uniqueMap(classInstance.contextualTypeArguments);\n      if (baseClass) {\n        let baseCtor = this.ensureConstructor(baseClass, reportNode);\n        this.checkFieldInitialization(baseClass, reportNode);\n        instance = new Function(\n          CommonNames.constructor,\n          new FunctionPrototype(\n            CommonNames.constructor,\n            classInstance,\n            // declaration is important, i.e. to access optional parameter initializers\n            (<FunctionDeclaration>baseCtor.declaration).clone()\n          ),\n          null,\n          baseCtor.signature,\n          contextualTypeArguments\n        );\n\n      // otherwise make a default constructor\n      } else {\n        instance = new Function(\n          CommonNames.constructor,\n          new FunctionPrototype(\n            CommonNames.constructor,\n            classInstance, // bound\n            this.program.makeNativeFunctionDeclaration(CommonNames.constructor,\n              CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n            )\n          ),\n          null,\n          new Signature(this.program, null, classInstance.type, classInstance.type),\n          contextualTypeArguments\n        );\n        let members = classInstance.members;\n        if (!members) classInstance.members = members = new Map();\n        members.set(\"constructor\", instance.prototype);\n      }\n\n      instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n      instance.set(CommonFlags.COMPILED);\n      instance.prototype.setResolvedInstance(\"\", instance);\n      classInstance.constructorInstance = instance;\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n\n      // generate body\n      let signature = instance.signature;\n      let module = this.module;\n      let nativeSizeType = this.options.nativeSizeType;\n      let stmts = new Array<ExpressionRef>();\n\n      // {\n      //   if (!this) this = <ALLOC>\n      //   IF_DERIVED: this = super(this, ...args)\n      //   this.a = X\n      //   this.b = Y\n      //   return this\n      // }\n      let allocExpr = this.makeAllocation(classInstance);\n      let classType = classInstance.type;\n      if (classType.isManaged) allocExpr = this.makeRetain(allocExpr, classType);\n      stmts.push(\n        module.if(\n          module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n            module.local_get(0, nativeSizeType)\n          ),\n          module.local_set(0, allocExpr)\n        )\n      );\n      if (baseClass) {\n        let parameterTypes = signature.parameterTypes;\n        let numParameters = parameterTypes.length;\n        let operands = new Array<ExpressionRef>(1 + numParameters);\n        operands[0] = module.local_get(0, nativeSizeType);\n        for (let i = 1; i <= numParameters; ++i) {\n          operands[i] = module.local_get(i, parameterTypes[i - 1].toNativeType());\n        }\n        stmts.push(\n          module.local_set(0,\n            this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n          )\n        );\n      }\n      this.makeFieldInitializationInConstructor(classInstance, stmts);\n      let body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n      flow.freeScopedLocals();\n      this.currentFlow = previousFlow;\n\n      // make the function\n      let locals = instance.localsByIndex;\n      let varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n      let numOperands = 1 + signature.parameterTypes.length;\n      let numLocals = locals.length;\n      if (numLocals > numOperands) {\n        for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n      }\n      let funcRef = module.addFunction(instance.internalName, signature.nativeParams, signature.nativeResults, varTypes, body);\n      instance.finalize(module, funcRef);\n    }\n\n    return instance;\n  }\n\n  /** Checks that all class fields have been initialized. */\n  checkFieldInitialization(classInstance: Class, relatedNode: Node | null = null): void {\n    if (classInstance.didCheckFieldInitialization) return;\n    classInstance.didCheckFieldInitialization = true;\n    var ctor = assert(classInstance.constructorInstance);\n    this.checkFieldInitializationInFlow(classInstance, ctor.flow, relatedNode);\n  }\n\n  /** Checks that all class fields have been initialized in the specified flow. */\n  checkFieldInitializationInFlow(classInstance: Class, flow: Flow, relatedNode: Node | null = null): void {\n    var members = classInstance.members;\n    if (members) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let element = _values[i];\n        if (element.kind == ElementKind.FIELD && element.parent == classInstance) {\n          let field = <Field>element;\n          if (!field.initializerNode && !flow.isThisFieldFlag(field, FieldFlags.INITIALIZED)) {\n            if (!field.is(CommonFlags.DEFINITELY_ASSIGNED)) {\n              if (relatedNode) {\n                this.errorRelated(\n                  DiagnosticCode.Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned,\n                  field.declaration.name.range,\n                  relatedNode.range,\n                  field.internalName\n                );\n              } else {\n                this.error(\n                  DiagnosticCode.Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned,\n                  field.declaration.name.range,\n                  field.internalName\n                );\n              }\n            }\n          } else if (field.is(CommonFlags.DEFINITELY_ASSIGNED)) {\n            if (field.type.isReference) {\n              this.warning( // involves a runtime check\n                DiagnosticCode.Property_0_is_always_assigned_before_being_used,\n                field.identifierNode.range,\n                field.internalName\n              );\n            } else {\n              this.pedantic( // is a nop anyway\n                DiagnosticCode.Unnecessary_definite_assignment,\n                field.identifierNode.range\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  compileInstantiate(\n    /** Constructor to call. */\n    ctorInstance: Function,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(ctorInstance.is(CommonFlags.CONSTRUCTOR));\n    var parent = ctorInstance.parent;\n    assert(parent.kind == ElementKind.CLASS);\n    var classInstance = <Class>parent;\n    if (classInstance.type.isUnmanaged || ctorInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctorInstance,\n      argumentExpressions,\n      reportNode,\n      this.makeZero(this.options.usizeType, reportNode),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly WILL_DROP\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  private compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable(); // reports\n        let globalType = global.type;\n        assert(globalType != Type.void);\n        if (this.pendingElements.has(global)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            global.internalName\n          );\n          this.currentType = globalType;\n          return module.unreachable();\n        }\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let enumValue = <EnumValue>target;\n        let parent = assert(enumValue.parent);\n        assert(parent.kind == ElementKind.ENUM);\n        let parentEnum = <Enum>parent;\n        if (!this.compileEnum(parentEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(enumValue, ctxType, constraints);\n        }\n        assert(enumValue.type == Type.i32);\n        return module.global_get(enumValue.internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        assert(fieldInstance.memoryOffset >= 0);\n        let fieldParent = fieldInstance.parent;\n        assert(fieldParent.kind == ElementKind.CLASS);\n        thisExpression = assert(thisExpression);\n        let thisExpr = this.compileExpression(\n          thisExpression,\n          (<Class>fieldParent).type,\n          Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n        );\n        let thisType = this.currentType;\n        if (\n          flow.actualFunction.is(CommonFlags.CONSTRUCTOR) &&\n          thisExpression.kind == NodeKind.THIS &&\n          !flow.isThisFieldFlag(fieldInstance, FieldFlags.INITIALIZED) &&\n          !fieldInstance.is(CommonFlags.DEFINITELY_ASSIGNED)\n        ) {\n          this.errorRelated(\n            DiagnosticCode.Property_0_is_used_before_being_assigned,\n            expression.range,\n            fieldInstance.identifierNode.range,\n            fieldInstance.internalName\n          );\n        }\n        if (thisType.isNullableReference) {\n          if (!flow.isNonnull(thisExpr, thisType)) {\n            this.error(\n              DiagnosticCode.Object_is_possibly_null,\n              thisExpression.range\n            );\n          }\n        }\n        if (!fieldInstance.is(CommonFlags.COMPILED)) {\n          fieldInstance.set(CommonFlags.COMPILED);\n          let typeNode = fieldInstance.typeNode;\n          if (typeNode) this.checkTypeSupported(fieldInstance.type, typeNode);\n        }\n        this.currentType = fieldType;\n        let ret = module.load(\n          fieldType.byteSize,\n          fieldType.isSignedIntegerValue,\n          thisExpr,\n          fieldType.toNativeType(),\n          fieldInstance.memoryOffset\n        );\n        if (fieldInstance.is(CommonFlags.DEFINITELY_ASSIGNED) && fieldType.isReference && !fieldType.isNullableReference) {\n          ret = this.makeRuntimeNonNullCheck(ret, fieldType, expression);\n        }\n        return ret;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>target;\n        let propertyInstance = this.resolver.resolveProperty(propertyPrototype);\n        if (!propertyInstance) return module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance);\n        let thisArg: ExpressionRef = 0;\n        if (getterInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(getterInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n        }\n        return this.compileCallDirect(getterInstance, [], expression, thisArg);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        let functionInstance = this.resolver.resolveFunction(functionPrototype, null);\n        if (!functionInstance) return module.unreachable();\n        if (!this.compileFunction(functionInstance)) return module.unreachable();\n        this.currentType = functionInstance.type;\n        let offset = this.ensureRuntimeFunction(functionInstance);\n        return this.options.isWasm64\n          ? module.i64(i64_low(offset), i64_high(offset))\n          : module.i32(i64_low(offset));\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  private compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(expression.condition, Type.bool),\n      this.currentType,\n      expression.condition\n    );\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking branch type\n    var condKind = this.evaluateCondition(condExpr);\n    if (condKind == ConditionKind.TRUE) {\n      return module.maybeDropCondition(condExpr, this.compileExpression(ifThen, ctxType));\n    }\n    if (condKind == ConditionKind.FALSE) {\n      return module.maybeDropCondition(condExpr, this.compileExpression(ifElse, ctxType));\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var outerFlow = this.currentFlow;\n    var ifThenFlow = outerFlow.fork();\n    ifThenFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var ifThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    ifElseFlow.inheritNonnullIfFalse(condExpr);\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType == Type.auto ? ifThenType : ctxType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = ctxType;\n      return module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(ifThenExpr, ifThenType, commonType, false, ifThen);\n    ifThenType = commonType;\n    ifElseExpr = this.convertExpression(ifElseExpr, ifElseType, commonType, false, ifElse);\n    ifElseType = commonType;\n    this.currentType = commonType;\n\n    if (ifThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!ifThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr, ifThenType);\n        ifThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr, ifElseType);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!ifThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      if (constraints & Constraints.WILL_RETAIN) { // try to undo both\n        let ifThenIndex = this.tryUndoAutorelease(ifThenExpr, ifThenFlow);\n        if (ifThenIndex == -1) ifThenExpr = this.makeRetain(ifThenExpr, ifThenType);\n        let ifElseIndex = this.tryUndoAutorelease(ifElseExpr, ifElseFlow);\n        if (ifElseIndex == -1) ifElseExpr = this.makeRetain(ifElseExpr, ifElseType);\n        ifThenAutoreleaseSkipped = true;\n        ifElseAutoreleaseSkipped = true;\n      } else {\n        ifThenExpr = this.delayAutorelease(ifThenExpr, ifThenType, ifThenFlow, outerFlow);\n        ifElseExpr = this.delayAutorelease(ifElseExpr, ifElseType, ifElseFlow, outerFlow);\n      }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(ifThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (ifThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  private compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n          if (overload) {\n            let isInstance = overload.is(CommonFlags.INSTANCE);\n            if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n              getValue = getLocalSetValue(getValue);\n              flow.freeTempLocal(tempLocal);\n              tempLocal = null;\n            }\n            expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n            if (isInstance) break;\n            return expr; // here\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n          if (overload) {\n            let isInstance = overload.is(CommonFlags.INSTANCE);\n            if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n              getValue = getLocalSetValue(getValue);\n              flow.freeTempLocal(tempLocal);\n              tempLocal = null;\n            }\n            expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n            if (overload.is(CommonFlags.INSTANCE)) break;\n            return expr; // here\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        this.currentType,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  private compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.PLUS);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        let operand = expression.operand;\n        if (operand.isNumericLiteral) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.MINUS);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.makeZero(this.currentType, expression.operand),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n          if (overload) {\n            expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n            if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n            return expr; // skip re-assign\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n          if (overload) {\n            expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n            if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n            return expr; // skip re-assign\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.NOT);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          // fall back to compare by value\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType, expression.operand));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.isFloatValue\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        expr = this.convertExpression(expr, this.currentType, this.currentType.intType, false, expression.operand);\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.makeNegOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER: break; // ignore error: typeof doesntExist -> undefined\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) { // access on non-object\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            // fall-through\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto); // may trigger an error\n            expr = this.convertExpression(expr, this.currentType, Type.void, true, operand);\n          }\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, operand);\n            if (type.isReference) {\n              let signatureReference = type.getSignature();\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.getClass();\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"externref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isNumericValue) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  /** Checks whether a particular feature is enabled. */\n  checkFeatureEnabled(feature: Feature, reportNode: Node): bool {\n    if (!this.options.hasFeature(feature)) {\n      this.error(\n        DiagnosticCode.Feature_0_is_not_enabled,\n        reportNode.range, featureToString(feature)\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Checks whether a particular type is supported. */\n  checkTypeSupported(type: Type, reportNode: Node): bool {\n    switch (type.kind) {\n      case TypeKind.V128: return this.checkFeatureEnabled(Feature.SIMD, reportNode);\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n        return this.checkFeatureEnabled(Feature.REFERENCE_TYPES, reportNode);\n      case TypeKind.EXNREF: {\n        return this.checkFeatureEnabled(Feature.REFERENCE_TYPES, reportNode)\n            && this.checkFeatureEnabled(Feature.EXCEPTION_HANDLING, reportNode);\n      }\n      case TypeKind.ANYREF: {\n        return this.checkFeatureEnabled(Feature.REFERENCE_TYPES, reportNode)\n            && this.checkFeatureEnabled(Feature.GC, reportNode);\n      }\n    }\n    let classReference = type.getClass();\n    if (classReference) {\n      do {\n        let typeArguments = classReference.typeArguments;\n        if (typeArguments) {\n          for (let i = 0, k = typeArguments.length; i < k; ++i) {\n            if (!this.checkTypeSupported(typeArguments[i], reportNode)) {\n              return false;\n            }\n          }\n        }\n        classReference = classReference.base;\n      } while(classReference);\n    } else {\n      let signatureReference = type.getSignature();\n      if (signatureReference) {\n        let thisType = signatureReference.thisType;\n        if (thisType) {\n          if (!this.checkTypeSupported(thisType, reportNode)) {\n            return false;\n          }\n        }\n        let parameterTypes = signatureReference.parameterTypes;\n        for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n          if (!this.checkTypeSupported(parameterTypes[i], reportNode)) {\n            return false;\n          }\n        }\n        let returnType = signatureReference.returnType;\n        if (!this.checkTypeSupported(returnType, reportNode)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /** Checks whether a particular function signature is supported. */\n  checkSignatureSupported(signature: Signature, reportNode: FunctionTypeNode): bool {\n    var supported = true;\n    var explicitThisType = reportNode.explicitThisType;\n    if (explicitThisType) {\n      if (!this.checkTypeSupported(assert(signature.thisType), explicitThisType)) {\n        supported = false;\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      if (!this.checkTypeSupported(parameterTypes[i], reportNode.parameters[i])) {\n        supported = false;\n      }\n    }\n    if (!this.checkTypeSupported(signature.returnType, reportNode.returnType)) {\n      supported = false;\n    }\n    return supported;\n  }\n\n  /** Evaluates a boolean condition, determining whether it is TRUE, FALSE or UNKNOWN. */\n  evaluateCondition(expr: ExpressionRef): ConditionKind {\n    var module = this.module;\n    var evaled = module.runExpression(expr, ExpressionRunnerFlags.Default);\n    if (evaled) {\n      return getConstValueI32(evaled)\n        ? ConditionKind.TRUE\n        : ConditionKind.FALSE;\n    }\n    return ConditionKind.UNKNOWN;\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Makes a constant zero of the specified type. */\n  makeZero(type: Type, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.EXNREF:\n      case TypeKind.ANYREF:\n        return module.ref_null(type.toNativeType());\n    }\n  }\n\n  /** Makes a constant one of the specified type. */\n  makeOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Makes a constant negative one of the specified type. */\n  makeNegOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (type.isManaged && this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr, type);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        // 0 < abs(bitCast(x)) <= bitCast(Infinity) or\n        // (reinterpret<u32>(x) & 0x7FFFFFFF) - 1 <= 0x7F800000 - 1\n        //\n        // and finally:\n        // (reinterpret<u32>(x) << 1) - (1 << 1) <= ((0x7F800000 - 1) << 1)\n        return module.binary(BinaryOp.LeU32,\n          module.binary(BinaryOp.SubI32,\n            module.binary(BinaryOp.ShlI32,\n              module.unary(UnaryOp.ReinterpretF32, expr),\n              module.i32(1)\n            ),\n            module.i32(2) // 1 << 1\n          ),\n          module.i32(0xFEFFFFFE) // (0x7F800000 - 1) << 1\n        );\n      }\n      case TypeKind.F64: {\n        // 0 < abs(bitCast(x)) <= bitCast(Infinity) or\n        // (reinterpret<u64>(x) & 0x7FFFFFFFFFFFFFFF) - 1 <= 0x7FF0000000000000 - 1\n        //\n        // and finally:\n        // (reinterpret<u64>(x) << 1) - (1 << 1) <= ((0x7FF0000000000000 - 1) << 1)\n        return module.binary(BinaryOp.LeU64,\n          module.binary(BinaryOp.SubI64,\n            module.binary(BinaryOp.ShlI64,\n              module.unary(UnaryOp.ReinterpretF64, expr),\n              module.i64(1)\n            ),\n            module.i64(2) // 1 << 1\n          ),\n          module.i64(0xFFFFFFFE, 0xFFDFFFFF) // (0x7FF0000000000000 - 1) << 1\n        );\n      }\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.EXNREF:\n      case TypeKind.ANYREF:{\n        return module.ref_is_null(expr);\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    if (classInstance.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let allocInstance = program.allocInstance;\n      this.compileFunction(allocInstance);\n      return module.call(allocInstance.internalName, [\n        options.isWasm64\n          ? module.i64(classInstance.nextMemoryOffset)\n          : module.i32(classInstance.nextMemoryOffset)\n      ], options.nativeSizeType);\n    } else {\n      let newInstance = program.newInstance;\n      this.compileFunction(newInstance);\n      return module.call(newInstance.internalName, [\n        options.isWasm64\n          ? module.i64(classInstance.nextMemoryOffset)\n          : module.i32(classInstance.nextMemoryOffset),\n        module.i32(classInstance.id)\n      ], options.nativeSizeType);\n    }\n  }\n\n  /** Makes the initializers for a class's fields within the constructor. */\n  makeFieldInitializationInConstructor(\n    /** Class being initialized. */\n    classInstance: Class,\n    /** Statements to append to also being returned. Created if omitted. */\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return stmts;\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.isInline;\n    var thisLocalIndex = isInline\n      ? flow.lookupLocal(CommonNames.this_)!.index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member;\n      assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n      let typeNode = field.typeNode;\n      if (typeNode) this.checkTypeSupported(fieldType, typeNode);\n\n      // if declared as a constructor parameter, use its value\n      if (parameterIndex >= 0) {\n        initExpr = module.local_get(\n          isInline\n            ? flow.lookupLocal(field.name)!.index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr, fieldType);\n\n      // fall back to use initializer if present\n      } else if (initializerNode) {\n        initExpr = this.compileExpression(initializerNode, fieldType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr, fieldType);\n        }\n\n      // otherwise initialize with zero\n      } else {\n        initExpr = this.makeZero(fieldType, fieldPrototype.declaration);\n      }\n\n      stmts.push(\n        module.store(fieldType.byteSize,\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr,\n          nativeFieldType,\n          field.memoryOffset\n        )\n      );\n    }\n    return stmts;\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeAbort(\n    /** Message argument of type string, if any. */\n    message: Expression | null,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return this.module.unreachable();\n\n    var stringInstance = program.stringInstance;\n    var messageArg: ExpressionRef;\n    if (message !== null) {\n      // The message argument works much like an arm of an IF that does not become executed if the\n      // assertion succeeds respectively is only being computed if the program actually crashes.\n      // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n      // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n      messageArg = this.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n    } else {\n      messageArg = this.makeZero(stringInstance.type, codeLocation);\n    }\n\n    return this.makeStaticAbort(messageArg, codeLocation);\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeStaticAbort(\n    /** Message argument of type string. May be zero. */\n    messageExpr: ExpressionRef,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return module.unreachable();\n\n    var filenameExpr = this.ensureStaticString(codeLocation.range.source.normalizedPath);\n    var range = codeLocation.range;\n    var source = range.source;\n    return module.block(null, [\n      module.call(\n        abortInstance.internalName, [\n          messageExpr,\n          filenameExpr,\n          module.i32(source.lineAt(range.start)),\n          module.i32(source.columnAt())\n        ],\n        NativeType.None\n      ),\n      module.unreachable()\n    ]);\n  }\n\n  /** Makes a runtime non-null check, e.g. on `<Type>possiblyNull` or `possiblyNull!`. */\n  makeRuntimeNonNullCheck(\n    /** Expression being checked. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n    flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n    expr = module.if(\n      module.local_tee(temp.index, expr),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeStaticAbort(this.ensureStaticString(\"unexpected null\"), reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    this.currentType = type.nonNullableType;\n    return expr;\n  }\n\n  /** Makes a runtime upcast check, e.g. on `<Child>parent`. */\n  makeRuntimeUpcastCheck(\n    /** Expression being upcast. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Type casting to. */\n    toType: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(toType.isReference && toType.nonNullableType.isAssignableTo(type));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    var instanceofInstance = this.program.instanceofInstance;\n    assert(this.compileFunction(instanceofInstance));\n    expr = module.if(\n      module.call(instanceofInstance.internalName, [\n        module.local_tee(temp.index, expr),\n        module.i32(toType.classReference!.id)\n      ], NativeType.I32),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeStaticAbort(this.ensureStaticString(\"unexpected upcast\"), reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    this.currentType = toType;\n    return expr;\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.args;\n  if (args !== null && args.length > 0) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.isLiteralKind(LiteralKind.STRING)) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.isLiteralKind(LiteralKind.STRING)) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * @fileoverview Generated from diagnosticsMessages.json. Do not edit.\n * @license Apache-2.0\n */\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented_0 = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Low_memory_limit_exceeded_by_static_data_0_1 = 104,\n  Module_requires_at_least_0_pages_of_initial_memory = 105,\n  Module_requires_at_least_0_pages_of_maximum_memory = 106,\n  Shared_memory_requires_maximum_memory_to_be_defined = 107,\n  Shared_memory_requires_feature_threads_to_be_enabled = 108,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_final_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Expression_resolves_to_unusual_type_0 = 226,\n  Array_literal_expected = 227,\n  Function_0_is_virtual_and_will_not_be_inlined = 228,\n  Property_0_only_has_a_setter_and_is_missing_a_getter = 229,\n  _0_keyword_cannot_be_used_here = 230,\n  A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final = 231,\n  Exported_generic_function_or_class_has_no_concrete_instances = 232,\n  Property_0_is_always_assigned_before_being_used = 233,\n  Type_0_is_cyclic_Module_will_include_deferred_garbage_collection = 900,\n  Importing_the_table_disables_some_indirect_call_optimizations = 901,\n  Exporting_the_table_disables_some_indirect_call_optimizations = 902,\n  Expression_compiles_to_a_dynamic_check_at_runtime = 903,\n  Indexed_access_may_involve_bounds_checking = 904,\n  Explicitly_returning_constructor_drops_this_allocation = 905,\n  Unnecessary_definite_assignment = 906,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  Type_argument_list_cannot_be_empty = 1099,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer = 1190,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  An_interface_can_only_extend_an_interface = 2312,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Property_0_is_private_and_only_accessible_within_class_1 = 2341,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  Getter_and_setter_accessors_do_not_agree_in_visibility = 2379,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Overload_signatures_must_all_be_public_private_or_protected = 2385,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  This_overload_signature_is_not_compatible_with_its_implementation_signature = 2394,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_class_can_only_implement_an_interface = 2422,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses = 2445,\n  Variable_0_used_before_its_declaration = 2448,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  _0_is_referenced_directly_or_indirectly_in_its_own_base_expression = 2506,\n  Cannot_create_an_instance_of_an_abstract_class = 2511,\n  Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2 = 2515,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned = 2564,\n  Property_0_is_used_before_being_assigned = 2565,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Property_0_is_missing_in_type_1_but_required_in_type_2 = 2741,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented: {0}\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 104: return \"Low memory limit exceeded by static data: {0} > {1}\";\n    case 105: return \"Module requires at least '{0}' pages of initial memory.\";\n    case 106: return \"Module requires at least '{0}' pages of maximum memory.\";\n    case 107: return \"Shared memory requires maximum memory to be defined.\";\n    case 108: return \"Shared memory requires feature 'threads' to be enabled.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is final and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Class '{0}' cannot declare a constructor when instantiated from an object literal.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 226: return \"Expression resolves to unusual type '{0}'.\";\n    case 227: return \"Array literal expected.\";\n    case 228: return \"Function '{0}' is virtual and will not be inlined.\";\n    case 229: return \"Property '{0}' only has a setter and is missing a getter.\";\n    case 230: return \"'{0}' keyword cannot be used here.\";\n    case 231: return \"A class with a constructor explicitly returning something else than 'this' must be '@final'.\";\n    case 232: return \"Exported generic function or class has no concrete instances.\";\n    case 233: return \"Property '{0}' is always assigned before being used.\";\n    case 900: return \"Type '{0}' is cyclic. Module will include deferred garbage collection.\";\n    case 901: return \"Importing the table disables some indirect call optimizations.\";\n    case 902: return \"Exporting the table disables some indirect call optimizations.\";\n    case 903: return \"Expression compiles to a dynamic check at runtime.\";\n    case 904: return \"Indexed access may involve bounds checking.\";\n    case 905: return \"Explicitly returning constructor drops 'this' allocation.\";\n    case 906: return \"Unnecessary definite assignment.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1099: return \"Type argument list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1190: return \"The variable declaration of a 'for...of' statement cannot have an initializer.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2312: return \"An interface can only extend an interface.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2341: return \"Property '{0}' is private and only accessible within class '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2379: return \"Getter and setter accessors do not agree in visibility.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2385: return \"Overload signatures must all be public, private or protected.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2394: return \"This overload signature is not compatible with its implementation signature.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2422: return \"A class can only implement an interface.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2445: return \"Property '{0}' is protected and only accessible within class '{1}' and its subclasses.\";\n    case 2448: return \"Variable '{0}' used before its declaration.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2506: return \"'{0}' is referenced directly or indirectly in its own base expression.\";\n    case 2511: return \"Cannot create an instance of an abstract class.\";\n    case 2515: return \"Non-abstract class '{0}' does not implement inherited abstract member '{1}' from '{2}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2564: return \"Property '{0}' has no initializer and is not assigned in the constructor before 'this' is used or returned.\";\n    case 2565: return \"Property '{0}' is used before being assigned.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2741: return \"Property '{0}' is missing in type '{1}' but required in type '{2}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * @fileoverview A TypeScript parser for the AssemblyScript subset.\n *\n * Takes the tokens produced by the `Tokenizer` and builds an abstract\n * syntax tree composed of `Node`s wrapped in a `Source` out of it.\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter,\n  DiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  TypeName,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureNode,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\n/** Represents a dependee. */\nclass Dependee {\n  constructor(\n    public source: Source,\n    public reportNode: Node\n  ) {}\n}\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source | null = null;\n  /** Map of dependees being depended upon by a source, by path. */\n  dependees: Map<string, Dependee> = new Map();\n  /** An array of parsed sources. */\n  sources: Source[];\n\n  /** Constructs a new parser. */\n  constructor(\n    diagnostics: DiagnosticMessage[] | null = null,\n    sources: Source[] | null = null\n  ) {\n    super(diagnostics);\n    this.sources = sources ? sources : new Array<Source>();\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file, or `null` to indicate not found. */\n    text: string | null,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with file extensions\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(path);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // check if this is an error\n    if (text === null) {\n      let dependees = this.dependees;\n      let dependee: Dependee | null = null;\n      if (dependees.has(internalPath)) dependee = assert(dependees.get(internalPath));\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        dependee\n          ? dependee.reportNode.range\n          : null,\n        path\n      );\n      return;\n    }\n\n    // create the source element\n    var source = new Source(\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER,\n      normalizedPath,\n      text\n    );\n\n    this.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, this.diagnostics);\n    tn.onComment = this.onComment;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) {\n        statements.push(statement);\n      } else {\n        this.skipStatement(tn);\n      }\n    }\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart = 0;\n    var exportEnd = 0;\n    var defaultStart = 0;\n    var defaultEnd = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart = 0;\n    var declareEnd = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        let abstractStart = tn.tokenPos;\n        let abstractEnd = tn.pos;\n        let next = tn.peek(true);\n        if (tn.nextTokenOnNewLine) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        }\n        if (next != Token.CLASS) {\n          if (next == Token.INTERFACE) {\n            this.error(\n              DiagnosticCode._abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration,\n              tn.range(abstractStart, abstractEnd)\n            );\n          }\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? assert(backlog.shift()) : null;\n  }\n\n  /** Obtains the path of the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var dependees = this.dependees;\n    if (dependees.has(dependent)) {\n      let dependee = assert(dependees.get(dependent));\n      return dependee.source.internalPath;\n    }\n    return null;\n  }\n\n  /** Finishes parsing. */\n  finish(): void {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n  }\n\n  // types\n\n  /** Parses a type name. */\n  parseTypeName(\n    tn: Tokenizer\n  ): TypeName | null {\n\n    // at: Identifier ('.' Identifier)*\n\n    var first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n    var current = first;\n    while (tn.skip(Token.DOT)) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n        current.next = next;\n        current = next;\n      } else {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range(tn.pos)\n        );\n        return null;\n      }\n    }\n    return first;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // before: Type\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'null'\n    } else if (token == Token.NULL) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"null\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let name = this.parseTypeName(tn);\n      if (!name) return null;\n      let parameters: TypeNode[] | null = null;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [ parameter ];\n          else parameters.push(parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      if (!parameters) parameters = [];\n      type = Node.createNamedType(name, parameters, false, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... | null\n    while (tn.skip(Token.BAR)) {\n      if (tn.skip(Token.NULL)) {\n        type.isNullable = true;\n      } else {\n        let notNullStart = tn.pos;\n        let notNull = this.parseType(tn, false, true);\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            notNull ? notNull.range : tn.range(notNullStart), \"null\"\n          );\n        }\n        return null;\n      }\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let paramStart = -1;\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          paramStart = tn.tokenPos;\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (paramStart < 0) paramStart = tn.tokenPos;\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn, false);\n            if (!type) return null;\n            if (type.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                type.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>type;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          if (paramStart < 0) paramStart = tn.tokenPos;\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = Node.createParameter(kind, name, type, null, tn.range(paramStart, tn.pos));\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = Node.createParameter(kind, name, Node.createOmittedType(tn.range(tn.pos)), null, tn.range(paramStart, tn.pos));\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = Node.createParameter(\n            firstParamKind,\n            firstParamNameNoType,\n            Node.createOmittedType(firstParamNameNoType.range.atEnd),\n            null,\n            firstParamNameNoType.range\n          );\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    if (!parameters) parameters = [];\n    return Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier(IdentifierHandling.PREFER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32,\n    isFor: bool = false\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var declarations = new Array<VariableDeclaration>();\n    do {\n      let declaration = this.parseVariableDeclaration(tn, flags, decorators, isFor);\n      if (!declaration) return null;\n      declarations.push(declaration);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(decorators, declarations, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null,\n    isFor: bool = false\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITELY_ASSIGNED;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn, true);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else if (!isFor) {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if (initializer !== null && (flags & CommonFlags.DEFINITELY_ASSIGNED) != 0) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range\n      );\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      parentDecorators,\n      flags,\n      type,\n      initializer,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      decorators,\n      flags,\n      members,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      parentFlags,\n      value,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    var seenOptional = false;\n    var start = tn.tokenPos;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!typeParameters.length) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range(start, tn.pos)\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>type;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>type;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest !== null && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        identifier,\n        type,\n        initializer,\n        Range.join(assert(startRange), tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length > 0 && parameters[0].initializer !== null) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      decorators,\n      flags,\n      typeParameters,\n      signature,\n      body,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n      // or at '(' of arrow function:\n      //  Parameters (':' Type)?\n      //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, this.parseParametersThis, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    explicitThis: NamedTypeNode | null,\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      explicitThis,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      CommonFlags.NONE,\n      null,\n      signature,\n      body,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let type = this.parseType(tn);\n      if (!type) return null;\n      if (type.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          type.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>type;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        decorators,\n        flags,\n        typeParameters,\n        extendsType,\n        null,\n        members,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        decorators,\n        flags,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) {\n          if (member.kind == NodeKind.INDEXSIGNATURE) {\n            declaration.indexSignature = <IndexSignatureNode>member;\n          } else {\n            assert(member instanceof DeclarationStatement);\n            members.push(<DeclarationStatement>member);\n          }\n        } else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      null,\n      CommonFlags.NONE,\n      null,\n      null,\n      null,\n      members,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) {\n          if (member.kind == NodeKind.INDEXSIGNATURE) {\n            declaration.indexSignature = <IndexSignatureNode>member;\n          } else {\n            assert(declaration instanceof DeclarationStatement);\n            members.push(<DeclarationStatement>member);\n          }\n        } else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): Node | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n    var startPos = 0;\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      startPos = tn.tokenPos;\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = new Array();\n        decorators.push(decorator);\n      } while (tn.skip(Token.AT));\n      if (isInterface && decorators !== null) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      } else {\n        flags |= CommonFlags.PUBLIC;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      } else {\n        flags |= CommonFlags.PRIVATE;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      } else {\n        flags |= CommonFlags.PROTECTED;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      } else {\n        flags |= CommonFlags.STATIC;\n        staticStart = tn.tokenPos;\n        staticEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface || !parent.is(CommonFlags.ABSTRACT)) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        } else {\n          flags |= CommonFlags.ABSTRACT;\n          abstractStart = tn.tokenPos;\n          abstractEnd = tn.pos;\n        }\n        if (!startPos) startPos = tn.tokenPos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart = 0;\n    var readonlyEnd = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n        if (!startPos) startPos = readonlyStart;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart = 0;\n    var getEnd = 0;\n    var isSetter = false;\n    var setStart = 0;\n    var setEnd = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          getStart = tn.tokenPos;\n          getEnd = tn.pos;\n          if (!startPos) startPos = getStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (!startPos) startPos = setStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (!startPos) startPos = tn.tokenPos;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var isGetterOrSetter = isGetter || isSetter;\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!isGetterOrSetter && tn.skip(Token.OPENBRACKET)) {\n        if (!startPos) startPos = tn.tokenPos;\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignature(tn, flags, decorators);\n        if (!retIndex) {\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n          return null;\n        }\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetterOrSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.type,\n              null, // initialized via parameter\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length > 0 && parameters[0].initializer !== null) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      } else if (name.text == \"constructor\") {\n        this.error(\n          DiagnosticCode._0_keyword_cannot_be_used_here,\n          name.range, \"constructor\"\n        );\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, isSetter || name.kind == NodeKind.CONSTRUCTOR);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        } else if (isInterface) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!isInterface && !(flags & (CommonFlags.AMBIENT | CommonFlags.ABSTRACT))) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        decorators,\n        flags,\n        typeParameters,\n        signature,\n        body,\n        tn.range(startPos, tn.pos)\n      );\n      if (!(isInterface && tn.skip(Token.COMMA))) {\n        tn.skip(Token.SEMICOLON);\n      }\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetterOrSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITELY_ASSIGNED;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if (\n        (flags & CommonFlags.DEFINITELY_ASSIGNED) != 0 &&\n        (isInterface || initializer !== null || (flags & CommonFlags.STATIC) != 0)\n      ) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        decorators,\n        flags,\n        type,\n        initializer,\n        range\n      );\n      if (!(isInterface && tn.skip(Token.COMMA))) {\n        tn.skip(Token.SEMICOLON);\n      }\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignature(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n  ): IndexSignatureNode | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators !== null && decorators.length > 0) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              if (valueType.kind != NodeKind.NAMEDTYPE) {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  valueType.range\n                );\n                return null;\n              }\n              return Node.createIndexSignature(<NamedTypeNode>keyType, valueType, flags, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          decorators,\n          flags,\n          members,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    var currentSource = assert(this.currentSource);\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      if (path !== null) {\n        let internalPath = assert(ret.internalPath);\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, new Dependee(currentSource, path));\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          let exportPaths = source.exportPaths;\n          if (!exportPaths) source.exportPaths = [ internalPath ];\n          else if (!exportPaths.includes(internalPath)) exportPaths.push(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, new Dependee(currentSource, path));\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createExportMember(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createExportMember(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          tn.range(),\n          \"Mixed default and named imports\"\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createWildcardImportStatement(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, new Dependee(assert(this.currentSource), path));\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createImportDeclaration(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(statement, condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): Statement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos, true);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (initializer) {\n        if (tn.skip(Token.OF)) {\n          // TODO: for (let [key, val] of ...)\n          if (initializer.kind == NodeKind.EXPRESSION) {\n            if ((<ExpressionStatement>initializer).expression.kind != NodeKind.IDENTIFIER) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                initializer.range\n              );\n              return null;\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          if (initializer.kind == NodeKind.VARIABLE) {\n            let declarations = (<VariableStatement>initializer).declarations;\n            for (let i = 0, k = declarations.length; i < k; ++i) {\n              let declaration = declarations[i];\n              let initializer = declaration.initializer;\n              if (initializer) {\n                this.error(\n                  DiagnosticCode.The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer,\n                  initializer.range\n                ); // recoverable\n              }\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            initializer.range\n          );\n          return null;\n        }\n        // non-for..of needs type or initializer\n        if (initializer.kind == NodeKind.VARIABLE) {\n          let declarations = (<VariableStatement>initializer).declarations;\n          for (let i = 0, k = declarations.length; i < k; ++i) {\n            let declaration = declarations[i];\n            if (!declaration.initializer) {\n              if (declaration.flags & CommonFlags.CONST) {\n                this.error(\n                  DiagnosticCode._const_declarations_must_be_initialized,\n                  declaration.name.range\n                );\n              } else if (!declaration.type) {\n                this.error(\n                  DiagnosticCode.Type_expected,\n                  declaration.name.range.atEnd\n                );\n              }\n            }\n          }\n        }\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseForOfStatement(\n    tn: Tokenizer,\n    startPos: i32,\n    variable: Statement,\n  ): ForOfStatement | null {\n\n    // at 'of': Expression ')' Statement\n\n    var iterable = this.parseExpression(tn);\n    if (!iterable) return null;\n\n    if (!tn.skip(Token.CLOSEPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \")\"\n      );\n      return null;\n    }\n\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    return Node.createForOfStatement(\n      variable,\n      iterable,\n      statement,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let switchCases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let switchCase = this.parseSwitchCase(tn);\n            if (!switchCase) return null;\n            switchCases.push(switchCase);\n          }\n          let ret = Node.createSwitchStatement(condition, switchCases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (\n          tn.peek() != Token.CASE &&\n          tn.nextToken != Token.DEFAULT &&\n          tn.nextToken != Token.CLOSEBRACE\n        ) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n      // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (\n          tn.peek() != Token.CASE &&\n          tn.nextToken != Token.DEFAULT &&\n          tn.nextToken != Token.CLOSEBRACE\n        ) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          decorators,\n          flags,\n          typeParameters,\n          type,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    switch (token) {\n\n      // TODO: SpreadExpression, YieldExpression\n      case Token.DOT_DOT_DOT:\n      case Token.YIELD: // fallthrough to unsupported UnaryPrefixExpression\n\n      // UnaryPrefixExpression\n      case Token.EXCLAMATION:\n      case Token.TILDE:\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.DELETE: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER:\n          case NodeKind.ELEMENTACCESS:\n          case NodeKind.PROPERTYACCESS: break;\n          default: {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              operand.range\n            );\n          }\n        }\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n\n      // NewExpression\n      case Token.NEW: {\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        let typeName = this.parseTypeName(tn);\n        if (!typeName) return null;\n        let typeArguments: TypeNode[] | null = null;\n        let arguments_: Expression[] | null = null;\n        if (\n          tn.skip(Token.OPENPAREN) ||\n          (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n        ) {\n          arguments_ = this.parseArguments(tn);\n          if (!arguments_) return null;\n        } else {\n          arguments_ = []; // new Type;\n        }\n        return Node.createNewExpression(\n          typeName,\n          typeArguments,\n          arguments_,\n          tn.range(startPos, tn.pos)\n        );\n      }\n\n      // Special IdentifierExpression\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n      case Token.THIS: return Node.createThisExpression(tn.range());\n      case Token.CONSTRUCTOR: return Node.createConstructorExpression(tn.range());\n\n      // ParenthesizedExpression or FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            null,\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        let inner = this.parseExpression(tn);\n        if (!inner) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        inner = Node.createParenthesizedExpression(inner, tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, inner);\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          let expr: Expression | null;\n          if (tn.peek() == Token.COMMA) {\n            expr = Node.createOmittedExpression(tn.range(tn.pos));\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        let expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                ParameterKind.DEFAULT,\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                identifier.range\n              )\n            ],\n            null,\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return this.maybeParseCallExpression(tn, identifier, true);\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        let expr = Node.createSuperExpression(tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        let expr = this.parseFunctionExpression(tn);\n        if (!expr) return null;\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var start = tn.tokenPos;\n    var typeArguments: TypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN)) {\n      let end = tn.pos;\n      if (tn.skip(Token.OPENPAREN)) {\n        if (!typeArguments) {\n          this.error(\n            DiagnosticCode.Type_argument_list_cannot_be_empty,\n            tn.range(start, end)\n          );\n        }\n        return typeArguments;\n      }\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // precedence climbing\n    // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(tn.peek())) >= precedence\n    ) {\n      let token = tn.next();\n      switch (token) {\n\n        // AssertionExpression\n        case Token.AS: {\n          if (tn.skip(Token.CONST)) {\n            expr = Node.createAssertionExpression(\n              AssertionKind.CONST,\n              expr,\n              null,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let toType = this.parseType(tn); // reports\n            if (!toType) return null;\n            expr = Node.createAssertionExpression(\n              AssertionKind.AS,\n              expr,\n              toType,\n              tn.range(startPos, tn.pos)\n            );\n          }\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          let next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        // PropertyAccessExpression\n        case Token.DOT: {\n          if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) { // expr '.' Identifier\n            let next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            expr = Node.createPropertyAccessExpression(\n              expr,\n              next,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let next = this.parseExpression(tn, nextPrecedence + 1);\n            if (!next) return null;\n            if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n          }\n          expr = this.maybeParseCallExpression(tn, expr, true);\n          break;\n        }\n        // BinaryExpression (right associative)\n        case Token.EQUALS:\n        case Token.PLUS_EQUALS:\n        case Token.MINUS_EQUALS:\n        case Token.ASTERISK_ASTERISK_EQUALS:\n        case Token.ASTERISK_EQUALS:\n        case Token.SLASH_EQUALS:\n        case Token.PERCENT_EQUALS:\n        case Token.LESSTHAN_LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.AMPERSAND_EQUALS:\n        case Token.CARET_EQUALS:\n        case Token.BAR_EQUALS:\n        case Token.ASTERISK_ASTERISK: {\n          let next = this.parseExpression(tn, nextPrecedence);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        // BinaryExpression\n        case Token.LESSTHAN:\n        case Token.GREATERTHAN:\n        case Token.LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_EQUALS:\n        case Token.EQUALS_EQUALS:\n        case Token.EQUALS_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS:\n        case Token.PLUS:\n        case Token.MINUS:\n        case Token.ASTERISK:\n        case Token.SLASH:\n        case Token.PERCENT:\n        case Token.LESSTHAN_LESSTHAN:\n        case Token.GREATERTHAN_GREATERTHAN:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n        case Token.AMPERSAND:\n        case Token.BAR:\n        case Token.CARET:\n        case Token.AMPERSAND_AMPERSAND:\n        case Token.BAR_BAR: {\n          let next = this.parseExpression(tn, nextPrecedence + 1);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: assert(false); // filtered by determinePrecedence\n      }\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression,\n    potentiallyGeneric: bool = false\n  ): Expression {\n    var typeArguments: TypeNode[] | null = null;\n    while (\n      tn.skip(Token.OPENPAREN) ||\n      potentiallyGeneric &&\n      (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) break;\n      expr = Node.createCallExpression( // is again callable\n        expr,\n        typeArguments,\n        args,\n        tn.range(expr.range.start, tn.pos)\n      );\n      potentiallyGeneric = false;\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n","/**\n * @fileoverview Builders for various definitions describing a module.\n *\n * - TSDBuilder: Creates a TypeScript definition file (.d.ts)\n * - IDLBuilder: Creates a WebIDL interface definition (.webidl)\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n} from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate = includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        this.visitElement(memberName, member);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.visitFile(exportStar);\n      }\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (!element.is(CommonFlags.INSTANCE) && seen.has(element)) {\n      this.visitAlias(name, element, assert(seen.get(element)));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.ENUMVALUE: break; // handled by visitEnum\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (fieldInstance.is(CommonFlags.COMPILED)) this.visitField(name, fieldInstance);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = (<PropertyPrototype>element).instance;\n        if (!propertyInstance) break;\n        element = propertyInstance;\n        // fall-through\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getterInstance = propertyInstance.getterInstance;\n        if (getterInstance) this.visitFunction(name, getterInstance);\n        let setterInstance = propertyInstance.setterInstance;\n        if (setterInstance) this.visitFunction(name, setterInstance);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, instance);\n      }\n    }\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          let isConst = enumValue.is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(memberName);\n          if (isConst) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(element.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export \");\n    if (element.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    var remainingMembers = 0;\n    if (members) {\n      remainingMembers = members.size;\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          indent(sb, this.indentLevel);\n          sb.push(memberName);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\",\\n\");\n          --remainingMembers;\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n    if (remainingMembers) this.visitNamespace(name, element);\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(element.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      sb.push(\"export \");\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(name);\n    var base = element.base;\n    if (base !== null && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      let extendsNode = assert(element.prototype.extendsNode);\n      sb.push(extendsNode.name.identifier.text); // TODO: fqn?\n    }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.parent == element) { // own member\n          this.visitElement(member.name, member);\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      case TypeKind.FUNCREF: return \"funcref\";\n      case TypeKind.EXTERNREF: return \"externref\";\n      case TypeKind.EXNREF: return \"exnref\";\n      case TypeKind.ANYREF: return \"anyref\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    var isWasm64 = this.program.options.isWasm64;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type i64 = bigint;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type isize = bigint;\\n\");\n    } else {\n      sb.push(\"  type isize = number;\\n\");\n    }\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type u64 = bigint;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type usize = bigint;\\n\");\n    } else {\n      sb.push(\"  type usize = number;\\n\");\n    }\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = boolean | number;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * @fileoverview JavaScript glue code.\n * @license Apache-2.0\n */\n\nimport \"../../../std/portable/index\";\nimport \"../binaryen\";\nimport \"./float\";\nimport \"./i64\";\nimport \"./collections\";\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; },\n  {\n    \"MIN_VALUE\": { value: -128, writable: false },\n    \"MAX_VALUE\": { value:  127, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; },\n  {\n    \"MIN_VALUE\": { value: -32768, writable: false },\n    \"MAX_VALUE\": { value:  32767, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; },\n  {\n    \"MIN_VALUE\": { value: -2147483648, writable: false },\n    \"MAX_VALUE\": { value:  2147483647, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; },\n  {\n    \"MIN_VALUE\": { value:   0, writable: false },\n    \"MAX_VALUE\": { value: 255, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; },\n  {\n    \"MIN_VALUE\": { value:     0, writable: false },\n    \"MAX_VALUE\": { value: 65535, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; },\n  {\n    \"MIN_VALUE\": { value:          0, writable: false },\n    \"MAX_VALUE\": { value: 4294967295, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; },\n  {\n    \"MIN_VALUE\": { value: false, writable: false },\n    \"MAX_VALUE\": { value: true,  writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); },\n  {\n    \"EPSILON\":   { value: 1.1920928955078125e-07, writable: false },\n    \"MIN_VALUE\": { value: 1.4012984643248170e-45, writable: false },\n    \"MAX_VALUE\": { value: 3.4028234663852886e+38, writable: false },\n    \"MIN_NORMAL_VALUE\":  { value:  1.1754943508222875e-38, writable: false },\n    \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n    \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false },\n    \"POSITIVE_INFINITY\": { value:  Infinity, writable: false },\n    \"NEGATIVE_INFINITY\": { value: -Infinity, writable: false },\n    \"NaN\": { value: NaN, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; },\n  {\n    \"EPSILON\":   { value: 2.2204460492503131e-016, writable: false },\n    \"MIN_VALUE\": { value:                  5e-324, writable: false },\n    \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n    \"MIN_NORMAL_VALUE\":  { value:  2.2250738585072014e-308, writable: false },\n    \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n    \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false },\n    \"POSITIVE_INFINITY\": { value:  Infinity, writable: false },\n    \"NEGATIVE_INFINITY\": { value: -Infinity, writable: false },\n    \"NaN\": { value: NaN, writable: false }\n  }\n);\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  const CHUNKSIZE = 1 << 13;\n  const len = arr.length;\n  if (len <= CHUNKSIZE) {\n    return String.fromCharCode.apply(String, arr);\n  }\n  let index = 0;\n  let parts = '';\n  while (index < len) {\n    parts += String.fromCharCode.apply(\n      String,\n      arr.slice(index, Math.min(index + CHUNKSIZE, len))\n    );\n    index += CHUNKSIZE;\n  }\n  return parts;\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  const CHUNKSIZE = 1 << 13;\n  const len = arr.length;\n  if (len <= CHUNKSIZE) {\n    return String.fromCodePoint.apply(String, arr);\n  }\n  let index = 0;\n  let parts = '';\n  while (index < len) {\n    parts += String.fromCodePoint.apply(\n      String,\n      arr.slice(index, Math.min(index + CHUNKSIZE, len))\n    );\n    index += CHUNKSIZE;\n  }\n  return parts;\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nfunction defaultComparator(a, b) {\n  if (a === b) {\n    if (a !== 0) return 0;\n    a = 1 / a, b = 1 / b;\n  } else {\n    var nanA = a != a, nanB = b != b;\n    if (nanA | nanB) return nanA - nanB;\n    if (a == null) a = String(a);\n    if (b == null) b = String(b);\n  }\n  return a > b ? 1 : -1;\n}\n\nconst arraySort = Array.prototype.sort;\nArray.prototype.sort = function sort(comparator) {\n  return arraySort.call(this, comparator || defaultComparator);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n};\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n};\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean(U64[1] >>> 31);\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  },\n  exp2: {\n    value: function exp2(x) {\n      return Math.pow(2, x);\n    }\n  }\n});\n\nglobalScope[\"unmanaged\"] = function() { /* nop */ };\n\nglobalScope[\"trace\"] = function(message, n) {\n  if (n) message += Array.prototype.slice.call(arguments, 2, 2 + n);\n  console.error(\"trace: \" + message);\n};\n\nObject.defineProperty(Int8Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Int8Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint8Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint8Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint8ClampedArray, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint8ClampedArray(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Int16Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Int16Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint16Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint16Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Int32Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Int32Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint32Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint32Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Float32Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Float32Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Float64Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Float64Array(buffer, byteOffset, length);\n  }\n});\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8, // see: https://github.com/WebAssembly/reference-types\n  /** Multi value types. */\n  MULTI_VALUE = 1 << 9, // see: https://github.com/WebAssembly/multi-value\n  /** Garbage collection. */\n  GC = 1 << 10, // see: https://github.com/WebAssembly/gc\n  /** Memory64. */\n  MEMORY64 = 1 << 11 // see: https://github.com/WebAssembly/memory64\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n    case Feature.MULTI_VALUE: return \"multi-value\";\n    case Feature.GC: return \"gc\";\n    case Feature.MEMORY64: return \"memory64\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** Portable. */\n  JS = 0,\n  /** WebAssembly with 32-bit pointers. */\n  WASM32 = 1,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64 = 2,\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags = TypeinfoFlags.NONE;\n  /** Base class id or `0` if none. */\n  base: u32 = 0;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `StaticArray`. */\n  STATICARRAY = 1 << 2,\n  /** Type is a `Set`. */\n  SET = 1 << 3,\n  /** Type is a `Map`. */\n  MAP = 1 << 4,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 5,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 6,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 7,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 8,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 9,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 10,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 11,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 12,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 13,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 14,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 15,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 16,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 17,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 18,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 19,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 20,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 21,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 22,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 23\n}\n","/**\n * @fileoverview Floating point glue code for JaavaScript.\n * @license Apache-2.0\n */\n\n/* eslint-disable no-undef */\n\nconst F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function f32_as_i32(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function i32_as_f32(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function f64_as_i64(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function i64_as_f64(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","/**\n * @fileoverview 64-bit integer glue code for JavaScript.\n * @license Apache-2.0\n */\n\n/* eslint-disable no-undef */\n\nconst Long = global.Long || require(\"long\");\n\nglobal.i64_zero    = Long.ZERO;\nglobal.i64_one     = Long.ONE;\nglobal.i64_neg_one = Long.fromInt(-1);\n\nglobal.i64_is = function i64_is(value) {\n  return Long.isLong(value);\n};\n\nglobal.i64_new = function i64_new(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function i64_low(value) {\n  return value.low;\n};\n\nglobal.i64_high = function i64_high(value) {\n  return value.high;\n};\n\nglobal.i64_add = function i64_add(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function i64_sub(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function i64_mul(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_pow = function i64_pow(left, right) {\n  var rightLo = right.low;\n  var rightHi = right.high;\n  if (rightHi <= 0) {\n    if (rightHi < 0) {\n      if (left.eq(global.i64_neg_one)) {\n        return rightLo & 1 ? left : Long.ONE;\n      }\n      return left.eq(Long.ONE) ? left : Long.ZERO;\n    }\n    if (rightLo == 0) return Long.ONE;\n    if (rightLo == 1) return left;\n    if (rightLo == 2) return left.mul(left);\n  }\n  var result = Long.ONE;\n  while (rightLo | rightHi) {\n    if (rightLo & 1) result = result.mul(left);\n    right = right.shru(1);\n    left  = left.mul(left);\n    rightLo = right.low;\n    rightHi = right.high;\n  }\n  return result;\n};\n\nglobal.i64_div = function i64_div(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function i64_div_u(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function i64_rem(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function i64_rem_u(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function i64_and(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function i64_or(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function i64_xor(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function i64_shl(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function i64_shr(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function i64_shr_u(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function i64_not(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function i64_eq(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function i64_ne(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_gt = function i64_gt(left, right) {\n  return left.gt(right);\n};\n\nglobal.i64_align = function i64_align(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function i64_is_i8(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function i64_is_i16(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function i64_is_i32(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function i64_is_u8(value) {\n  return value.high === 0 && (value.low >>> 0) <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function i64_is_u16(value) {\n  return value.high === 0 && (value.low >>> 0) <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function i64_is_u32(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function i64_is_bool(value) {\n  return (value.high | (value.low & ~1)) === 0;\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function i64_is_f32(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function i64_is_f64(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function i64_to_f32(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function i64_to_f64(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function i64_to_string(value, unsigned) {\n  return unsigned ? value.toUnsigned().toString() : value.toString();\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * @fileoverview Collections glue code for JavaScript.\n * @license Apache-2.0\n */\n\nglobal.Map_keys = function Map_keys(map) {\n  return Array.from(map.keys());\n};\n\nglobal.Map_values = function Map_values(map) {\n  return Array.from(map.values());\n};\n\nglobal.Set_values = function Set_values(set) {\n  return Array.from(set.values());\n};\n","/**\n * @license\n * Copyright 2020 Daniel Wirtz / The AssemblyScript Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The C-like and re-exported public compiler interface.\n *\n * The intended way to consume the compiler sources is to import this\n * file, which again exports all relevant functions, classes and constants\n * as a flat namespace.\n *\n * Note though that the compiler sources are written in \"portable\n * AssemblyScript\" that can be compiled to both JavaScript with tsc and\n * to WebAssembly with asc, and as such require additional glue code\n * depending on the target.\n *\n * When compiling to JavaScript `glue/js/index.js` must be included.\n * When compiling to WebAssembly `glue/wasm/index.ts` must be included.\n */\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Program } from \"./program\";\n\n// Options\n\n/** Creates a new set of compiler options. */\nexport function newOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `exportMemory` option. */\nexport function setExportMemory(options: Options, exportMemory: bool): void {\n  options.exportMemory = exportMemory;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `initialMemory` option. */\nexport function setInitialMemory(options: Options, initialMemory: u32): void {\n  options.initialMemory = initialMemory;\n}\n\n/** Sets the `maximumMemory` option. */\nexport function setMaximumMemory(options: Options, maximumMemory: u32): void {\n  options.maximumMemory = maximumMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: bool): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `exportTable` option. */\nexport function setExportTable(options: Options, exportTable: bool): void {\n  options.exportTable = exportTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets the `tableBase` option. */\nexport function setTableBase(options: Options, tableBase: u32): void {\n  options.tableBase = tableBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sets the `lowMemoryLimit` option. */\nexport function setLowMemoryLimit(options: Options, lowMemoryLimit: i32): void {\n  options.lowMemoryLimit = lowMemoryLimit;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n/** Multi value types. */\nexport const FEATURE_MULTI_VALUE = Feature.MULTI_VALUE;\n/** Garbage collection. */\nexport const FEATURE_GC = Feature.GC;\n/** Memory64. */\nexport const FEATURE_MEMORY64 = Feature.MEMORY64;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Sets the `pedantic` option. */\nexport function setPedantic(options: Options, pedantic: bool): void {\n  options.pedantic = pedantic;\n}\n\n// Program\n\n/** Creates a new Program. */\nexport function newProgram(options: Options): Program {\n  return new Program(options);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(program: Program): DiagnosticMessage | null {\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n// Parser\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parse(\n  /** Program reference. */\n  program: Program,\n  /** Source text of the file, or `null` to indicate not found. */\n  text: string | null,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false\n): void {\n  program.parser.parseFile(text, path, isEntry);\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(program: Program): string | null {\n  return program.parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(program: Program, file: string): string | null {\n  return program.parser.getDependee(file);\n}\n\n// Compiler\n\n/** Initializes the program pre-emptively for transform hooks. */\nexport function initializeProgram(program: Program): void {\n  program.initialize();\n}\n\n/** Compiles the parsed sources to a module. */\nexport function compile(program: Program): Module {\n  program.parser.finish();\n  return new Compiler(program).compile();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n// Full API\nexport * from \"./ast\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\n// TODO: When vTables are pulled, perhaps it would be better to extend an ASTWalker\nexport * from \"./extra/ast\";\nimport * as util from \"./util/index\";\nexport { util };\n\n// TODO: compat with 0.9, remove with 0.10\nexport * from \"./util/index\";\n","/**\n * @fileoverview Various binary reading and writing utility.\n * @license Apache-2.0\n */\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Writes a 32-bit integer as a 64-bit integer to the specified buffer. */\nexport function writeI32AsI64(value: i32, buffer: Uint8Array, offset: i32, unsigned: bool = false): void {\n  writeI32(value, buffer, offset);\n  writeI32(unsigned || value >= 0 ? 0 : -1, buffer, offset + 4);\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): i64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: i64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Writes a 64-bit integer as a 32-bit integer to the specified buffer. */\nexport function writeI64AsI32(value: i64, buffer: Uint8Array, offset: i32, unsigned: bool = false): void {\n  assert(unsigned ? i64_is_u32(value) : i64_is_i32(value));\n  writeI32(i64_low(value), buffer, offset);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/**\n * @fileoverview Various collections utility.\n * @license Apache-2.0\n */\n\n/** Makes a unique map. Typically used to track contextual type arguemnts. */\nexport function uniqueMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    // TODO: for (let [k, v] of original) {\n    for (let _keys = Map_keys(original), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(original.get(k));\n      cloned.set(k, v);\n    }\n  }\n  if (overrides) {\n    // TODO: for (let [k, v] of overrides) {\n    for (let _keys = Map_keys(overrides), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(overrides.get(k));\n      cloned.set(k, v);\n    }\n  }\n  return cloned;\n}\n","/**\n * @fileoverview Various math utility.\n * @license Apache-2.0\n */\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * @fileoverview Various file path utility.\n * @license Apache-2.0\n */\n\nimport {\n  CharCode\n} from \"./text\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/**\n * @fileoverview Various character and text utility.\n * @license Apache-2.0\n */\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is trivially alphanumeric. */\nexport function isTrivialAlphanum(code: i32): bool {\n  return code >= CharCode.a && code <= CharCode.z\n      || code >= CharCode.A && code <= CharCode.Z\n      || code >= CharCode._0 && code <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 170 || code > 65500 ? false :\n         lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 170 || code > 65500 ? false :\n         lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/**\n * @fileoverview Various vector utility.\n * @license Apache-2.0\n */\n\n/** v128 zero constant. */\nexport const v128_zero = new Uint8Array(16);\n","/**\n * @fileoverview Abstract Syntax Tree extras.\n *\n * Provides serialization of the AssemblyScript AST back to it source form.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  ArrowKind,\n\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  TypeName,\n  TypeParameterNode,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  FloatLiteralExpression,\n  IntegerLiteralExpression,\n  StringLiteralExpression,\n  RegexpLiteralExpression,\n  ArrayLiteralExpression,\n  AssertionExpression,\n  AssertionKind,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FunctionExpression,\n  NewExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  UnaryPostfixExpression,\n  UnaryExpression,\n  UnaryPrefixExpression,\n  ClassExpression,\n  ObjectLiteralExpression,\n\n  BlockStatement,\n  BreakStatement,\n  ContinueStatement,\n  DoStatement,\n  EmptyStatement,\n  ExportImportStatement,\n  ExportStatement,\n  ExportDefaultStatement,\n  ExpressionStatement,\n  ForStatement,\n  ForOfStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  WhileStatement,\n\n  DeclarationStatement,\n  ClassDeclaration,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n\n  DecoratorNode,\n  ParameterNode,\n  ParameterKind,\n  ExportMember,\n  SwitchCase,\n  IndexSignatureNode,\n\n  isTypeOmitted\n} from \"../ast\";\n\nimport {\n  operatorTokenToString\n} from \"../tokenizer\";\n\nimport {\n  CharCode,\n  indent\n} from \"../util\";\n\nimport {\n  CommonFlags\n} from \"../common\";\n\n/** An AST builder. */\nexport class ASTBuilder {\n\n  /** Rebuilds the textual source from the specified AST, as far as possible. */\n  static build(node: Node): string {\n    var builder = new ASTBuilder();\n    builder.visitNode(node);\n    return builder.finish();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  visitNode(node: Node): void {\n    switch (node.kind) {\n      case NodeKind.SOURCE: {\n        this.visitSource(<Source>node);\n        break;\n      }\n\n      // types\n\n      case NodeKind.NAMEDTYPE: {\n        this.visitNamedTypeNode(<NamedTypeNode>node);\n        break;\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        this.visitFunctionTypeNode(<FunctionTypeNode>node);\n        break;\n      }\n      case NodeKind.TYPEPARAMETER: {\n        this.visitTypeParameter(<TypeParameterNode>node);\n        break;\n      }\n\n      // expressions\n\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.SUPER:\n      case NodeKind.THIS:\n      case NodeKind.TRUE:\n      case NodeKind.CONSTRUCTOR:\n      case NodeKind.IDENTIFIER: {\n        this.visitIdentifierExpression(<IdentifierExpression>node);\n        break;\n      }\n      case NodeKind.ASSERTION: {\n        this.visitAssertionExpression(<AssertionExpression>node);\n        break;\n      }\n      case NodeKind.BINARY: {\n        this.visitBinaryExpression(<BinaryExpression>node);\n        break;\n      }\n      case NodeKind.CALL: {\n        this.visitCallExpression(<CallExpression>node);\n        break;\n      }\n      case NodeKind.CLASS: {\n        this.visitClassExpression(<ClassExpression>node);\n        break;\n      }\n      case NodeKind.COMMA: {\n        this.visitCommaExpression(<CommaExpression>node);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        this.visitElementAccessExpression(<ElementAccessExpression>node);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        this.visitFunctionExpression(<FunctionExpression>node);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        this.visitInstanceOfExpression(<InstanceOfExpression>node);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        this.visitLiteralExpression(<LiteralExpression>node);\n        break;\n      }\n      case NodeKind.NEW: {\n        this.visitNewExpression(<NewExpression>node);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        this.visitParenthesizedExpression(<ParenthesizedExpression>node);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        this.visitPropertyAccessExpression(<PropertyAccessExpression>node);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        this.visitTernaryExpression(<TernaryExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        this.visitUnaryPostfixExpression(<UnaryPostfixExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        this.visitUnaryPrefixExpression(<UnaryPrefixExpression>node);\n        break;\n      }\n\n      // statements\n\n      case NodeKind.BLOCK: {\n        this.visitBlockStatement(<BlockStatement>node);\n        break;\n      }\n      case NodeKind.BREAK: {\n        this.visitBreakStatement(<BreakStatement>node);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        this.visitContinueStatement(<ContinueStatement>node);\n        break;\n      }\n      case NodeKind.DO: {\n        this.visitDoStatement(<DoStatement>node);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        this.visitEmptyStatement(<EmptyStatement>node);\n        break;\n      }\n      case NodeKind.EXPORT: {\n        this.visitExportStatement(<ExportStatement>node);\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.visitExportDefaultStatement(<ExportDefaultStatement>node);\n        break;\n      }\n      case NodeKind.EXPORTIMPORT: {\n        this.visitExportImportStatement(<ExportImportStatement>node);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        this.visitExpressionStatement(<ExpressionStatement>node);\n        break;\n      }\n      case NodeKind.FOR: {\n        this.visitForStatement(<ForStatement>node);\n        break;\n      }\n      case NodeKind.FOROF: {\n        this.visitForOfStatement(<ForOfStatement>node);\n        break;\n      }\n      case NodeKind.IF: {\n        this.visitIfStatement(<IfStatement>node);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.visitImportStatement(<ImportStatement>node);\n        break;\n      }\n      case NodeKind.RETURN: {\n        this.visitReturnStatement(<ReturnStatement>node);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        this.visitSwitchStatement(<SwitchStatement>node);\n        break;\n      }\n      case NodeKind.THROW: {\n        this.visitThrowStatement(<ThrowStatement>node);\n        break;\n      }\n      case NodeKind.TRY: {\n        this.visitTryStatement(<TryStatement>node);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        this.visitVariableStatement(<VariableStatement>node);\n        break;\n      }\n      case NodeKind.WHILE: {\n        this.visitWhileStatement(<WhileStatement>node);\n        break;\n      }\n\n      // declaration statements\n\n      case NodeKind.CLASSDECLARATION: {\n        this.visitClassDeclaration(<ClassDeclaration>node);\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        this.visitEnumDeclaration(<EnumDeclaration>node);\n        break;\n      }\n      case NodeKind.ENUMVALUEDECLARATION: {\n        this.visitEnumValueDeclaration(<EnumValueDeclaration>node);\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        this.visitFieldDeclaration(<FieldDeclaration>node);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        this.visitFunctionDeclaration(<FunctionDeclaration>node);\n        break;\n      }\n      case NodeKind.IMPORTDECLARATION: {\n        this.visitImportDeclaration(<ImportDeclaration>node);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        this.visitInterfaceDeclaration(<InterfaceDeclaration>node);\n        break;\n      }\n      case NodeKind.METHODDECLARATION: {\n        this.visitMethodDeclaration(<MethodDeclaration>node);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        this.visitNamespaceDeclaration(<NamespaceDeclaration>node);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        this.visitTypeDeclaration(<TypeDeclaration>node);\n        break;\n      }\n      case NodeKind.VARIABLEDECLARATION: {\n        this.visitVariableDeclaration(<VariableDeclaration>node);\n        break;\n      }\n\n      // other\n\n      case NodeKind.DECORATOR: {\n        this.serializeDecorator(<DecoratorNode>node);\n        break;\n      }\n      case NodeKind.EXPORTMEMBER: {\n        this.visitExportMember(<ExportMember>node);\n        break;\n      }\n      case NodeKind.PARAMETER: {\n        this.serializeParameter(<ParameterNode>node);\n        break;\n      }\n      case NodeKind.SWITCHCASE: {\n        this.visitSwitchCase(<SwitchCase>node);\n        break;\n      }\n      case NodeKind.INDEXSIGNATURE: {\n        this.visitIndexSignature(<IndexSignatureNode>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitSource(source: Source): void {\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      this.visitNodeAndTerminate(statements[i]);\n    }\n  }\n\n  // types\n\n  visitTypeNode(node: TypeNode): void {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        this.visitNamedTypeNode(<NamedTypeNode>node);\n        break;\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        this.visitFunctionTypeNode(<FunctionTypeNode>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitTypeName(node: TypeName): void {\n    this.visitIdentifierExpression(node.identifier);\n    var sb = this.sb;\n    var current = node.next;\n    while (current) {\n      sb.push(\".\");\n      this.visitIdentifierExpression(current.identifier);\n      current = current.next;\n    }\n  }\n\n  visitNamedTypeNode(node: NamedTypeNode): void {\n    this.visitTypeName(node.name);\n    var typeArguments = node.typeArguments;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      let sb = this.sb;\n      if (numTypeArguments) {\n        sb.push(\"<\");\n        this.visitTypeNode(typeArguments[0]);\n        for (let i = 1; i < numTypeArguments; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(typeArguments[i]);\n        }\n        sb.push(\">\");\n      }\n      if (node.isNullable) sb.push(\" | null\");\n    }\n  }\n\n  visitFunctionTypeNode(node: FunctionTypeNode): void {\n    var isNullable = node.isNullable;\n    var sb = this.sb;\n    sb.push(isNullable ? \"((\" : \"(\");\n    var explicitThisType = node.explicitThisType;\n    if (explicitThisType) {\n      sb.push(\"this: \");\n      this.visitTypeNode(explicitThisType);\n    }\n    var parameters = node.parameters;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      if (explicitThisType) sb.push(\", \");\n      this.serializeParameter(parameters[0]);\n      for (let i = 1; i < numParameters; ++i) {\n        sb.push(\", \");\n        this.serializeParameter(parameters[i]);\n      }\n    }\n    var returnType = node.returnType;\n    if (returnType) {\n      sb.push(\") => \");\n      this.visitTypeNode(returnType);\n    } else {\n      sb.push(\") => void\");\n    }\n    if (isNullable) sb.push(\") | null\");\n  }\n\n  visitTypeParameter(node: TypeParameterNode): void {\n    this.visitIdentifierExpression(node.name);\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      this.sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    var defaultType = node.defaultType;\n    if (defaultType) {\n      this.sb.push(\"=\");\n      this.visitTypeNode(defaultType);\n    }\n  }\n\n  // expressions\n\n  visitIdentifierExpression(node: IdentifierExpression): void {\n    if (node.isQuoted) this.visitStringLiteral(node.text);\n    else this.sb.push(node.text);\n  }\n\n  visitArrayLiteralExpression(node: ArrayLiteralExpression): void {\n    var sb = this.sb;\n    sb.push(\"[\");\n    var elements = node.elementExpressions;\n    var numElements = elements.length;\n    if (numElements) {\n      let element = elements[0];\n      if (element) this.visitNode(element);\n      for (let i = 1; i < numElements; ++i) {\n        element = elements[i];\n        sb.push(\", \");\n        if (element) this.visitNode(element);\n      }\n    }\n    sb.push(\"]\");\n  }\n\n  visitObjectLiteralExpression(node: ObjectLiteralExpression): void {\n    var sb = this.sb;\n    var names = node.names;\n    var values = node.values;\n    var numElements = names.length;\n    assert(numElements == values.length);\n    if (numElements) {\n      sb.push(\"{\\n\");\n      indent(sb, ++this.indentLevel);\n      this.visitNode(names[0]);\n      sb.push(\": \");\n      this.visitNode(values[0]);\n      for (let i = 1; i < numElements; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, this.indentLevel);\n        let name = names[i];\n        let value = values[i];\n        if (name === value) {\n          this.visitNode(name);\n        } else {\n          this.visitNode(name);\n          sb.push(\": \");\n          this.visitNode(value);\n        }\n      }\n      sb.push(\"\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\"{}\");\n    }\n  }\n\n  visitAssertionExpression(node: AssertionExpression): void {\n    var sb = this.sb;\n    switch (node.assertionKind) {\n      case AssertionKind.PREFIX: {\n        sb.push(\"<\");\n        this.visitTypeNode(assert(node.toType));\n        sb.push(\">\");\n        this.visitNode(node.expression);\n        break;\n      }\n      case AssertionKind.AS: {\n        this.visitNode(node.expression);\n        sb.push(\" as \");\n        this.visitTypeNode(assert(node.toType));\n        break;\n      }\n      case AssertionKind.NONNULL: {\n        this.visitNode(node.expression);\n        sb.push(\"!\");\n        break;\n      }\n      case AssertionKind.CONST: {\n        this.visitNode(node.expression);\n        sb.push(\" as const\");\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitBinaryExpression(node: BinaryExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.left);\n    sb.push(\" \");\n    sb.push(operatorTokenToString(node.operator));\n    sb.push(\" \");\n    this.visitNode(node.right);\n  }\n\n  visitCallExpression(node: CallExpression): void {\n    this.visitNode(node.expression);\n    this.visitArguments(node.typeArguments, node.args);\n  }\n\n  private visitArguments(typeArguments: TypeNode[] | null, args: Expression[]): void {\n    var sb = this.sb;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (numTypeArguments) {\n        sb.push(\"<\");\n        this.visitTypeNode(typeArguments[0]);\n        for (let i = 1; i < numTypeArguments; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(typeArguments[i]);\n        }\n        sb.push(\">(\");\n      }\n    } else {\n      sb.push(\"(\");\n    }\n    var numArgs = args.length;\n    if (numArgs) {\n      this.visitNode(args[0]);\n      for (let i = 1; i < numArgs; ++i) {\n        sb.push(\", \");\n        this.visitNode(args[i]);\n      }\n    }\n    sb.push(\")\");\n  }\n\n  visitClassExpression(node: ClassExpression): void {\n    var declaration = node.declaration;\n    this.visitClassDeclaration(declaration);\n  }\n\n  visitCommaExpression(node: CommaExpression): void {\n    var expressions = node.expressions;\n    var numExpressions = assert(expressions.length);\n    this.visitNode(expressions[0]);\n    var sb = this.sb;\n    for (let i = 1; i < numExpressions; ++i) {\n      sb.push(\",\");\n      this.visitNode(expressions[i]);\n    }\n  }\n\n  visitElementAccessExpression(node: ElementAccessExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.expression);\n    sb.push(\"[\");\n    this.visitNode(node.elementExpression);\n    sb.push(\"]\");\n  }\n\n  visitFunctionExpression(node: FunctionExpression): void {\n    var declaration = node.declaration;\n    if (!declaration.arrowKind) {\n      if (declaration.name.text.length) {\n        this.sb.push(\"function \");\n      } else {\n        this.sb.push(\"function\");\n      }\n    } else {\n      assert(declaration.name.text.length == 0);\n    }\n    this.visitFunctionCommon(declaration);\n  }\n\n  visitLiteralExpression(node: LiteralExpression): void {\n    switch (node.literalKind) {\n      case LiteralKind.FLOAT: {\n        this.visitFloatLiteralExpression(<FloatLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.INTEGER: {\n        this.visitIntegerLiteralExpression(<IntegerLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.STRING: {\n        this.visitStringLiteralExpression(<StringLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.REGEXP: {\n        this.visitRegexpLiteralExpression(<RegexpLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.ARRAY: {\n        this.visitArrayLiteralExpression(<ArrayLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.OBJECT: {\n        this.visitObjectLiteralExpression(<ObjectLiteralExpression>node);\n        break;\n      }\n      default: {\n        assert(false);\n        break;\n      }\n    }\n  }\n\n  visitFloatLiteralExpression(node: FloatLiteralExpression): void {\n    this.sb.push(node.value.toString());\n  }\n\n  visitInstanceOfExpression(node: InstanceOfExpression): void {\n    this.visitNode(node.expression);\n    this.sb.push(\" instanceof \");\n    this.visitTypeNode(node.isType);\n  }\n\n  visitIntegerLiteralExpression(node: IntegerLiteralExpression): void {\n    this.sb.push(i64_to_string(node.value));\n  }\n\n  visitStringLiteral(str: string, singleQuoted: bool = false): void {\n    var sb = this.sb;\n    var off = 0;\n    var quote = singleQuoted ? \"'\" : \"\\\"\";\n    sb.push(quote);\n    var i = 0;\n    for (let k = str.length; i < k;) {\n      switch (str.charCodeAt(i)) {\n        case CharCode.NULL: {\n          if (i > off) sb.push(str.substring(off, off = i + 1));\n          sb.push(\"\\\\0\");\n          off = ++i;\n          break;\n        }\n        case CharCode.BACKSPACE: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\b\");\n          break;\n        }\n        case CharCode.TAB: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\t\");\n          break;\n        }\n        case CharCode.LINEFEED: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\n\");\n          break;\n        }\n        case CharCode.VERTICALTAB: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\v\");\n          break;\n        }\n        case CharCode.FORMFEED: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\f\");\n          break;\n        }\n        case CharCode.CARRIAGERETURN: {\n          if (i > off) sb.push(str.substring(off, i));\n          sb.push(\"\\\\r\");\n          off = ++i;\n          break;\n        }\n        case CharCode.DOUBLEQUOTE: {\n          if (!singleQuoted) {\n            if (i > off) sb.push(str.substring(off, i));\n            sb.push(\"\\\\\\\"\");\n            off = ++i;\n          } else {\n            ++i;\n          }\n          break;\n        }\n        case CharCode.SINGLEQUOTE: {\n          if (singleQuoted) {\n            if (i > off) sb.push(str.substring(off, i));\n            sb.push(\"\\\\'\");\n            off = ++i;\n          } else {\n            ++i;\n          }\n          break;\n        }\n        case CharCode.BACKSLASH: {\n          if (i > off) sb.push(str.substring(off, i));\n          sb.push(\"\\\\\\\\\");\n          off = ++i;\n          break;\n        }\n        default: {\n          ++i;\n          break;\n        }\n      }\n    }\n    if (i > off) sb.push(str.substring(off, i));\n    sb.push(quote);\n  }\n\n  visitStringLiteralExpression(node: StringLiteralExpression): void {\n    this.visitStringLiteral(node.value);\n  }\n\n  visitRegexpLiteralExpression(node: RegexpLiteralExpression): void {\n    var sb = this.sb;\n    sb.push(\"/\");\n    sb.push(node.pattern);\n    sb.push(\"/\");\n    sb.push(node.patternFlags);\n  }\n\n  visitNewExpression(node: NewExpression): void {\n    this.sb.push(\"new \");\n    this.visitTypeName(node.typeName);\n    this.visitArguments(node.typeArguments, node.args);\n  }\n\n  visitParenthesizedExpression(node: ParenthesizedExpression): void {\n    var sb = this.sb;\n    sb.push(\"(\");\n    this.visitNode(node.expression);\n    sb.push(\")\");\n  }\n\n  visitPropertyAccessExpression(node: PropertyAccessExpression): void {\n    this.visitNode(node.expression);\n    this.sb.push(\".\");\n    this.visitIdentifierExpression(node.property);\n  }\n\n  visitTernaryExpression(node: TernaryExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.condition);\n    sb.push(\" ? \");\n    this.visitNode(node.ifThen);\n    sb.push(\" : \");\n    this.visitNode(node.ifElse);\n  }\n\n  visitUnaryExpression(node: UnaryExpression): void {\n    switch (node.kind) {\n      case NodeKind.UNARYPOSTFIX: {\n        this.visitUnaryPostfixExpression(<UnaryPostfixExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        this.visitUnaryPrefixExpression(<UnaryPrefixExpression>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitUnaryPostfixExpression(node: UnaryPostfixExpression): void {\n    this.visitNode(node.operand);\n    this.sb.push(operatorTokenToString(node.operator));\n  }\n\n  visitUnaryPrefixExpression(node: UnaryPrefixExpression): void {\n    this.sb.push(operatorTokenToString(node.operator));\n    this.visitNode(node.operand);\n  }\n\n  // statements\n\n  visitNodeAndTerminate(node: Node): void {\n    this.visitNode(node);\n    var sb = this.sb;\n    if (\n      !sb.length ||                     // leading EmptyStatement\n      node.kind == NodeKind.VARIABLE || // potentially assigns a FunctionExpression\n      node.kind == NodeKind.EXPRESSION  // potentially assigns a FunctionExpression\n    ) {\n      sb.push(\";\\n\");\n    } else {\n      let last = sb[sb.length - 1];\n      let lastCharPos = last.length - 1;\n      if (lastCharPos >= 0 && (\n        last.charCodeAt(lastCharPos) == CharCode.CLOSEBRACE ||\n        last.charCodeAt(lastCharPos) == CharCode.SEMICOLON)\n      ) {\n        sb.push(\"\\n\");\n      } else {\n        sb.push(\";\\n\");\n      }\n    }\n  }\n\n  visitBlockStatement(node: BlockStatement): void {\n    var sb = this.sb;\n    var statements = node.statements;\n    var numStatements = statements.length;\n    if (numStatements) {\n      sb.push(\"{\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0; i < numStatements; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(statements[i]);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\"{}\");\n    }\n  }\n\n  visitBreakStatement(node: BreakStatement): void {\n    var label = node.label;\n    if (label) {\n      this.sb.push(\"break \");\n      this.visitIdentifierExpression(label);\n    } else {\n      this.sb.push(\"break\");\n    }\n  }\n\n  visitContinueStatement(node: ContinueStatement): void {\n    var label = node.label;\n    if (label) {\n      this.sb.push(\"continue \");\n      this.visitIdentifierExpression(label);\n    } else {\n      this.sb.push(\"continue\");\n    }\n  }\n\n  visitClassDeclaration(node: ClassDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    if (node.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n    if (node.name.text.length) {\n      sb.push(\"class \");\n      this.visitIdentifierExpression(node.name);\n    } else {\n      sb.push(\"class\");\n    }\n    var typeParameters = node.typeParameters;\n    if (typeParameters != null && typeParameters.length > 0) {\n      sb.push(\"<\");\n      this.visitTypeParameter(typeParameters[0]);\n      for (let i = 1, k = typeParameters.length; i < k; ++i) {\n        sb.push(\", \");\n        this.visitTypeParameter(typeParameters[i]);\n      }\n      sb.push(\">\");\n    }\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    var implementsTypes = node.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (numImplementsTypes) {\n        sb.push(\" implements \");\n        this.visitTypeNode(implementsTypes[0]);\n        for (let i = 1; i < numImplementsTypes; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(implementsTypes[i]);\n        }\n      }\n    }\n    var indexSignature = node.indexSignature;\n    var members = node.members;\n    var numMembers = members.length;\n    if (indexSignature !== null || numMembers) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      if (indexSignature) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(indexSignature);\n      }\n      for (let i = 0, k = members.length; i < k; ++i) {\n        let member = members[i];\n        if (member.kind != NodeKind.FIELDDECLARATION || (<FieldDeclaration>member).parameterIndex < 0) {\n          indent(sb, indentLevel);\n          this.visitNodeAndTerminate(member);\n        }\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitDoStatement(node: DoStatement): void {\n    var sb = this.sb;\n    sb.push(\"do \");\n    this.visitNode(node.statement);\n    if (node.statement.kind == NodeKind.BLOCK) {\n      sb.push(\" while (\");\n    } else {\n      sb.push(\";\\n\");\n      indent(sb, this.indentLevel);\n      sb.push(\"while (\");\n    }\n    this.visitNode(node.condition);\n    sb.push(\")\");\n  }\n\n  visitEmptyStatement(node: EmptyStatement): void {\n    /* nop */\n  }\n\n  visitEnumDeclaration(node: EnumDeclaration, isDefault: bool = false): void {\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    if (node.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    this.visitIdentifierExpression(node.name);\n    var values = node.values;\n    var numValues = values.length;\n    if (numValues) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitEnumValueDeclaration(node.values[0]);\n      for (let i = 1; i < numValues; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, indentLevel);\n        this.visitEnumValueDeclaration(node.values[i]);\n      }\n      sb.push(\"\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitEnumValueDeclaration(node: EnumValueDeclaration): void {\n    this.visitIdentifierExpression(node.name);\n    var initializer = node.initializer;\n    if (initializer) {\n      this.sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitExportImportStatement(node: ExportImportStatement): void {\n    var sb = this.sb;\n    sb.push(\"export import \");\n    this.visitIdentifierExpression(node.externalName);\n    sb.push(\" = \");\n    this.visitIdentifierExpression(node.name);\n  }\n\n  visitExportMember(node: ExportMember): void {\n    this.visitIdentifierExpression(node.localName);\n    if (node.exportedName.text != node.localName.text) {\n      this.sb.push(\" as \");\n      this.visitIdentifierExpression(node.exportedName);\n    }\n  }\n\n  visitExportStatement(node: ExportStatement): void {\n    var sb = this.sb;\n    if (node.isDeclare) {\n      sb.push(\"declare \");\n    }\n    var members = node.members;\n    if (members != null && members.length > 0) {\n      let numMembers = members.length;\n      sb.push(\"export {\\n\");\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitExportMember(members[0]);\n      for (let i = 1; i < numMembers; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, indentLevel);\n        this.visitExportMember(members[i]);\n      }\n      --this.indentLevel;\n      sb.push(\"\\n}\");\n    } else {\n      sb.push(\"export {}\");\n    }\n    var path = node.path;\n    if (path) {\n      sb.push(\" from \");\n      this.visitStringLiteralExpression(path);\n    }\n    sb.push(\";\");\n  }\n\n  visitExportDefaultStatement(node: ExportDefaultStatement): void {\n    var declaration = node.declaration;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        this.visitEnumDeclaration(<EnumDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        this.visitFunctionDeclaration(<FunctionDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        this.visitClassDeclaration(<ClassDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        this.visitInterfaceDeclaration(<InterfaceDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        this.visitNamespaceDeclaration(<NamespaceDeclaration>declaration, true);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitExpressionStatement(node: ExpressionStatement): void {\n    this.visitNode(node.expression);\n  }\n\n  visitFieldDeclaration(node: FieldDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    this.serializeAccessModifiers(node);\n    this.visitIdentifierExpression(node.name);\n    var sb = this.sb;\n    if (node.flags & CommonFlags.DEFINITELY_ASSIGNED) {\n      sb.push(\"!\");\n    }\n    var type = node.type;\n    if (type) {\n      sb.push(\": \");\n      this.visitTypeNode(type);\n    }\n    var initializer = node.initializer;\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitForStatement(node: ForStatement): void {\n    var sb = this.sb;\n    sb.push(\"for (\");\n    var initializer = node.initializer;\n    if (initializer) {\n      this.visitNode(initializer);\n    }\n    var condition = node.condition;\n    if (condition) {\n      sb.push(\"; \");\n      this.visitNode(condition);\n    } else {\n      sb.push(\";\");\n    }\n    var incrementor = node.incrementor;\n    if (incrementor) {\n      sb.push(\"; \");\n      this.visitNode(incrementor);\n    } else {\n      sb.push(\";\");\n    }\n    sb.push(\") \");\n    this.visitNode(node.statement);\n  }\n\n  visitForOfStatement(node: ForOfStatement): void {\n    var sb = this.sb;\n    sb.push(\"for (\");\n    this.visitNode(node.variable);\n    sb.push(\" of \");\n    this.visitNode(node.iterable);\n    sb.push(\") \");\n    this.visitNode(node.statement);\n  }\n\n  visitFunctionDeclaration(node: FunctionDeclaration, isDefault: bool = false): void {\n    var sb = this.sb;\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n      this.serializeAccessModifiers(node);\n    }\n    if (node.name.text.length) {\n      sb.push(\"function \");\n    } else {\n      sb.push(\"function\");\n    }\n    this.visitFunctionCommon(node);\n  }\n\n  visitFunctionCommon(node: FunctionDeclaration): void {\n    var sb = this.sb;\n    this.visitIdentifierExpression(node.name);\n    var signature = node.signature;\n    var typeParameters = node.typeParameters;\n    if (typeParameters) {\n      let numTypeParameters = typeParameters.length;\n      if (numTypeParameters) {\n        sb.push(\"<\");\n        this.visitTypeParameter(typeParameters[0]);\n        for (let i = 1; i < numTypeParameters; ++i) {\n          sb.push(\", \");\n          this.visitTypeParameter(typeParameters[i]);\n        }\n        sb.push(\">\");\n      }\n    }\n    if (node.arrowKind == ArrowKind.ARROW_SINGLE) {\n      let parameters = signature.parameters;\n      assert(parameters.length == 1);\n      assert(!signature.explicitThisType);\n      this.serializeParameter(parameters[0]);\n    } else {\n      sb.push(\"(\");\n      let parameters = signature.parameters;\n      let numParameters = parameters.length;\n      let explicitThisType = signature.explicitThisType;\n      if (explicitThisType) {\n        sb.push(\"this: \");\n        this.visitTypeNode(explicitThisType);\n      }\n      if (numParameters) {\n        if (explicitThisType) sb.push(\", \");\n        this.serializeParameter(parameters[0]);\n        for (let i = 1; i < numParameters; ++i) {\n          sb.push(\", \");\n          this.serializeParameter(parameters[i]);\n        }\n      }\n    }\n    var body = node.body;\n    var returnType = signature.returnType;\n    if (node.arrowKind) {\n      if (body) {\n        if (node.arrowKind == ArrowKind.ARROW_SINGLE) {\n          assert(isTypeOmitted(returnType));\n        } else {\n          if (isTypeOmitted(returnType)) {\n            sb.push(\")\");\n          } else {\n            sb.push(\"): \");\n            this.visitTypeNode(returnType);\n          }\n        }\n        sb.push(\" => \");\n        this.visitNode(body);\n      } else {\n        assert(!isTypeOmitted(returnType));\n        sb.push(\" => \");\n        this.visitTypeNode(returnType);\n      }\n    } else {\n      if (\n        !isTypeOmitted(returnType) &&\n        !node.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)\n      ) {\n        sb.push(\"): \");\n        this.visitTypeNode(returnType);\n      } else {\n        sb.push(\")\");\n      }\n      if (body) {\n        sb.push(\" \");\n        this.visitNode(body);\n      }\n    }\n  }\n\n  visitIfStatement(node: IfStatement): void {\n    var sb = this.sb;\n    sb.push(\"if (\");\n    this.visitNode(node.condition);\n    sb.push(\") \");\n    var ifTrue = node.ifTrue;\n    this.visitNode(ifTrue);\n    if (ifTrue.kind != NodeKind.BLOCK) {\n      sb.push(\";\\n\");\n    }\n    var ifFalse = node.ifFalse;\n    if (ifFalse) {\n      if (ifTrue.kind == NodeKind.BLOCK) {\n        sb.push(\" else \");\n      } else {\n        sb.push(\"else \");\n      }\n      this.visitNode(ifFalse);\n    }\n  }\n\n  visitImportDeclaration(node: ImportDeclaration): void {\n    var externalName = node.foreignName;\n    var name = node.name;\n    this.visitIdentifierExpression(externalName);\n    if (externalName.text != name.text) {\n      this.sb.push(\" as \");\n      this.visitIdentifierExpression(name);\n    }\n  }\n\n  visitImportStatement(node: ImportStatement): void {\n    var sb = this.sb;\n    sb.push(\"import \");\n    var declarations = node.declarations;\n    var namespaceName = node.namespaceName;\n    if (declarations) {\n      let numDeclarations = declarations.length;\n      if (numDeclarations) {\n        sb.push(\"{\\n\");\n        let indentLevel = ++this.indentLevel;\n        indent(sb, indentLevel);\n        this.visitImportDeclaration(declarations[0]);\n        for (let i = 1; i < numDeclarations; ++i) {\n          sb.push(\",\\n\");\n          indent(sb, indentLevel);\n          this.visitImportDeclaration(declarations[i]);\n        }\n        --this.indentLevel;\n        sb.push(\"\\n} from \");\n      } else {\n        sb.push(\"{} from \");\n      }\n    } else if (namespaceName) {\n      sb.push(\"* as \");\n      this.visitIdentifierExpression(namespaceName);\n      sb.push(\" from \");\n    }\n    this.visitStringLiteralExpression(node.path);\n  }\n\n  visitIndexSignature(node: IndexSignatureNode): void {\n    var sb = this.sb;\n    sb.push(\"[key: \");\n    this.visitTypeNode(node.keyType);\n    sb.push(\"]: \");\n    this.visitTypeNode(node.valueType);\n  }\n\n  visitInterfaceDeclaration(node: InterfaceDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    sb.push(\"interface \");\n    this.visitIdentifierExpression(node.name);\n    var typeParameters = node.typeParameters;\n    if (typeParameters != null && typeParameters.length > 0) {\n      sb.push(\"<\");\n      this.visitTypeParameter(typeParameters[0]);\n      for (let i = 1, k = typeParameters.length; i < k; ++i) {\n        sb.push(\", \");\n        this.visitTypeParameter(typeParameters[i]);\n      }\n      sb.push(\">\");\n    }\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    // must not have implementsTypes\n    sb.push(\" {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var members = node.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(members[i]);\n    }\n    --this.indentLevel;\n    sb.push(\"}\");\n  }\n\n  visitMethodDeclaration(node: MethodDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    this.serializeAccessModifiers(node);\n    if (node.is(CommonFlags.GET)) {\n      this.sb.push(\"get \");\n    } else if (node.is(CommonFlags.SET)) {\n      this.sb.push(\"set \");\n    }\n    this.visitFunctionCommon(node);\n  }\n\n  visitNamespaceDeclaration(node: NamespaceDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    sb.push(\"namespace \");\n    this.visitIdentifierExpression(node.name);\n    var members = node.members;\n    var numMembers = members.length;\n    if (numMembers) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0, k = members.length; i < k; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(members[i]);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitReturnStatement(node: ReturnStatement): void {\n    var value = node.value;\n    if (value) {\n      this.sb.push(\"return \");\n      this.visitNode(value);\n    } else {\n      this.sb.push(\"return\");\n    }\n  }\n\n  visitSwitchCase(node: SwitchCase): void {\n    var sb = this.sb;\n    var label = node.label;\n    if (label) {\n      sb.push(\"case \");\n      this.visitNode(label);\n      sb.push(\":\\n\");\n    } else {\n      sb.push(\"default:\\n\");\n    }\n    var statements = node.statements;\n    var numStatements = statements.length;\n    if (numStatements) {\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(statements[0]);\n      for (let i = 1; i < numStatements; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(statements[i]);\n      }\n      --this.indentLevel;\n    }\n  }\n\n  visitSwitchStatement(node: SwitchStatement): void {\n    var sb = this.sb;\n    sb.push(\"switch (\");\n    this.visitNode(node.condition);\n    sb.push(\") {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var cases = node.cases;\n    for (let i = 0, k = cases.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitSwitchCase(cases[i]);\n      sb.push(\"\\n\");\n    }\n    --this.indentLevel;\n    sb.push(\"}\");\n  }\n\n  visitThrowStatement(node: ThrowStatement): void {\n    this.sb.push(\"throw \");\n    this.visitNode(node.value);\n  }\n\n  visitTryStatement(node: TryStatement): void {\n    var sb = this.sb;\n    sb.push(\"try {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var statements = node.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(statements[i]);\n    }\n    var catchVariable = node.catchVariable;\n    if (catchVariable) {\n      indent(sb, indentLevel - 1);\n      sb.push(\"} catch (\");\n      this.visitIdentifierExpression(catchVariable);\n      sb.push(\") {\\n\");\n      let catchStatements = node.catchStatements;\n      if (catchStatements) {\n        for (let i = 0, k = catchStatements.length; i < k; ++i) {\n          indent(sb, indentLevel);\n          this.visitNodeAndTerminate(catchStatements[i]);\n        }\n      }\n    }\n    var finallyStatements = node.finallyStatements;\n    if (finallyStatements) {\n      indent(sb, indentLevel - 1);\n      sb.push(\"} finally {\\n\");\n      for (let i = 0, k = finallyStatements.length; i < k; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(finallyStatements[i]);\n      }\n    }\n    indent(sb, indentLevel - 1);\n    sb.push(\"}\");\n  }\n\n  visitTypeDeclaration(node: TypeDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    this.serializeExternalModifiers(node);\n    sb.push(\"type \");\n    this.visitIdentifierExpression(node.name);\n    var typeParameters = node.typeParameters;\n    if (typeParameters) {\n      let numTypeParameters = typeParameters.length;\n      if (numTypeParameters) {\n        sb.push(\"<\");\n        for (let i = 0; i < numTypeParameters; ++i) {\n          this.visitTypeParameter(typeParameters[i]);\n        }\n        sb.push(\">\");\n      }\n    }\n    sb.push(\" = \");\n    this.visitTypeNode(node.type);\n  }\n\n  visitVariableDeclaration(node: VariableDeclaration): void {\n    this.visitIdentifierExpression(node.name);\n    var type = node.type;\n    var sb = this.sb;\n    if (node.flags & CommonFlags.DEFINITELY_ASSIGNED) {\n      sb.push(\"!\");\n    }\n    if (type) {\n      sb.push(\": \");\n      this.visitTypeNode(type);\n    }\n    var initializer = node.initializer;\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitVariableStatement(node: VariableStatement): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    var declarations = node.declarations;\n    var numDeclarations = assert(declarations.length);\n    var firstDeclaration = declarations[0];\n    this.serializeExternalModifiers(firstDeclaration);\n    sb.push(firstDeclaration.is(CommonFlags.CONST) ? \"const \" : firstDeclaration.is(CommonFlags.LET) ? \"let \" : \"var \");\n    this.visitVariableDeclaration(node.declarations[0]);\n    for (let i = 1; i < numDeclarations; ++i) {\n      sb.push(\", \");\n      this.visitVariableDeclaration(node.declarations[i]);\n    }\n  }\n\n  visitWhileStatement(node: WhileStatement): void {\n    var sb = this.sb;\n    sb.push(\"while (\");\n    this.visitNode(node.condition);\n    var statement = node.statement;\n    if (statement.kind == NodeKind.EMPTY) {\n      sb.push(\")\");\n    } else {\n      sb.push(\") \");\n      this.visitNode(node.statement);\n    }\n  }\n\n  // other\n\n  serializeDecorator(node: DecoratorNode): void {\n    var sb = this.sb;\n    sb.push(\"@\");\n    this.visitNode(node.name);\n    var args = node.args;\n    if (args) {\n      sb.push(\"(\");\n      let numArgs = args.length;\n      if (numArgs) {\n        this.visitNode(args[0]);\n        for (let i = 1; i < numArgs; ++i) {\n          sb.push(\", \");\n          this.visitNode(args[i]);\n        }\n      }\n      sb.push(\")\\n\");\n    } else {\n      sb.push(\"\\n\");\n    }\n    indent(sb, this.indentLevel);\n  }\n\n  serializeParameter(node: ParameterNode): void {\n    var sb = this.sb;\n    var kind = node.parameterKind;\n    var implicitFieldDeclaration = node.implicitFieldDeclaration;\n    if (implicitFieldDeclaration) {\n      this.serializeAccessModifiers(implicitFieldDeclaration);\n    }\n    if (kind == ParameterKind.REST) {\n      sb.push(\"...\");\n    }\n    this.visitIdentifierExpression(node.name);\n    var type = node.type;\n    var initializer = node.initializer;\n    if (type) {\n      if (kind == ParameterKind.OPTIONAL && !initializer) sb.push(\"?\");\n      if (!isTypeOmitted(type)) {\n        sb.push(\": \");\n        this.visitTypeNode(type);\n      }\n    }\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  serializeExternalModifiers(node: DeclarationStatement): void {\n    var sb = this.sb;\n    if (node.is(CommonFlags.EXPORT)) {\n      sb.push(\"export \");\n    } else if (node.is(CommonFlags.IMPORT)) {\n      sb.push(\"import \");\n    } else if (node.is(CommonFlags.DECLARE)) {\n      sb.push(\"declare \");\n    }\n  }\n\n  serializeAccessModifiers(node: DeclarationStatement): void {\n    var sb = this.sb;\n    if (node.is(CommonFlags.PUBLIC)) {\n      sb.push(\"public \");\n    } else if (node.is(CommonFlags.PRIVATE)) {\n      sb.push(\"private \");\n    } else if (node.is(CommonFlags.PROTECTED)) {\n      sb.push(\"protected \");\n    }\n    if (node.is(CommonFlags.STATIC)) {\n      sb.push(\"static \");\n    } else if (node.is(CommonFlags.ABSTRACT)) {\n      sb.push(\"abstract \");\n    }\n    if (node.is(CommonFlags.READONLY)) {\n      sb.push(\"readonly \");\n    }\n  }\n\n  finish(): string {\n    var ret = this.sb.join(\"\");\n    this.sb = [];\n    return ret;\n  }\n}\n"],"sourceRoot":""}